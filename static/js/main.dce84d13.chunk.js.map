{"version":3,"sources":["util/tubemap.js","enums.js","components/DataPositionFormRow.js","components/MountedDataFormRow.js","components/FileUploadFormRow.js","components/ExampleSelectButtons.js","components/HeaderForm.js","components/TubeMap.js","components/TubeMapContainer.js","components/RadioRow.js","components/CustomizationAccordion.js","App.js","index.js"],"names":["svgID","svg","zoom","nodes","tracks","reads","numberOfNodes","numberOfTracks","nodeMap","nodesPerOrder","maxOrder","trackForRuler","bed","dataOriginTypes","API","EXAMPLE_1","EXAMPLE_2","EXAMPLE_3","EXAMPLE_4","EXAMPLE_5","EXAMPLE_6","DEBUG","greys","blues","reds","plainColors","lightColors","haplotypeColors","forwardReadColors","reverseReadColors","exonColors","inputNodes","inputTracks","inputReads","assignments","extraLeft","extraRight","config","mergeNodesFlag","transparentNodesFlag","clickableNodesFlag","showExonsFlag","colorScheme","nodeWidthOption","showReads","showSoftClips","hideLegendFlag","colorReadsByMappingQuality","mappingQualityCutoff","trackRectangles","trackCurves","trackCorners","trackVerticalRectangles","trackRectanglesStep3","maxYCoordinate","minYCoordinate","maxXCoordinate","straightenTrack","index","i","j","currentSequence","nodeName","nodesToInvert","sequence","length","charAt","substr","indexOf","push","concat","forEach","node","name","seq","split","reverse","join","setColorSet","trackType","colorSet","createTubeMap","drawLegend","setNodeWidthOption","value","undefined","d3","selectAll","remove","JSON","parse","stringify","getColorSet","filter","read","is_secondary","mapping_quality","hasOwnProperty","type","hidden","splice","generateNodeMap","generateTrackIndexSequences","generateNodeWidth","generateNodeSuccessors","generateNodeOrder","reverseReversedReads","nodeName2","tracksAndReads","pred","succ","Set","track","get","add","Array","from","sortedNodes","slice","sort","compareNodesByOrder","mergeOffset","Map","mergeOrigin","predecessor","mergeableWithPred","set","sequenceLength","firstNodeOffset","finalNodeCoverLength","mergeableWithSucc","sequenceNew","mismatches","mismatch","pos","donor","width","nodeIndex","mergeNodes","indexSequence","Math","abs","id","degree","console","log","max","order","getMaxOrder","allAreFour","round","freq","calculateTrackWidth","segmentNumber","currentNodeIndex","currentNodeIsForward","currentNode","previousNode","previousNodeIsForward","prevSegmentPerOrderPerTrack","isPositive","n","trackNo","path","lane","isForward","addToAssignment","generateSingleLaneAssignment","generateLaneAssignment","nodeStart","nodeEnd","feature","line","start","end","continue","features","addTrackFeatures","currentX","nextX","currentOrder","extra","leftSideEdges","rightSideEdges","calculateExtraSpace","x","pixelWidth","generateNodeXCoords","orderY","setMapToMax","y","contentHeight","step","generateReadOnlyNodeAttributes","generateBasicPathsForReads","incomingReads","outgoingReads","internalReads","idx","element","pathIdx","compareReadIncomingSegmentsByComingFrom","currentY","occupiedUntil","readElement","setOccupiedUntil","maxY","compareReadOutgoingSegmentsByGoingTo","occupiedFrom","has","incReadElementIndices","incRead","incReadPathElement","compareInternalReads","readIdx","currentRead","heightIncrease","adjustBy","assignmentNode","aNode","trackID","segmentID","adjustVertically3","bottomY","calculateBottomY","elementsWithoutNode","readIndex","pathIndex","previousY","compareNoNodeReadsByPreviousY","segment","placeReads","xStart","xEnd","yStart","yEnd","trackColor","highlight","dummy","reversalFlag","orderStartX","orderEndX","generateTrackColor","getXCoordinateOfBaseWithinNode","getReadXStart","createFeatureRectangle","min","color","laneChange","generateForwardToReverse","generateReverseToForward","getReadXEnd","generateSVGShapesFromPath","attr","document","getElementById","substring","parentNode","offsetWidth","minZoom","scaleExtent","translateExtent","on","transform","k","svg2","clientWidth","call","append","containerWidth","xOffset","translate","alignSVG","defs","pattern","attrs","height","patternUnits","patternTransform","fill","defineSVGPatterns","drawTrackRectangles","drawTrackCurves","drawReversalsByColor","dNodes","allNodes","removeUnusedNodes","d","data","enter","nodeMouseOver","nodeMouseOut","nodeDoubleClick","style","text","drawNodes","drawLabels","rulerTrackIndex","rulerTrack","markingInterval","indexOfFirstBaseInNode","indexOfFirstBase","atLeastOneMarkingDrawn","xCoordOfPreviousMarking","firstNode","drawRulerMarking","nextMarking","ceil","xCoordOfMarking","drawRuler","trackIdx","mm","nodeY","insertionMouseOver","insertionMouseOut","drawInsertion","x2","x1","deletionMouseOver","deletionMouseOut","drawDeletion","substitutionMouseOver","substitutionMouseOut","drawSubstitution","map","key","a","b","segmentA","segmentB","pathIndexA","pathIndexB","nodeA","nodeB","beginDiff","pathA","pathB","idxA","idxB","is_reverse","_loop","nodeWidth","getReverseComplement","temp","seqLength","s","result","tracksOrReads","zoomBy","zoomFactor","parentElement","translateK","translateX","translateY","transition","duration","scale","current","follower","successors","predecessors","generateNodeOrderOfSingleTrack","forwardOrder","backwardOrder","minOrder","increaseOrderForAllNodes","generateNodeOrderTrackBeginning","increment","anchorIndex","modifiedSequence","rightIndex","leftIndex","uninvert","increaseOrderForSuccessors","isSuccessor","first","second","visited","stack","pop","childIndex","amount","startingNode","tabuNode","newOrder","increasedOrders","queue","_loop2","shift","successor","compareToFromSame","assignment","currentLane","potentialAdjustmentValues","prevNameIsNull","prevTrack","idealLane","idealY","getIdealLanesAndCoords","compareByIdealLane","topLane","verticalAdjustment","minAdjustmentCost","Number","MAX_SAFE_INTEGER","moveBy","getVerticalAdjustmentCost","adjustVertically","colorSetName","base","nodeLeftX","nodeRightX","nodeXStart","nodeXEnd","rectXStart","c","co","featureXStart","featureXEnd","currentHighlight","trackWidth","yTop","yBottom","corners","rectangles","rect","filterObjectByAttribute","trackMouseOver","trackMouseOut","trackDoubleClick","drawTrackCorners","sequencePosition","xCoordinate","attribute","item","compareCurvesByLineChanges","myTrackCurves","curve","xMiddle","content","listeners","innerHTML","addEventListener","changeTrackVisibility","this","each","unshift","moveTrackToFirstPosition","nodeID","click","vgExtractNodes","vg","getComputedTextLength","vgExtractTracks","isCompletelyReverse","mapping","position","node_id","index2","vgExtractReads","myNodes","myTracks","myReads","extracted","nodeNames","_loop3","firstIndex","lastIndex","edit","offset","toString","parseInt","posWithinNode","from_length","finalNodeEdit","predecessorIndex","successorIndex","ZOOM_FACTOR","DataPositionFormRow","handleZoomIn","tubeMap","handleZoomOut","handleDownloadButton","svgN","svgData","XMLSerializer","serializeToString","svgBlob","Blob","svgUrl","URL","createObjectURL","downloadLink","createElement","href","download","body","appendChild","removeChild","react_default","Form","inline","Label","className","for","Input","size","props","onChange","handleInputChange","distance","byNode","uploadInProgress","Button","onClick","handleGoButton","disabled","handleGoLeft","index_es","icon","faStepBackward","faSearchPlus","faSearchMinus","handleGoRight","faStepForward","Component","MountedDataFormRow","xgFileDropdownOptions","xgSelectOptions","fileName","gbwtFileDropdownOptions","gbwtSelectOptions","gamFileDropdownOptions","gamSelectOptions","pathDropdownOptions","pathSelectOptions","pathName","Fragment","xgSelect","gbwtSelect","gamSelect","pathSelect","BACKEND_URL","window","location","host","MAX_UPLOAD_SIZE","FileUploadFormRow","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","onXgFileChange","file","xgFileInput","files","resetPathNames","handleFileUpload","showFileSizeAlert","setUploadInProgress","formData","FormData","xhr","XMLHttpRequest","responseType","onreadystatechange","readyState","status","response","getPathNames","open","send","onGbwtFileChange","gbwtFileInput","onGamFileChange","gamFileInput","React","createRef","accept","innerRef","ExampleSelectButtons","handleClick","dataOrigin","haploColor","readColor","setDataOrigin","setColorSetting","_this2","DATA_SOURCES","dataTypes","BUILT_IN","FILE_UPLOAD","MOUNTED_FILES","EXAMPLES","HeaderForm","state","xgFile","gbwtFile","gamFile","anchorTrackName","dataPath","dataType","fileSizeAlert","getMountedFilenames","_callee","json","regenerator_default","wrap","_context","prev","next","fetch","method","headers","Content-Type","sent","xgFiles","gbwtFiles","gamIndices","setState","includes","t0","stop","_callee2","isUploadedFile","_context2","pathNames","handleDataSourceChange","event","target","ds","useMountedPath","defaultPosition","fetchParams","setFetchParams","defineProperty","fileType","val","setUpWebsocket","ws","WebSocket","replace","onmessage","message","onclose","setTimeout","onerror","close","dataSourceDropdownOptions","mountedFilesFlag","uploadFilesFlag","examplesFlag","Container","fluid","Row","Col","md","src","alt","components_MountedDataFormRow","components_FileUploadFormRow","Alert","isOpen","toggle","components_ExampleSelectButtons","components_DataPositionFormRow","TubeMap","params","clickableNodes","hideLegend","TubeMapContainer","isLoading","error","getRemoteTubeMapData","graph","gam","getExampleData","__webpack_require__","e","then","bind","inputTracks1","abrupt","inputTracks2","inputTracks3","inputTracks4","inputTracks5","k3138","readsFromStringToArray","demoReads","readsString","lines","prevProps","_this$state","components_TubeMap","colorMap","RadioRow","colorRadios","_ref","_ref2","slicedToArray","keyColor","valueColor","xs","FormGroup","check","checked","row","sm","rowHeading","VisualizationOptions","isOpenLegend","isOpenVisualizationOptions","toggleLegend","preventDefault","toggleVisOptions","handleMappingQualityCutoffChange","_this$props","visOptions","toggleFlag","mappingQualityOptions","keys","Card","CardHeader","Collapse","CardBody","removeRedundantNodes","compressedView","transparentNodes","components_RadioRow","App","toggleVisOptionFlag","flagName","objectSpread","components_HeaderForm","components_TubeMapContainer","CustomizationAccordion","ReactDOM","render","src_App_0"],"mappings":"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","file":"static/js/main.dce84d13.chunk.js","sourcesContent":["/* eslint no-param-reassign: \"off\" */\n/* eslint no-lonely-if: \"off\" */\n/* eslint no-prototype-builtins: \"off\" */\n/* eslint no-console: \"off\" */\n/* eslint no-continue: \"off\" */\n\n/* eslint max-len: \"off\" */\n/* eslint no-loop-func: \"off\" */\n/* eslint no-unused-vars: \"off\" */\n/* eslint no-return-assign: \"off\" */\nimport * as d3 from 'd3';\nimport 'd3-selection-multi';\n\nconst DEBUG = false;\n\nconst greys = [\n  '#d9d9d9',\n  '#bdbdbd',\n  '#969696',\n  '#737373',\n  '#525252',\n  '#252525',\n  '#000000'\n];\n\nconst blues = [\n  '#c6dbef',\n  '#9ecae1',\n  '#6baed6',\n  '#4292c6',\n  '#2171b5',\n  '#08519c',\n  '#08306b'\n];\n\nconst reds = [\n  '#fcbba1',\n  '#fc9272',\n  '#fb6a4a',\n  '#ef3b2c',\n  '#cb181d',\n  '#a50f15',\n  '#67000d'\n];\n\n// d3 category10\nconst plainColors = [\n  '#1f77b4',\n  '#ff7f0e',\n  '#2ca02c',\n  '#d62728',\n  '#9467bd',\n  '#8c564b',\n  '#e377c2',\n  '#7f7f7f',\n  '#bcbd22',\n  '#17becf'\n];\n\n// d3 category10\nconst lightColors = [\n  '#ABCCE3',\n  '#FFCFA5',\n  '#B0DBB0',\n  '#F0AEAE',\n  '#D7C6E6',\n  '#C6ABA5',\n  '#F4CCE8',\n  '#CFCFCF',\n  '#E6E6AC',\n  '#A8E7ED'\n];\n\nlet haplotypeColors = [];\nlet forwardReadColors = [];\nlet reverseReadColors = [];\nlet exonColors = [];\n\nlet svgID; // the (html-tag) ID of the svg\nlet svg; // the svg\nexport let zoom; // eslint-disable-line import/no-mutable-exports\nlet inputNodes = [];\nlet inputTracks = [];\nlet inputReads = [];\nlet nodes;\nlet tracks;\nlet reads;\nlet numberOfNodes;\nlet numberOfTracks;\nlet nodeMap; // maps node names to node indices\nlet nodesPerOrder;\nlet assignments = []; // contains info about lane assignments sorted by order\nlet extraLeft = []; // info whether nodes have to be moved further apart because of multiple 180° directional changes at the same horizontal order\nlet extraRight = []; // info whether nodes have to be moved further apart because of multiple 180° directional changes at the same horizontal order\nlet maxOrder; // horizontal order of the rightmost node\n\nconst config = {\n  mergeNodesFlag: true,\n  transparentNodesFlag: false,\n  clickableNodesFlag: false,\n  showExonsFlag: false,\n  colorScheme: 0,\n  // Options for the width of sequence nodes:\n  // 0...scale node width linear with number of bases within node\n  // 1...scale node width with log2 of number of bases within node\n  // 2...scale node width with log10 of number of bases within node\n  nodeWidthOption: 0,\n  showReads: true,\n  showSoftClips: true,\n  haplotypeColors: 'greys',\n  forwardReadColors: 'reds',\n  reverseReadColors: 'blues',\n  exonColors: 'lightColors',\n  hideLegendFlag: false,\n  colorReadsByMappingQuality: false,\n  mappingQualityCutoff: 0\n};\n\n// variables for storing info which can be directly translated into drawing instructions\nlet trackRectangles = [];\nlet trackCurves = [];\nlet trackCorners = [];\nlet trackVerticalRectangles = []; // stored separately from horizontal rectangles. This allows drawing them in a separate step -> avoids issues with wrong overlapping\nlet trackRectanglesStep3 = [];\n\nlet maxYCoordinate = 0;\nlet minYCoordinate = 0;\nlet maxXCoordinate = 0;\nlet trackForRuler;\n\nlet bed;\n\n// main function to call from outside\n// which starts the process of creating a tube map visualization\nexport function create(params) {\n  // mandatory parameters: svgID, nodes, tracks\n  // optional parameters: bed, clickableNodes, reads, showLegend\n  svgID = params.svgID;\n  svg = d3.select(params.svgID);\n  inputNodes = JSON.parse(JSON.stringify(params.nodes)); // deep copy\n  inputTracks = JSON.parse(JSON.stringify(params.tracks)); // deep copy\n  inputReads = params.reads || null;\n  bed = params.bed || null;\n  config.clickableNodesFlag = params.clickableNodes || false;\n  config.hideLegendFlag = params.hideLegend || false;\n  const tr = createTubeMap();\n  if (!config.hideLegendFlag) drawLegend(tr);\n}\n\n// moves a specific track to the top\nfunction moveTrackToFirstPosition(index) {\n  inputTracks.unshift(inputTracks[index]); // add element to beginning\n  inputTracks.splice(index + 1, 1); // remove 1 element from the middle\n  straightenTrack(0);\n}\n\n// straighten track given by index by inverting inverted nodes\n// only keep them inverted if this single track runs thrugh them in both directions\nfunction straightenTrack(index) {\n  let i;\n  let j;\n  const nodesToInvert = [];\n  let currentSequence;\n  let nodeName;\n\n  // find out which nodes should be inverted\n  currentSequence = inputTracks[index].sequence;\n  for (i = 0; i < currentSequence.length; i += 1) {\n    if (currentSequence[i].charAt(0) === '-') {\n      nodeName = currentSequence[i].substr(1);\n      if (\n        currentSequence.indexOf(nodeName) === -1 ||\n        currentSequence.indexOf(nodeName) > i\n      ) {\n        // only if this inverted node is no repeat\n        nodesToInvert.push(currentSequence[i].substr(1));\n      }\n    }\n  }\n\n  // invert nodes in the tracks' sequence\n  for (i = 0; i < inputTracks.length; i += 1) {\n    currentSequence = inputTracks[i].sequence;\n    for (j = 0; j < currentSequence.length; j += 1) {\n      if (currentSequence[j].charAt(0) !== '-') {\n        if (nodesToInvert.indexOf(currentSequence[j]) !== -1) {\n          currentSequence[j] = `-${currentSequence[j]}`;\n        }\n      } else if (nodesToInvert.indexOf(currentSequence[j].substr(1)) !== -1) {\n        currentSequence[j] = currentSequence[j].substr(1);\n      }\n    }\n  }\n\n  // invert the sequence within the nodes\n  inputNodes.forEach(node => {\n    if (nodesToInvert.indexOf(node.name) !== -1) {\n      node.seq = node.seq\n        .split('')\n        .reverse()\n        .join('');\n    }\n  });\n}\n\nexport function changeTrackVisibility(trackID) {\n  let i = 0;\n  while (i < inputTracks.length && inputTracks[i].id !== trackID) i += 1;\n  if (i < inputTracks.length) {\n    if (inputTracks[i].hasOwnProperty('hidden')) {\n      inputTracks[i].hidden = !inputTracks[i].hidden;\n    } else {\n      inputTracks[i].hidden = true;\n    }\n  }\n  createTubeMap();\n}\n\nexport function changeExonVisibility() {\n  config.showExonsFlag = !config.showExonsFlag;\n  createTubeMap();\n}\n\n// sets the flag for whether redundant nodes should be automatically removed or not\nexport function setMergeNodesFlag(value) {\n  if (config.mergeNodesFlag !== value) {\n    config.mergeNodesFlag = value;\n    svg = d3.select(svgID);\n    createTubeMap();\n  }\n}\n\n// sets the flag for whether nodes should be fully transparent or not\nexport function setTransparentNodesFlag(value) {\n  if (config.transparentNodesFlag !== value) {\n    config.transparentNodesFlag = value;\n    svg = d3.select(svgID);\n    createTubeMap();\n  }\n}\n\n// sets the flag for whether read soft clips should be displayed or not\nexport function setSoftClipsFlag(value) {\n  if (config.showSoftClips !== value) {\n    config.showSoftClips = value;\n    svg = d3.select(svgID);\n    createTubeMap();\n  }\n}\n\n// sets the flag for whether reads should be displayed or not\nexport function setShowReadsFlag(value) {\n  if (config.showReads !== value) {\n    config.showReads = value;\n    svg = d3.select(svgID);\n    createTubeMap();\n  }\n}\n\nexport function setColorSet(trackType, colorSet) {\n  if (config[trackType] !== colorSet) {\n    config[trackType] = colorSet;\n    const tr = createTubeMap();\n    if (!config.hideLegendFlag) drawLegend(tr);\n  }\n}\n\n// sets which option should be used for calculating the node width from its sequence length\nexport function setNodeWidthOption(value) {\n  if (value === 0 || value === 1 || value === 2) {\n    if (config.nodeWidthOption !== value) {\n      config.nodeWidthOption = value;\n      if (svg !== undefined) {\n        svg = d3.select(svgID);\n        createTubeMap();\n      }\n    }\n  }\n}\n\nexport function setColorReadsByMappingQualityFlag(value) {\n  if (config.colorReadsByMappingQuality !== value) {\n    config.colorReadsByMappingQuality = value;\n    svg = d3.select(svgID);\n    createTubeMap();\n  }\n}\n\nexport function setMappingQualityCutoff(value) {\n  if (config.mappingQualityCutoff !== value) {\n    config.mappingQualityCutoff = value;\n    if (svg !== undefined) {\n      svg = d3.select(svgID);\n      createTubeMap();\n    }\n  }\n}\n\n// main\nfunction createTubeMap() {\n  trackRectangles = [];\n  trackCurves = [];\n  trackCorners = [];\n  trackVerticalRectangles = [];\n  trackRectanglesStep3 = [];\n  assignments = [];\n  extraLeft = [];\n  extraRight = [];\n  maxYCoordinate = 0;\n  minYCoordinate = 0;\n  maxXCoordinate = 0;\n  trackForRuler = undefined;\n  svg = d3.select(svgID);\n  svg.selectAll('*').remove(); // clear svg for (re-)drawing\n\n  // early exit is necessary when visualization options such as colors are\n  // changed before any graph has been rendered\n  if (inputNodes.length === 0 || inputTracks.length === 0) return;\n\n  straightenTrack(0);\n  nodes = JSON.parse(JSON.stringify(inputNodes)); // deep copy (can add stuff to copy and leave original unchanged)\n  tracks = JSON.parse(JSON.stringify(inputTracks));\n  reads = JSON.parse(JSON.stringify(inputReads));\n\n  assignColorSets();\n  reads = filterReads(reads);\n\n  for (let i = tracks.length - 1; i >= 0; i -= 1) {\n    if (!tracks[i].hasOwnProperty('type')) {\n      // TODO: maybe remove \"haplo\"-property?\n      tracks[i].type = 'haplo';\n    }\n    if (tracks[i].hasOwnProperty('hidden')) {\n      if (tracks[i].hidden === true) {\n        tracks.splice(i, 1);\n      }\n    }\n    if (tracks[i] && tracks[i].hasOwnProperty('indexOfFirstBase')) {\n      trackForRuler = tracks[i].name;\n    }\n  }\n  if (tracks.length === 0) return;\n\n  nodeMap = generateNodeMap(nodes);\n  generateTrackIndexSequences(tracks);\n  if (reads && config.showReads) generateTrackIndexSequences(reads);\n  generateNodeWidth();\n\n  if (config.mergeNodesFlag) {\n    generateNodeSuccessors(); // requires indexSequence\n    generateNodeOrder(); // requires successors\n    if (reads && config.showReads) reverseReversedReads();\n    mergeNodes();\n    nodeMap = generateNodeMap(nodes);\n    generateNodeWidth();\n    generateTrackIndexSequences(tracks);\n    if (reads && config.showReads) generateTrackIndexSequences(reads);\n  }\n\n  numberOfNodes = nodes.length;\n  numberOfTracks = tracks.length;\n  generateNodeSuccessors();\n  generateNodeDegree();\n  if (DEBUG) console.log(`${numberOfNodes} nodes.`);\n  generateNodeOrder();\n  maxOrder = getMaxOrder();\n\n  // can cause problems when there is a reversed single track node\n  // OTOH, can solve problems with complex inversion patterns\n  // switchNodeOrientation();\n  // generateNodeOrder(nodes, tracks);\n  // maxOrder = getMaxOrder();\n\n  calculateTrackWidth(tracks);\n  generateLaneAssignment();\n\n  if (config.showExonsFlag === true && bed !== null) addTrackFeatures();\n  generateNodeXCoords();\n\n  if (reads && config.showReads) {\n    generateReadOnlyNodeAttributes();\n    reverseReversedReads();\n    generateTrackIndexSequences(reads);\n    placeReads();\n    tracks = tracks.concat(reads);\n  }\n\n  generateSVGShapesFromPath(nodes, tracks);\n  if (DEBUG) {\n    console.log('Tracks:');\n    console.log(tracks);\n    console.log('Nodes:');\n    console.log(nodes);\n    console.log('Lane assignment:');\n    console.log(assignments);\n  }\n  getImageDimensions();\n  alignSVG(nodes, tracks);\n  defineSVGPatterns();\n\n  drawTrackRectangles(trackRectangles);\n  drawTrackCurves();\n  drawReversalsByColor(trackCorners, trackVerticalRectangles);\n  drawTrackRectangles(trackRectanglesStep3);\n  drawTrackRectangles(trackRectangles, 'read');\n  drawTrackCurves('read');\n\n  // draw only those nodes which have coords assigned to them\n  const dNodes = removeUnusedNodes(nodes);\n  drawReversalsByColor(trackCorners, trackVerticalRectangles, 'read');\n  drawNodes(dNodes);\n  if (config.nodeWidthOption === 0) drawLabels(dNodes);\n  if (trackForRuler !== undefined) drawRuler();\n  if (config.nodeWidthOption === 0) drawMismatches(); // TODO: call this before drawLabels and fix d3 data/append/enter stuff\n  if (DEBUG) {\n    console.log(`number of tracks: ${numberOfTracks}`);\n    console.log(`number of nodes: ${numberOfNodes}`);\n  }\n  return tracks;\n}\n\n// generates attributes (node.y, node.contentHeight) for nodes without tracks, only reads\nfunction generateReadOnlyNodeAttributes() {\n  nodesPerOrder = [];\n  for (let i = 0; i <= maxOrder; i += 1) {\n    nodesPerOrder[i] = [];\n  }\n\n  const orderY = new Map();\n  nodes.forEach(node => {\n    if (node.hasOwnProperty('order') && node.hasOwnProperty('y')) {\n      setMapToMax(orderY, node.order, node.y + node.contentHeight);\n    }\n  });\n\n  // for order values where there is no node with haplotypes, orderY is calculated via tracks\n  tracks.forEach(track => {\n    if (track.type === 'haplo') {\n      track.path.forEach(step => {\n        setMapToMax(orderY, step.order, step.y + track.width);\n      });\n    }\n  });\n\n  nodes.forEach((node, i) => {\n    if (node.hasOwnProperty('order') && !node.hasOwnProperty('y')) {\n      node.y = orderY.get(node.order) + 25;\n      node.contentHeight = 0;\n      nodesPerOrder[node.order].push(i);\n    }\n  });\n}\n\nfunction setMapToMax(map, key, value) {\n  if (map.has(key)) {\n    map.set(key, Math.max(map.get(key), value));\n  } else {\n    map.set(key, value);\n  }\n}\n\n// add info about reads to nodes (incoming, outgoing and internal reads)\nfunction assignReadsToNodes() {\n  nodes.forEach(node => {\n    node.incomingReads = [];\n    node.outgoingReads = [];\n    node.internalReads = [];\n  });\n  reads.forEach((read, idx) => {\n    read.width = 7;\n    if (read.path.length === 1) {\n      nodes[read.path[0].node].internalReads.push(idx);\n    } else {\n      read.path.forEach((element, pathIdx) => {\n        if (pathIdx === 0) {\n          nodes[read.path[0].node].outgoingReads.push([idx, pathIdx]);\n        } else if (read.path[pathIdx].node !== null) {\n          nodes[read.path[pathIdx].node].incomingReads.push([idx, pathIdx]);\n        }\n      });\n    }\n  });\n}\n\nfunction removeNonPathNodesFromReads() {\n  reads.forEach(read => {\n    for (let i = read.sequence.length - 1; i >= 0; i -= 1) {\n      let nodeName = read.sequence[i];\n      if (nodeName.charAt(0) === '-') {\n        nodeName = nodeName.substr(1);\n      }\n      if (!nodeMap.has(nodeName) || nodes[nodeMap.get(nodeName)].degree === 0) {\n        read.sequence.splice(i, 1);\n      }\n    }\n  });\n}\n\n// calculate paths (incl. correct y coordinate) for all reads\nfunction placeReads() {\n  generateBasicPathsForReads();\n  assignReadsToNodes();\n\n  // sort nodes by order, then by y-coordinate\n  const sortedNodes = nodes.slice();\n  sortedNodes.sort(compareNodesByOrder);\n\n  // iterate over all nodes\n  sortedNodes.forEach(node => {\n    // sort incoming reads\n    node.incomingReads.sort(compareReadIncomingSegmentsByComingFrom);\n\n    // place incoming reads\n    let currentY = node.y + node.contentHeight;\n    const occupiedUntil = new Map();\n    node.incomingReads.forEach(readElement => {\n      reads[readElement[0]].path[readElement[1]].y = currentY;\n      setOccupiedUntil(\n        occupiedUntil,\n        reads[readElement[0]],\n        readElement[1],\n        currentY,\n        node\n      );\n      currentY += 7;\n    });\n    let maxY = currentY;\n\n    // sort outgoing reads\n    node.outgoingReads.sort(compareReadOutgoingSegmentsByGoingTo);\n\n    // place outgoing reads\n    const occupiedFrom = new Map();\n    currentY = node.y + node.contentHeight;\n    node.outgoingReads.forEach(readElement => {\n      // place in next lane\n      reads[readElement[0]].path[readElement[1]].y = currentY;\n      occupiedFrom.set(currentY, reads[readElement[0]].firstNodeOffset);\n      // if no conflicts\n      if (\n        !occupiedUntil.has(currentY) ||\n        occupiedUntil.get(currentY) + 1 < reads[readElement[0]].firstNodeOffset\n      ) {\n        currentY += 7;\n        maxY = Math.max(maxY, currentY);\n      } else {\n        // otherwise push down incoming reads to make place for outgoing Read\n        occupiedUntil.set(currentY, 0);\n        node.incomingReads.forEach(incReadElementIndices => {\n          const incRead = reads[incReadElementIndices[0]];\n          const incReadPathElement = incRead.path[incReadElementIndices[1]];\n          if (incReadPathElement.y >= currentY) {\n            incReadPathElement.y += 7;\n            setOccupiedUntil(\n              occupiedUntil,\n              incRead,\n              incReadElementIndices[1],\n              incReadPathElement.y,\n              node\n            );\n          }\n        });\n        currentY += 7;\n        maxY += 7;\n      }\n    });\n\n    // sort internal reads\n    node.internalReads.sort(compareInternalReads);\n\n    // place internal reads\n    node.internalReads.forEach(readIdx => {\n      const currentRead = reads[readIdx];\n      currentY = node.y + node.contentHeight;\n      while (\n        currentRead.firstNodeOffset < occupiedUntil.get(currentY) + 2 ||\n        currentRead.finalNodeCoverLength > occupiedFrom.get(currentY) - 3\n      ) {\n        currentY += 7;\n      }\n      currentRead.path[0].y = currentY;\n      occupiedUntil.set(currentY, currentRead.finalNodeCoverLength);\n      maxY = Math.max(maxY, currentY);\n    });\n\n    // adjust node height and move other nodes vertically down\n    const heightIncrease = maxY - node.y - node.contentHeight;\n    node.contentHeight += heightIncrease;\n    adjustVertically3(node, heightIncrease);\n  });\n\n  // place read segments which are without node\n  const bottomY = calculateBottomY();\n  const elementsWithoutNode = [];\n  reads.forEach((read, idx) => {\n    read.path.forEach((element, pathIdx) => {\n      if (!element.hasOwnProperty('y')) {\n        elementsWithoutNode.push({\n          readIndex: idx,\n          pathIndex: pathIdx,\n          previousY: reads[idx].path[pathIdx - 1].y\n        });\n      }\n    });\n  });\n  elementsWithoutNode.sort(compareNoNodeReadsByPreviousY);\n  elementsWithoutNode.forEach(element => {\n    const segment = reads[element.readIndex].path[element.pathIndex];\n    segment.y = bottomY[segment.order];\n    bottomY[segment.order] += reads[element.readIndex].width;\n  });\n\n  if (DEBUG) {\n    console.log('Reads:');\n    console.log(reads);\n  }\n}\n\n// keeps track of where reads end within nodes\nfunction setOccupiedUntil(map, read, pathIndex, y, node) {\n  if (pathIndex === read.path.length - 1) {\n    // last node of current read\n    map.set(y, read.finalNodeCoverLength);\n  } else {\n    // read covers the whole node\n    map.set(y, node.sequenceLength);\n  }\n}\n\n// compare read segments which are outside of nodes\n// by the y-coord of where they are coming from\nfunction compareNoNodeReadsByPreviousY(a, b) {\n  const segmentA = reads[a.readIndex].path[a.pathIndex];\n  const segmentB = reads[b.readIndex].path[b.pathIndex];\n  if (segmentA.order === segmentB.order) {\n    return a.previousY - b.previousY;\n  }\n  return segmentA.order - segmentB.order;\n}\n\n// compare read segments by where they are going to\nfunction compareReadOutgoingSegmentsByGoingTo(a, b) {\n  let pathIndexA = a[1];\n  let pathIndexB = b[1];\n  // let readA = reads[a[0]]\n  // let nodeIndexA = readA.path[pathIndexA].node;\n  let nodeA = nodes[reads[a[0]].path[pathIndexA].node];\n  let nodeB = nodes[reads[b[0]].path[pathIndexB].node];\n  while (nodeA !== null && nodeB !== null && nodeA === nodeB) {\n    if (pathIndexA < reads[a[0]].path.length - 1) {\n      pathIndexA += 1;\n      while (reads[a[0]].path[pathIndexA].node === null) pathIndexA += 1; // skip null nodes in path\n      nodeA = nodes[reads[a[0]].path[pathIndexA].node];\n    } else {\n      nodeA = null;\n    }\n    if (pathIndexB < reads[b[0]].path.length - 1) {\n      pathIndexB += 1;\n      while (reads[b[0]].path[pathIndexB].node === null) pathIndexB += 1; // skip null nodes in path\n      nodeB = nodes[reads[b[0]].path[pathIndexB].node];\n    } else {\n      nodeB = null;\n    }\n  }\n  if (nodeA !== null) {\n    if (nodeB !== null) return compareNodesByOrder(nodeA, nodeB);\n    return 1; // nodeB is null, nodeA not null\n  }\n  if (nodeB !== null) return -1; // nodeB not null, nodeA null\n  // both nodes are null -> both end in the same node\n  const beginDiff = reads[a[0]].firstNodeOffset - reads[b[0]].firstNodeOffset;\n  if (beginDiff !== 0) return beginDiff;\n  // break tie: both reads cover the same nodes and begin at the same position -> compare by endPosition\n  return reads[a[0]].finalNodeCoverLength - reads[b[0]].finalNodeCoverLength;\n}\n\n// compare read segments by (y-coord of) where they are coming from\nfunction compareReadIncomingSegmentsByComingFrom(a, b) {\n  // these boundary conditions avoid errors for incoming reads\n  // from inverted nodes (u-turns)\n  if (a[1] === 0) return -1;\n  if (b[1] === 0) return 1;\n\n  const pathA = reads[a[0]].path[a[1] - 1];\n  const pathB = reads[b[0]].path[b[1] - 1];\n  if (pathA.hasOwnProperty('y')) {\n    if (pathB.hasOwnProperty('y')) {\n      return pathA.y - pathB.y; // a and b have y-property\n    }\n    return -1; // only a has y-property\n  }\n  if (pathB.hasOwnProperty('y')) {\n    return 1; // only b has y-property\n  }\n  return compareReadIncomingSegmentsByComingFrom(\n    [a[0], a[1] - 1],\n    [b[0], b[1] - 1]\n  ); // neither has y-property\n}\n\n// compare 2 reads which are completely within a single node\nfunction compareInternalReads(idxA, idxB) {\n  const a = reads[idxA];\n  const b = reads[idxB];\n  // compare by first base within first node\n  if (a.firstNodeOffset < b.firstNodeOffset) return -1;\n  else if (a.firstNodeOffset > b.firstNodeOffset) return 1;\n\n  // compare by last base within last node\n  if (a.finalNodeCoverLength < b.finalNodeCoverLength) return -1;\n  else if (a.finalNodeCoverLength > b.finalNodeCoverLength) return 1;\n\n  return 0;\n}\n\n// determine biggest y-coordinate for each order-value\nfunction calculateBottomY() {\n  const bottomY = [];\n  for (let i = 0; i <= maxOrder; i += 1) {\n    bottomY.push(0);\n  }\n\n  nodes.forEach(node => {\n    bottomY[node.order] = Math.max(\n      bottomY[node.order],\n      node.y + node.contentHeight + 20\n    );\n  });\n\n  tracks.forEach(track => {\n    track.path.forEach(element => {\n      bottomY[element.order] = Math.max(\n        bottomY[element.order],\n        element.y + track.width\n      );\n    });\n  });\n  return bottomY;\n}\n\n// generate path-info for each read\n// containing order, node and orientation, but no concrete coordinates\nfunction generateBasicPathsForReads() {\n  let currentNodeIndex;\n  let currentNodeIsForward;\n  let currentNode;\n  let previousNode;\n  let previousNodeIsForward;\n  const isPositive = n => ((n = +n) || 1 / n) >= 0;\n\n  reads.forEach(read => {\n    // add info for start of track\n    currentNodeIndex = Math.abs(read.indexSequence[0]);\n    currentNodeIsForward = isPositive(read.indexSequence[0]);\n    currentNode = nodes[currentNodeIndex];\n\n    read.path = [];\n    read.path.push({\n      order: currentNode.order,\n      isForward: currentNodeIsForward,\n      node: currentNodeIndex\n    });\n\n    for (let i = 1; i < read.sequence.length; i += 1) {\n      previousNode = currentNode;\n      previousNodeIsForward = currentNodeIsForward;\n\n      currentNodeIndex = Math.abs(read.indexSequence[i]);\n      currentNodeIsForward = isPositive(read.indexSequence[i]);\n      currentNode = nodes[currentNodeIndex];\n\n      if (currentNode.order > previousNode.order) {\n        if (!previousNodeIsForward) {\n          // backward to forward at previous node\n          read.path.push({\n            order: previousNode.order,\n            isForward: true,\n            node: null\n          });\n        }\n        for (let j = previousNode.order + 1; j < currentNode.order; j += 1) {\n          // forward without nodes\n          read.path.push({ order: j, isForward: true, node: null });\n        }\n        if (!currentNodeIsForward) {\n          // forward to backward at current node\n          read.path.push({\n            order: currentNode.order,\n            isForward: true,\n            node: null\n          });\n          read.path.push({\n            order: currentNode.order,\n            isForward: false,\n            node: currentNodeIndex\n          });\n        } else {\n          // current Node forward\n          read.path.push({\n            order: currentNode.order,\n            isForward: true,\n            node: currentNodeIndex\n          });\n        }\n      } else if (currentNode.order < previousNode.order) {\n        if (previousNodeIsForward) {\n          // turnaround from fw to bw at previous node\n          read.path.push({\n            order: previousNode.order,\n            isForward: false,\n            node: null\n          });\n        }\n        for (let j = previousNode.order - 1; j > currentNode.order; j -= 1) {\n          // bachward without nodes\n          read.path.push({ order: j, isForward: false, node: null });\n        }\n        if (currentNodeIsForward) {\n          // backward to forward at current node\n          read.path.push({\n            order: currentNode.order,\n            isForward: false,\n            node: null\n          });\n          read.path.push({\n            order: currentNode.order,\n            isForward: true,\n            node: currentNodeIndex\n          });\n        } else {\n          // backward at current node\n          read.path.push({\n            order: currentNode.order,\n            isForward: false,\n            node: currentNodeIndex\n          });\n        }\n      } else {\n        if (currentNodeIsForward !== previousNodeIsForward) {\n          read.path.push({\n            order: currentNode.order,\n            isForward: currentNodeIsForward,\n            node: currentNodeIndex\n          });\n        } else {\n          read.path.push({\n            order: currentNode.order,\n            isForward: !currentNodeIsForward,\n            node: null\n          });\n          read.path.push({\n            order: currentNode.order,\n            isForward: currentNodeIsForward,\n            node: currentNodeIndex\n          });\n        }\n      }\n    }\n  });\n}\n\n// reverse reads which are reversed\nfunction reverseReversedReads() {\n  reads.forEach(read => {\n    let pos = 0;\n    while (pos < read.sequence.length && read.sequence[pos].charAt(0) === '-') {\n      pos += 1;\n    }\n    if (pos === read.sequence.length) {\n      // completely reversed read\n      read.is_reverse = true;\n      read.sequence = read.sequence.reverse(); // invert sequence\n      for (let i = 0; i < read.sequence.length; i += 1) {\n        read.sequence[i] = read.sequence[i].substr(1); // remove '-'\n      }\n\n      read.sequenceNew = read.sequenceNew.reverse(); // invert sequence\n      for (let i = 0; i < read.sequenceNew.length; i += 1) {\n        read.sequenceNew[i].nodeName = read.sequenceNew[i].nodeName.substr(1); // remove '-'\n        const nodeWidth =\n          nodes[nodeMap.get(read.sequenceNew[i].nodeName)].width;\n        read.sequenceNew[i].mismatches.forEach(mm => {\n          if (mm.type === 'insertion') {\n            mm.pos = nodeWidth - mm.pos;\n            mm.seq = getReverseComplement(mm.seq);\n          } else if (mm.type === 'deletion') {\n            mm.pos = nodeWidth - mm.pos - mm.length;\n          } else if (mm.type === 'substitution') {\n            mm.pos = nodeWidth - mm.pos - mm.seq.length;\n            mm.seq = getReverseComplement(mm.seq);\n          }\n          if (mm.hasOwnProperty('seq')) {\n            mm.seq = mm.seq\n              .split('')\n              .reverse()\n              .join('');\n          }\n        });\n      }\n\n      // adjust firstNodeOffset and finalNodeCoverLength\n      const temp = read.firstNodeOffset;\n      let seqLength = nodes[nodeMap.get(read.sequence[0])].sequenceLength;\n      read.firstNodeOffset = seqLength - read.finalNodeCoverLength;\n      seqLength =\n        nodes[nodeMap.get(read.sequence[read.sequence.length - 1])]\n          .sequenceLength;\n      read.finalNodeCoverLength = seqLength - temp;\n    }\n  });\n}\n\nfunction getReverseComplement(s) {\n  let result = '';\n  for (let i = s.length - 1; i >= 0; i -= 1) {\n    switch (s.charAt(i)) {\n      case 'A':\n        result += 'T';\n        break;\n      case 'T':\n        result += 'A';\n        break;\n      case 'C':\n        result += 'G';\n        break;\n      case 'G':\n        result += 'C';\n        break;\n      default:\n        result += 'N';\n    }\n  }\n  return result;\n}\n\n// for each track: generate sequence of node indices from seq. of node names\nfunction generateTrackIndexSequencesNEW(tracksOrReads) {\n  tracksOrReads.forEach(track => {\n    track.indexSequence = [];\n    track.sequence.forEach(edit => {\n      if (edit.nodeName.charAt(0) === '-') {\n        track.indexSequence.push(-nodeMap.get(edit.nodeName.substr(1)));\n      } else {\n        track.indexSequence.push(nodeMap.get(edit.nodeName));\n      }\n    });\n  });\n}\n\n// for each track: generate sequence of node indices from seq. of node names\nfunction generateTrackIndexSequences(tracksOrReads) {\n  tracksOrReads.forEach(track => {\n    track.indexSequence = [];\n    track.sequence.forEach(nodeName => {\n      if (nodeName.charAt(0) === '-') {\n        track.indexSequence.push(-nodeMap.get(nodeName.substr(1)));\n      } else {\n        track.indexSequence.push(nodeMap.get(nodeName));\n      }\n    });\n  });\n}\n\n// remove nodes with no tracks moving through them to avoid d3.js errors\nfunction removeUnusedNodes(allNodes) {\n  const dNodes = allNodes.slice(0);\n  let i;\n  for (i = dNodes.length - 1; i >= 0; i -= 1) {\n    if (!dNodes[i].hasOwnProperty('x')) {\n      dNodes.splice(i, 1);\n    }\n  }\n  return dNodes;\n}\n\n// get the minimum and maximum coordinates used in the image to calculate image dimensions\nfunction getImageDimensions() {\n  maxXCoordinate = -99;\n  minYCoordinate = 99;\n  maxYCoordinate = -99;\n\n  nodes.forEach(node => {\n    if (node.hasOwnProperty('x')) {\n      maxXCoordinate = Math.max(maxXCoordinate, node.x + 20 + node.pixelWidth);\n    }\n    if (node.hasOwnProperty('y')) {\n      minYCoordinate = Math.min(minYCoordinate, node.y - 10);\n      maxYCoordinate = Math.max(\n        maxYCoordinate,\n        node.y + node.contentHeight + 10\n      );\n    }\n  });\n\n  tracks.forEach(track => {\n    track.path.forEach(segment => {\n      maxYCoordinate = Math.max(maxYCoordinate, segment.y + track.width);\n      minYCoordinate = Math.min(minYCoordinate, segment.y);\n    });\n  });\n}\n\n// align visualization to the top and left within svg and resize svg to correct size\n// enable zooming and panning\nfunction alignSVG() {\n  svg.attr('height', maxYCoordinate - minYCoordinate + 50);\n  svg.attr(\n    'width',\n    document.getElementById(svgID.substring(1)).parentNode.offsetWidth\n  );\n\n  function zoomed() {\n    const transform = d3.event.transform;\n    // vertical adjustment so that top of graph is at top of svg\n    // otherwise would violate translateExtent, which leads to graph \"jumping\" on next pan\n    transform.y = (25 - minYCoordinate) * transform.k;\n    svg.attr('transform', transform);\n    const svg2 = d3.select(svgID);\n    // adjust height, so that vertical scroll bar is shown when necessary\n    svg2.attr(\n      'height',\n      (maxYCoordinate - minYCoordinate + 50) * d3.event.transform.k\n    );\n    // adjust width to compensate for verical scroll bar appearing\n    svg2.attr('width', document.getElementById('tubeMapSVG').clientWidth);\n  }\n\n  const minZoom = Math.min(\n    1,\n    document.getElementById(svgID.substring(1)).parentNode.offsetWidth /\n      (maxXCoordinate + 10)\n  );\n  zoom = d3\n    .zoom()\n    .scaleExtent([minZoom, 8])\n    .translateExtent([\n      [-1, minYCoordinate - 25],\n      [maxXCoordinate + 2, maxYCoordinate + 25]\n    ])\n    .on('zoom', zoomed);\n\n  svg = svg\n    .call(zoom)\n    .on('dblclick.zoom', null)\n    .append('g');\n\n  // translate to correct position on initial draw\n  const containerWidth = document.getElementById(svgID.substring(1)).parentNode\n    .offsetWidth;\n  const xOffset =\n    maxXCoordinate + 10 < containerWidth\n      ? (containerWidth - maxXCoordinate - 10) / 2\n      : 0;\n  d3.select(svgID).call(\n    zoom.transform,\n    d3.zoomIdentity.translate(xOffset, 25 - minYCoordinate)\n  );\n}\n\nexport function zoomBy(zoomFactor) {\n  const minZoom = Math.min(\n    1,\n    document.getElementById(svgID.substring(1)).parentNode.offsetWidth /\n      (maxXCoordinate + 10)\n  );\n  const maxZoom = 8;\n  const width = document.getElementById(svgID.substring(1)).parentElement\n    .clientWidth;\n\n  const transform = d3.zoomTransform(d3.select(svgID).node());\n  const translateK = Math.min(\n    maxZoom,\n    Math.max(transform.k * zoomFactor, minZoom)\n  );\n  let translateX =\n    width / 2.0 - ((width / 2.0 - transform.x) * translateK) / transform.k;\n  translateX = Math.min(translateX, 1 * translateK);\n  translateX = Math.max(translateX, width - (maxXCoordinate + 2) * translateK);\n  const translateY = (25 - minYCoordinate) * translateK;\n  d3.select(svgID)\n    .transition()\n    .duration(750)\n    .call(\n      zoom.transform,\n      d3.zoomIdentity.translate(translateX, translateY).scale(translateK)\n    );\n}\n\n// map node names to node indices\nfunction generateNodeMap() {\n  nodeMap = new Map();\n  nodes.forEach((node, index) => {\n    nodeMap.set(node.name, index);\n  });\n  return nodeMap;\n}\n\n// adds a successor-array to each node containing the indices of the nodes coming directly after the current node\nfunction generateNodeSuccessors() {\n  let current;\n  let follower;\n\n  nodes.forEach(node => {\n    node.successors = [];\n    node.predecessors = [];\n  });\n\n  tracks.forEach(track => {\n    for (let i = 0; i < track.indexSequence.length - 1; i += 1) {\n      current = Math.abs(track.indexSequence[i]);\n      follower = Math.abs(track.indexSequence[i + 1]);\n      if (nodes[current].successors.indexOf(follower) === -1) {\n        nodes[current].successors.push(follower);\n      }\n      if (nodes[follower].predecessors.indexOf(current) === -1) {\n        nodes[follower].predecessors.push(current);\n      }\n    }\n  });\n\n  if (reads && config.showReads) {\n    reads.forEach(track => {\n      for (let i = 0; i < track.indexSequence.length - 1; i += 1) {\n        current = Math.abs(track.indexSequence[i]);\n        follower = Math.abs(track.indexSequence[i + 1]);\n        if (nodes[current].successors.indexOf(follower) === -1) {\n          nodes[current].successors.push(follower);\n        }\n        if (nodes[follower].predecessors.indexOf(current) === -1) {\n          nodes[follower].predecessors.push(current);\n        }\n      }\n    });\n  }\n}\n\nfunction generateNodeOrderOfSingleTrack(sequence) {\n  let forwardOrder = 0;\n  let backwardOrder = 0;\n  let currentNode;\n  let minOrder = 0;\n\n  sequence.forEach(nodeIndex => {\n    if (nodeIndex < 0) {\n      currentNode = nodes[Math.abs(nodeIndex)];\n      if (!currentNode.hasOwnProperty('order')) {\n        currentNode.order = backwardOrder;\n      }\n      if (currentNode.order < minOrder) minOrder = currentNode.order;\n      forwardOrder = currentNode.order;\n      backwardOrder = currentNode.order - 1;\n    } else {\n      currentNode = nodes[nodeIndex];\n      if (!currentNode.hasOwnProperty('order')) {\n        currentNode.order = forwardOrder;\n      }\n      forwardOrder = currentNode.order + 1;\n      backwardOrder = currentNode.order;\n    }\n  });\n  if (minOrder < 0) {\n    increaseOrderForAllNodes(-minOrder);\n  }\n}\n\n// calculate the order-value of nodes contained in sequence which are to the left of the first node which already has an order-value\nfunction generateNodeOrderTrackBeginning(sequence) {\n  let anchorIndex = 0;\n  let currentOrder;\n  let currentNode;\n  let minOrder = 0;\n  let increment;\n\n  while (\n    anchorIndex < sequence.length &&\n    !nodes[Math.abs(sequence[anchorIndex])].hasOwnProperty('order')\n  ) {\n    anchorIndex += 1; // anchor = first node in common with existing graph\n  }\n  if (anchorIndex >= sequence.length) {\n    return null;\n  }\n\n  if (sequence[anchorIndex] >= 0) {\n    // regular node\n    currentOrder = nodes[sequence[anchorIndex]].order - 1;\n    increment = -1;\n  } else {\n    // reverse node\n    currentOrder = nodes[-sequence[anchorIndex]].order + 1;\n    increment = 1;\n  }\n\n  for (let j = anchorIndex - 1; j >= 0; j -= 1) {\n    // assign order to nodes which are left of anchor node\n    currentNode = nodes[Math.abs(sequence[j])];\n    if (!currentNode.hasOwnProperty('order')) {\n      currentNode.order = currentOrder;\n      minOrder = Math.min(minOrder, currentOrder);\n      currentOrder += increment;\n    }\n  }\n\n  if (minOrder < 0) {\n    increaseOrderForAllNodes(-minOrder);\n  }\n  return anchorIndex;\n}\n\n// generate global sequence of nodes from left to right, starting with first track and adding other tracks sequentially\nfunction generateNodeOrder() {\n  let modifiedSequence;\n  let currentOrder;\n  let currentNode;\n  let rightIndex;\n  let leftIndex;\n  let minOrder = 0;\n  let tracksAndReads;\n  if (reads && config.showReads) tracksAndReads = tracks.concat(reads);\n  else tracksAndReads = tracks;\n\n  nodes.forEach(node => {\n    delete node.order;\n  });\n\n  generateNodeOrderOfSingleTrack(tracks[0].indexSequence); // calculate order values for all nodes of the first track\n\n  for (let i = 1; i < tracksAndReads.length; i += 1) {\n    if (DEBUG) console.log(`generating order for track ${i + 1}`);\n    rightIndex = generateNodeOrderTrackBeginning(\n      tracksAndReads[i].indexSequence\n    ); // calculate order values for all nodes until the first anchor\n    if (rightIndex === null) {\n      if (tracksAndReads[i].type === 'haplo') {\n        generateNodeOrderOfSingleTrack(tracksAndReads[i].indexSequence);\n      } else {\n        tracksAndReads.splice(i, 1);\n        reads.splice(i - tracks.length, 1);\n        i -= 1;\n      }\n      continue;\n    }\n    modifiedSequence = uninvert(tracksAndReads[i].indexSequence);\n\n    while (rightIndex < modifiedSequence.length) {\n      // move right until the end of the sequence\n      // find next anchor node\n      leftIndex = rightIndex;\n      rightIndex += 1;\n      while (\n        rightIndex < modifiedSequence.length &&\n        !nodes[modifiedSequence[rightIndex]].hasOwnProperty('order')\n      ) {\n        rightIndex += 1;\n      }\n\n      if (rightIndex < modifiedSequence.length) {\n        // middle segment between two anchors\n        currentOrder = nodes[modifiedSequence[leftIndex]].order + 1; // start with order value of leftAnchor + 1\n        for (let j = leftIndex + 1; j < rightIndex; j += 1) {\n          nodes[modifiedSequence[j]].order = currentOrder; // assign order values\n          currentOrder += 1;\n        }\n\n        if (\n          nodes[modifiedSequence[rightIndex]].order >\n          nodes[modifiedSequence[leftIndex]].order\n        ) {\n          // if order-value of left anchor < order-value of right anchor\n          if (nodes[modifiedSequence[rightIndex]].order < currentOrder) {\n            // and the right anchor now has a lower order-value than our newly added nodes\n            increaseOrderForSuccessors(\n              modifiedSequence[rightIndex],\n              modifiedSequence[rightIndex - 1],\n              currentOrder\n            );\n          }\n        } else {\n          // potential node reversal: check for ordering conflict, if no conflict found move node at rightIndex further to the right in order to not create a track reversal\n          if (\n            tracksAndReads[i].indexSequence[rightIndex] >= 0 &&\n            !isSuccessor(\n              modifiedSequence[rightIndex],\n              modifiedSequence[leftIndex]\n            )\n          ) {\n            // no real reversal\n            increaseOrderForSuccessors(\n              modifiedSequence[rightIndex],\n              modifiedSequence[rightIndex - 1],\n              currentOrder\n            );\n          } else {\n            // real reversal\n            if (\n              tracksAndReads[i].sequence[leftIndex] < 0 ||\n              (nodes[modifiedSequence[leftIndex + 1]].degree < 2 &&\n                nodes[modifiedSequence[rightIndex]].order <\n                  nodes[modifiedSequence[leftIndex]].order)\n            ) {\n              currentOrder = nodes[modifiedSequence[leftIndex]].order - 1; // start with order value of leftAnchor - 1\n              for (let j = leftIndex + 1; j < rightIndex; j += 1) {\n                nodes[modifiedSequence[j]].order = currentOrder; // assign order values\n                currentOrder -= 1;\n              }\n            }\n          }\n        }\n      } else {\n        // right segment to the right of last anchor\n        if (tracksAndReads[i].sequence[leftIndex] >= 0) {\n          // elongate towards the right\n          currentOrder = nodes[modifiedSequence[leftIndex]].order + 1;\n          for (let j = leftIndex + 1; j < modifiedSequence.length; j += 1) {\n            currentNode = nodes[modifiedSequence[j]];\n            if (!currentNode.hasOwnProperty('order')) {\n              currentNode.order = currentOrder;\n              currentOrder += 1;\n            }\n          }\n        } else {\n          // elongate towards the left\n          currentOrder = nodes[modifiedSequence[leftIndex]].order - 1;\n          for (let j = leftIndex + 1; j < modifiedSequence.length; j += 1) {\n            currentNode = nodes[modifiedSequence[j]];\n            if (!currentNode.hasOwnProperty('order')) {\n              currentNode.order = currentOrder;\n              minOrder = Math.min(minOrder, currentOrder);\n              currentOrder -= 1;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  // adjust all nodes if necessary, so that no order<0\n  if (minOrder < 0) increaseOrderForAllNodes(-minOrder);\n}\n\nfunction isSuccessor(first, second) {\n  const visited = new Array(numberOfNodes).fill(false);\n  const stack = [];\n  stack.push(first);\n  visited[first] = true;\n  while (stack.length > 0) {\n    const current = stack.pop();\n    if (current === second) return true;\n    for (let i = 0; i < nodes[current].successors.length; i += 1) {\n      const childIndex = nodes[current].successors[i];\n      if (!visited[childIndex]) {\n        visited[childIndex] = true;\n        stack.push(childIndex);\n      }\n    }\n  }\n  return false;\n}\n\n// get order number of the rightmost node\nfunction getMaxOrder() {\n  let max = -1;\n  nodes.forEach(node => {\n    if (node.hasOwnProperty('order') && node.order > max) max = node.order;\n  });\n  return max;\n}\n\n// generates sequence keeping the order but switching all reversed (negative) nodes to forward nodes\nfunction uninvert(sequence) {\n  const result = [];\n  for (let i = 0; i < sequence.length; i += 1) {\n    if (sequence[i] >= 0) {\n      result.push(sequence[i]);\n    } else {\n      result.push(-sequence[i]);\n    }\n  }\n  return result;\n}\n\n// increases the order-value of all nodes by amount\nfunction increaseOrderForAllNodes(amount) {\n  nodes.forEach(node => {\n    if (node.hasOwnProperty('order')) node.order += amount;\n  });\n}\n\n// increases the order-value for currentNode and (if necessary) successor nodes recursively\nfunction increaseOrderForSuccessors(startingNode, tabuNode, newOrder) {\n  const increasedOrders = new Map();\n  const queue = [];\n  queue.push([startingNode, newOrder]);\n\n  while (queue.length > 0) {\n    const current = queue.shift();\n    const currentNode = current[0];\n    const currentOrder = current[1];\n\n    if (\n      nodes[currentNode].hasOwnProperty('order') &&\n      nodes[currentNode].order < currentOrder\n    ) {\n      if (\n        !increasedOrders.has(currentNode) ||\n        increasedOrders.get(currentNode) < currentOrder\n      ) {\n        increasedOrders.set(currentNode, currentOrder);\n        nodes[currentNode].successors.forEach(successor => {\n          if (\n            nodes[successor].order > nodes[currentNode].order &&\n            successor !== tabuNode\n          ) {\n            // only increase order of successors if they lie to the right of the currentNode (not for repeats/translocations)\n            queue.push([successor, currentOrder + 1]);\n          }\n        });\n        if (currentNode !== startingNode) {\n          nodes[currentNode].predecessors.forEach(predecessor => {\n            if (\n              nodes[predecessor].order > currentNode.order &&\n              predecessor !== tabuNode\n            ) {\n              // only increase order of predecessors if they lie to the right of the currentNode (not for repeats/translocations)\n              queue.push([predecessor, currentOrder + 1]);\n            }\n          });\n        }\n      }\n    }\n  }\n\n  increasedOrders.forEach((value, key) => {\n    nodes[key].order = value;\n  });\n}\n\n// calculates the node degree: the number of tracks passing through the node / the node height\nfunction generateNodeDegree() {\n  nodes.forEach(node => {\n    node.tracks = [];\n  });\n\n  tracks.forEach(track => {\n    track.indexSequence.forEach(nodeIndex => {\n      nodes[Math.abs(nodeIndex)].tracks.push(track.id);\n    });\n  });\n\n  nodes.forEach(node => {\n    if (node.hasOwnProperty('tracks')) node.degree = node.tracks.length;\n  });\n}\n\n// if more tracks pass through a specific node in reverse direction than in\n// regular direction, switch its orientation\n// (does not apply to the first track's nodes, these are always oriented as\n// dictated by the first track)\nfunction switchNodeOrientation() {\n  const toSwitch = new Map();\n  let nodeName;\n  let prevNode;\n  let nextNode;\n  let currentNode;\n\n  for (let i = 1; i < tracks.length; i += 1) {\n    for (let j = 0; j < tracks[i].sequence.length; j += 1) {\n      nodeName = tracks[i].sequence[j];\n      if (nodeName.charAt(0) === '-') nodeName = nodeName.substr(1);\n      currentNode = nodes[nodeMap.get(nodeName)];\n      if (tracks[0].sequence.indexOf(nodeName) === -1) {\n        // do not change orientation for nodes which are part of the pivot track\n        if (j > 0) {\n          if (tracks[i].sequence[j - 1].charAt(0) !== '-') {\n            prevNode = nodes[nodeMap.get(tracks[i].sequence[j - 1])];\n          } else {\n            prevNode = nodes[nodeMap.get(tracks[i].sequence[j - 1].substr(1))];\n          }\n        }\n        if (j < tracks[i].sequence.length - 1) {\n          if (tracks[i].sequence[j + 1].charAt(0) !== '-') {\n            nextNode = nodes[nodeMap.get(tracks[i].sequence[j + 1])];\n          } else {\n            nextNode = nodes[nodeMap.get(tracks[i].sequence[j + 1].substr(1))];\n          }\n        }\n        if (\n          (j === 0 || prevNode.order < currentNode.order) &&\n          (j === tracks[i].sequence.length - 1 ||\n            currentNode.order < nextNode.order)\n        ) {\n          if (!toSwitch.has(nodeName)) toSwitch.set(nodeName, 0);\n          if (tracks[i].sequence[j].charAt(0) === '-') {\n            toSwitch.set(nodeName, toSwitch.get(nodeName) + 1);\n          } else {\n            toSwitch.set(nodeName, toSwitch.get(nodeName) - 1);\n          }\n        }\n        if (\n          (j === 0 || prevNode.order > currentNode.order) &&\n          (j === tracks[i].sequence.length - 1 ||\n            currentNode.order > nextNode.order)\n        ) {\n          if (!toSwitch.has(nodeName)) toSwitch.set(nodeName, 0);\n          if (tracks[i].sequence[j].charAt(0) === '-') {\n            toSwitch.set(nodeName, toSwitch.get(nodeName) - 1);\n          } else {\n            toSwitch.set(nodeName, toSwitch.get(nodeName) + 1);\n          }\n        }\n      }\n    }\n  }\n\n  tracks.forEach((track, trackIndex) => {\n    track.sequence.forEach((node, nodeIndex) => {\n      nodeName = node;\n      if (nodeName.charAt(0) === '-') nodeName = nodeName.substr(1);\n      if (toSwitch.has(nodeName) && toSwitch.get(nodeName) > 0) {\n        if (node.charAt(0) === '-') {\n          tracks[trackIndex].sequence[nodeIndex] = node.substr(1);\n        } else {\n          tracks[trackIndex].sequence[nodeIndex] = `-${node}`;\n        }\n      }\n    });\n  });\n\n  // invert the sequence within the nodes\n  toSwitch.forEach((value, key) => {\n    if (value > 0) {\n      currentNode = nodeMap.get(key);\n      nodes[currentNode].seq = nodes[currentNode].seq\n        .split('')\n        .reverse()\n        .join('');\n    }\n  });\n}\n\n// calculates the concrete values for the nodes' x-coordinates\nfunction generateNodeXCoords() {\n  let currentX = 0;\n  let nextX = 20;\n  let currentOrder = -1;\n  const sortedNodes = nodes.slice();\n  sortedNodes.sort(compareNodesByOrder);\n  const extra = calculateExtraSpace();\n\n  sortedNodes.forEach(node => {\n    if (node.hasOwnProperty('order')) {\n      if (node.order > currentOrder) {\n        currentOrder = node.order;\n        currentX = nextX + 10 * extra[node.order];\n      }\n      node.x = currentX;\n      nextX = Math.max(nextX, currentX + 40 + node.pixelWidth);\n    }\n  });\n}\n\n// calculates additional horizontal space needed between two nodes\n// two neighboring nodes have to be moved further apart if there is a lot going on in between them\n// -> edges turning to vertical orientation should not overlap\nfunction calculateExtraSpace() {\n  const leftSideEdges = [];\n  const rightSideEdges = [];\n  const extra = [];\n\n  for (let i = 0; i <= maxOrder; i += 1) {\n    leftSideEdges.push(0);\n    rightSideEdges.push(0);\n  }\n\n  tracks.forEach(track => {\n    for (let i = 1; i < track.path.length; i += 1) {\n      if (track.path[i].order === track.path[i - 1].order) {\n        // repeat or translocation\n        if (track.path[i].isForward === true) {\n          leftSideEdges[track.path[i].order] += 1;\n        } else {\n          rightSideEdges[track.path[i].order] += 1;\n        }\n      }\n    }\n  });\n\n  extra.push(Math.max(0, leftSideEdges[0] - 1));\n  for (let i = 1; i <= maxOrder; i += 1) {\n    extra.push(\n      Math.max(0, leftSideEdges[i] - 1) + Math.max(0, rightSideEdges[i - 1] - 1)\n    );\n  }\n  return extra;\n}\n\n// create and fill assignment-variable, which contains info about tracks and lanes for each order-value\nfunction generateLaneAssignment() {\n  let segmentNumber;\n  let currentNodeIndex;\n  let currentNodeIsForward;\n  let currentNode;\n  let previousNode;\n  let previousNodeIsForward;\n  const prevSegmentPerOrderPerTrack = [];\n  const isPositive = n => ((n = +n) || 1 / n) >= 0;\n\n  // create empty variables\n  for (let i = 0; i <= maxOrder; i += 1) {\n    assignments[i] = [];\n    prevSegmentPerOrderPerTrack[i] = [];\n    for (let j = 0; j < numberOfTracks; j += 1) {\n      prevSegmentPerOrderPerTrack[i][j] = null;\n    }\n  }\n\n  tracks.forEach((track, trackNo) => {\n    // add info for start of track\n    currentNodeIndex = Math.abs(track.indexSequence[0]);\n    currentNodeIsForward = isPositive(track.indexSequence[0]);\n    currentNode = nodes[currentNodeIndex];\n\n    track.path = [];\n    track.path.push({\n      order: currentNode.order,\n      lane: null,\n      isForward: currentNodeIsForward,\n      node: currentNodeIndex\n    });\n    addToAssignment(\n      currentNode.order,\n      currentNodeIndex,\n      trackNo,\n      0,\n      prevSegmentPerOrderPerTrack\n    );\n\n    segmentNumber = 1;\n    for (let i = 1; i < track.sequence.length; i += 1) {\n      previousNode = currentNode;\n      previousNodeIsForward = currentNodeIsForward;\n\n      currentNodeIndex = Math.abs(track.indexSequence[i]);\n      currentNodeIsForward = isPositive(track.indexSequence[i]);\n      currentNode = nodes[currentNodeIndex];\n\n      if (currentNode.order > previousNode.order) {\n        if (!previousNodeIsForward) {\n          // backward to forward at previous node\n          track.path.push({\n            order: previousNode.order,\n            lane: null,\n            isForward: true,\n            node: null\n          });\n          addToAssignment(\n            previousNode.order,\n            null,\n            trackNo,\n            segmentNumber,\n            prevSegmentPerOrderPerTrack\n          );\n          segmentNumber += 1;\n        }\n        for (let j = previousNode.order + 1; j < currentNode.order; j += 1) {\n          // forward without nodes\n          track.path.push({\n            order: j,\n            lane: null,\n            isForward: true,\n            node: null\n          });\n          addToAssignment(\n            j,\n            null,\n            trackNo,\n            segmentNumber,\n            prevSegmentPerOrderPerTrack\n          );\n          segmentNumber += 1;\n        }\n        if (!currentNodeIsForward) {\n          // forward to backward at current node\n          track.path.push({\n            order: currentNode.order,\n            lane: null,\n            isForward: true,\n            node: null\n          });\n          addToAssignment(\n            currentNode.order,\n            null,\n            trackNo,\n            segmentNumber,\n            prevSegmentPerOrderPerTrack\n          );\n          segmentNumber += 1;\n          track.path.push({\n            order: currentNode.order,\n            lane: null,\n            isForward: false,\n            node: currentNodeIndex\n          });\n          addToAssignment(\n            currentNode.order,\n            currentNodeIndex,\n            trackNo,\n            segmentNumber,\n            prevSegmentPerOrderPerTrack\n          );\n          segmentNumber += 1;\n        } else {\n          // current Node forward\n          track.path.push({\n            order: currentNode.order,\n            lane: null,\n            isForward: true,\n            node: currentNodeIndex\n          });\n          addToAssignment(\n            currentNode.order,\n            currentNodeIndex,\n            trackNo,\n            segmentNumber,\n            prevSegmentPerOrderPerTrack\n          );\n          segmentNumber += 1;\n        }\n      } else if (currentNode.order < previousNode.order) {\n        if (previousNodeIsForward) {\n          // turnaround from fw to bw at previous node\n          track.path.push({\n            order: previousNode.order,\n            lane: null,\n            isForward: false,\n            node: null\n          });\n          addToAssignment(\n            previousNode.order,\n            null,\n            trackNo,\n            segmentNumber,\n            prevSegmentPerOrderPerTrack\n          );\n          segmentNumber += 1;\n        }\n        for (let j = previousNode.order - 1; j > currentNode.order; j -= 1) {\n          // bachward without nodes\n          track.path.push({\n            order: j,\n            lane: null,\n            isForward: false,\n            node: null\n          });\n          addToAssignment(\n            j,\n            null,\n            trackNo,\n            segmentNumber,\n            prevSegmentPerOrderPerTrack\n          );\n          segmentNumber += 1;\n        }\n        if (currentNodeIsForward) {\n          // backward to forward at current node\n          track.path.push({\n            order: currentNode.order,\n            lane: null,\n            isForward: false,\n            node: null\n          });\n          addToAssignment(\n            currentNode.order,\n            null,\n            trackNo,\n            segmentNumber,\n            prevSegmentPerOrderPerTrack\n          );\n          segmentNumber += 1;\n          track.path.push({\n            order: currentNode.order,\n            lane: null,\n            isForward: true,\n            node: currentNodeIndex\n          });\n          addToAssignment(\n            currentNode.order,\n            currentNodeIndex,\n            trackNo,\n            segmentNumber,\n            prevSegmentPerOrderPerTrack\n          );\n          segmentNumber += 1;\n        } else {\n          // backward at current node\n          track.path.push({\n            order: currentNode.order,\n            lane: null,\n            isForward: false,\n            node: currentNodeIndex\n          });\n          addToAssignment(\n            currentNode.order,\n            currentNodeIndex,\n            trackNo,\n            segmentNumber,\n            prevSegmentPerOrderPerTrack\n          );\n          segmentNumber += 1;\n        }\n      } else {\n        if (currentNodeIsForward !== previousNodeIsForward) {\n          track.path.push({\n            order: currentNode.order,\n            lane: null,\n            isForward: currentNodeIsForward,\n            node: currentNodeIndex\n          });\n          addToAssignment(\n            currentNode.order,\n            currentNodeIndex,\n            trackNo,\n            segmentNumber,\n            prevSegmentPerOrderPerTrack\n          );\n          segmentNumber += 1;\n        } else {\n          track.path.push({\n            order: currentNode.order,\n            lane: null,\n            isForward: !currentNodeIsForward,\n            node: null\n          });\n          addToAssignment(\n            currentNode.order,\n            null,\n            trackNo,\n            segmentNumber,\n            prevSegmentPerOrderPerTrack\n          );\n          segmentNumber += 1;\n          track.path.push({\n            order: currentNode.order,\n            lane: null,\n            isForward: currentNodeIsForward,\n            node: currentNodeIndex\n          });\n          addToAssignment(\n            currentNode.order,\n            currentNodeIndex,\n            trackNo,\n            segmentNumber,\n            prevSegmentPerOrderPerTrack\n          );\n          segmentNumber += 1;\n        }\n      }\n    }\n  });\n\n  for (let i = 0; i <= maxOrder; i += 1) {\n    generateSingleLaneAssignment(assignments[i], i); // this is where the lanes get assigned\n  }\n}\n\nfunction addToAssignment(\n  order,\n  nodeIndex,\n  trackNo,\n  segmentID,\n  prevSegmentPerOrderPerTrack\n) {\n  const compareToFromSame = prevSegmentPerOrderPerTrack[order][trackNo];\n\n  if (nodeIndex === null) {\n    assignments[order].push({\n      type: 'single',\n      node: null,\n      tracks: [{ trackID: trackNo, segmentID, compareToFromSame }]\n    });\n    prevSegmentPerOrderPerTrack[order][trackNo] =\n      assignments[order][assignments[order].length - 1].tracks[0];\n  } else {\n    for (let i = 0; i < assignments[order].length; i += 1) {\n      if (assignments[order][i].node === nodeIndex) {\n        // add to existing node in assignment\n        assignments[order][i].type = 'multiple';\n        assignments[order][i].tracks.push({\n          trackID: trackNo,\n          segmentID,\n          compareToFromSame\n        });\n        prevSegmentPerOrderPerTrack[order][trackNo] =\n          assignments[order][i].tracks[assignments[order][i].tracks.length - 1];\n        return;\n      }\n    }\n    // create new node in assignment\n    assignments[order].push({\n      type: 'single',\n      node: nodeIndex,\n      tracks: [{ trackID: trackNo, segmentID, compareToFromSame }]\n    });\n    prevSegmentPerOrderPerTrack[order][trackNo] =\n      assignments[order][assignments[order].length - 1].tracks[0];\n  }\n}\n\n// looks at assignment and sets idealY and idealLane by looking at where the tracks come from\nfunction getIdealLanesAndCoords(assignment, order) {\n  let index;\n\n  assignment.forEach(node => {\n    node.idealLane = 0;\n    node.tracks.forEach(track => {\n      if (track.segmentID === 0) {\n        track.idealLane = track.trackID;\n        track.idealY = null;\n      } else {\n        if (\n          tracks[track.trackID].path[track.segmentID - 1].order ===\n          order - 1\n        ) {\n          track.idealLane =\n            tracks[track.trackID].path[track.segmentID - 1].lane;\n          track.idealY = tracks[track.trackID].path[track.segmentID - 1].y;\n        } else if (\n          track.segmentID < tracks[track.trackID].path.length - 1 &&\n          tracks[track.trackID].path[track.segmentID + 1].order === order - 1\n        ) {\n          track.idealLane =\n            tracks[track.trackID].path[track.segmentID + 1].lane;\n          track.idealY = tracks[track.trackID].path[track.segmentID + 1].y;\n        } else {\n          index = track.segmentID - 1;\n          while (\n            index >= 0 &&\n            tracks[track.trackID].path[index].order !== order - 1\n          ) {\n            index -= 1;\n          }\n          if (index < 0) {\n            track.idealLane = track.trackID;\n            track.idealY = null;\n          } else {\n            track.idealLane = tracks[track.trackID].path[index].lane;\n            track.idealY = tracks[track.trackID].path[index].y;\n          }\n        }\n      }\n      node.idealLane += track.idealLane;\n    });\n    node.idealLane /= node.tracks.length;\n  });\n}\n\n// assigns the optimal lanes for a single horizontal position (=order)\n// first an ideal lane is calculated for each track (which is ~ the lane of its predecessor)\n// then the nodes are sorted by their average ideal lane\n// and the whole construct is then moved up or down if necessary\nfunction generateSingleLaneAssignment(assignment, order) {\n  let currentLane = 0;\n  const potentialAdjustmentValues = new Set();\n  let currentY = 20;\n  let prevNameIsNull = false;\n  let prevTrack = -1;\n\n  getIdealLanesAndCoords(assignment, order);\n  assignment.sort(compareByIdealLane);\n\n  assignment.forEach(node => {\n    if (node.node !== null) {\n      nodes[node.node].topLane = currentLane;\n      if (prevNameIsNull) currentY -= 10;\n      nodes[node.node].y = currentY;\n      nodes[node.node].contentHeight = 0;\n      prevNameIsNull = false;\n    } else {\n      if (prevNameIsNull) currentY -= 25;\n      else if (currentY > 20) currentY -= 10;\n      prevNameIsNull = true;\n    }\n\n    node.tracks.sort(compareByIdealLane);\n    node.tracks.forEach(track => {\n      track.lane = currentLane;\n      if (track.trackID === prevTrack && node.node === null && prevNameIsNull) {\n        currentY += 10;\n      }\n      tracks[track.trackID].path[track.segmentID].lane = currentLane;\n      tracks[track.trackID].path[track.segmentID].y = currentY;\n      if (track.idealY !== null) {\n        potentialAdjustmentValues.add(track.idealY - currentY);\n      }\n      currentLane += 1;\n      currentY += tracks[track.trackID].width;\n      if (node.node !== null) {\n        nodes[node.node].contentHeight += tracks[track.trackID].width;\n      }\n      prevTrack = track.trackID;\n    });\n    currentY += 25;\n  });\n\n  adjustVertically(assignment, potentialAdjustmentValues);\n}\n\n// moves all tracks at a single horizontal location (=order) up/down to minimize lane changes\nfunction adjustVertically(assignment, potentialAdjustmentValues) {\n  let verticalAdjustment = 0;\n  let minAdjustmentCost = Number.MAX_SAFE_INTEGER;\n\n  potentialAdjustmentValues.forEach(moveBy => {\n    if (getVerticalAdjustmentCost(assignment, moveBy) < minAdjustmentCost) {\n      minAdjustmentCost = getVerticalAdjustmentCost(assignment, moveBy);\n      verticalAdjustment = moveBy;\n    }\n  });\n\n  assignment.forEach(node => {\n    if (node.node !== null) {\n      nodes[node.node].y += verticalAdjustment;\n    }\n    node.tracks.forEach(track => {\n      tracks[track.trackID].path[track.segmentID].y += verticalAdjustment;\n    });\n  });\n}\n\nfunction adjustVertically3(node, adjustBy) {\n  if (node.hasOwnProperty('order')) {\n    assignments[node.order].forEach(assignmentNode => {\n      if (assignmentNode.node !== null) {\n        const aNode = nodes[assignmentNode.node];\n        if (aNode !== node && aNode.y > node.y) {\n          aNode.y += adjustBy;\n          assignmentNode.tracks.forEach(track => {\n            tracks[track.trackID].path[track.segmentID].y += adjustBy;\n          });\n        }\n      } else {\n        // track-segment not within a node\n        assignmentNode.tracks.forEach(track => {\n          if (tracks[track.trackID].path[track.segmentID].y >= node.y) {\n            tracks[track.trackID].path[track.segmentID].y += adjustBy;\n          }\n        });\n      }\n    });\n    if (nodesPerOrder[node.order].length > 0) {\n      nodesPerOrder[node.order].forEach(nodeIndex => {\n        if (nodes[nodeIndex] !== node && nodes[nodeIndex].y > node.y) {\n          nodes[nodeIndex].y += adjustBy;\n        }\n      });\n    }\n  }\n}\n\n// calculates cost of vertical adjustment as vertical distance * width of track\nfunction getVerticalAdjustmentCost(assignment, moveBy) {\n  let result = 0;\n  assignment.forEach(node => {\n    node.tracks.forEach(track => {\n      if (track.idealY !== null && tracks[track.trackID].type !== 'read') {\n        result +=\n          Math.abs(\n            track.idealY -\n              moveBy -\n              tracks[track.trackID].path[track.segmentID].y\n          ) * tracks[track.trackID].width;\n      }\n    });\n  });\n  return result;\n}\n\nfunction compareByIdealLane(a, b) {\n  if (a.hasOwnProperty('idealLane')) {\n    if (b.hasOwnProperty('idealLane')) {\n      if (a.idealLane < b.idealLane) return -1;\n      else if (a.idealLane > b.idealLane) return 1;\n      return 0;\n    }\n    return -1;\n  }\n  if (b.hasOwnProperty('idealLane')) {\n    return 1;\n  }\n  return 0;\n}\n\nfunction compareNodesByOrder(a, b) {\n  if (a === null) {\n    if (b === null) return 0;\n    return -1;\n  }\n  if (b === null) return 1;\n\n  if (a.hasOwnProperty('order')) {\n    if (b.hasOwnProperty('order')) {\n      if (a.order < b.order) return -1;\n      else if (a.order > b.order) return 1;\n      if (a.hasOwnProperty('y') && b.hasOwnProperty('y')) {\n        if (a.y < b.y) return -1;\n        else if (a.y > b.y) return 1;\n      }\n      return 0;\n    }\n    return -1;\n  }\n  if (b.hasOwnProperty('order')) return 1;\n  return 0;\n}\n\nfunction addTrackFeatures() {\n  let nodeStart;\n  let nodeEnd;\n  let feature = {};\n\n  bed.forEach(line => {\n    let i = 0;\n    while (i < numberOfTracks && tracks[i].name !== line.track) i += 1;\n    if (i < numberOfTracks) {\n      nodeStart = 0;\n      tracks[i].path.forEach(node => {\n        if (node.node !== null) {\n          feature = {};\n          if (nodes[node.node].hasOwnProperty('sequenceLength')) {\n            nodeEnd = nodeStart + nodes[node.node].sequenceLength - 1;\n          } else {\n            nodeEnd = nodeStart + nodes[node.node].width - 1;\n          }\n\n          if (nodeStart >= line.start && nodeStart <= line.end) {\n            feature.start = 0;\n          }\n          if (nodeStart < line.start && nodeEnd >= line.start) {\n            feature.start = line.start - nodeStart;\n          }\n          if (nodeEnd <= line.end && nodeEnd >= line.start) {\n            feature.end = nodeEnd - nodeStart;\n            if (nodeEnd < line.end) feature.continue = true;\n          }\n          if (nodeEnd > line.end && nodeStart <= line.end) {\n            feature.end = line.end - nodeStart;\n          }\n          if (feature.hasOwnProperty('start')) {\n            feature.type = line.type;\n            feature.name = line.name;\n            if (!node.hasOwnProperty('features')) node.features = [];\n            node.features.push(feature);\n          }\n          nodeStart = nodeEnd + 1;\n        }\n      });\n    }\n  });\n}\n\nfunction calculateTrackWidth() {\n  // flag: if vg returns freq of 0 for all tracks, we will increase width manually\n  let allAreFour = true;\n\n  tracks.forEach(track => {\n    if (track.hasOwnProperty('freq')) {\n      // custom track width\n      track.width = Math.round((Math.log(track.freq) + 1) * 4);\n    } else {\n      // default track width\n      track.width = 15;\n      if (track.hasOwnProperty('type') && track.type === 'read') {\n        track.width = 4;\n      }\n    }\n    if (track.width !== 4) {\n      allAreFour = false;\n    }\n  });\n\n  if (allAreFour) {\n    tracks.forEach(track => {\n      if (track.hasOwnProperty('freq')) {\n        track.width = 15;\n      }\n    });\n  }\n}\n\nexport function useColorScheme(x) {\n  config.colorScheme = x;\n  svg = d3.select(svgID);\n  const tr = createTubeMap();\n  if (!config.hideLegendFlag) drawLegend(tr);\n}\n\nfunction assignColorSets() {\n  haplotypeColors = getColorSet(config.haplotypeColors);\n  forwardReadColors = getColorSet(config.forwardReadColors);\n  reverseReadColors = getColorSet(config.reverseReadColors);\n  exonColors = getColorSet(config.exonColors);\n}\n\nfunction getColorSet(colorSetName) {\n  switch (colorSetName) {\n    case 'plainColors':\n      return plainColors;\n    case 'reds':\n      return reds;\n    case 'blues':\n      return blues;\n    case 'greys':\n      return greys;\n    case 'lightColors':\n      return lightColors;\n    default:\n      return greys;\n  }\n}\n\nfunction generateTrackColor(track, highlight) {\n  if (typeof highlight === 'undefined') highlight = 'plain';\n  let trackColor;\n  if (track.hasOwnProperty('type') && track.type === 'read') {\n    if (config.colorReadsByMappingQuality) {\n      trackColor = d3.interpolateRdYlGn(\n        Math.min(60, track.mapping_quality) / 60\n      );\n    } else {\n      if (track.hasOwnProperty('is_reverse') && track.is_reverse === true) {\n        trackColor = reverseReadColors[track.id % reverseReadColors.length];\n      } else {\n        trackColor = forwardReadColors[track.id % forwardReadColors.length];\n      }\n    }\n  } else {\n    if (config.showExonsFlag === false || highlight !== 'plain') {\n      trackColor = haplotypeColors[track.id % haplotypeColors.length];\n    } else {\n      trackColor = exonColors[track.id % exonColors.length];\n    }\n  }\n  return trackColor;\n}\n\nfunction getReadXStart(read) {\n  const node = nodes[read.path[0].node];\n  if (read.path[0].isForward) {\n    // read starts in forward direction\n    return getXCoordinateOfBaseWithinNode(node, read.firstNodeOffset);\n  }\n  // read starts in backward direction\n  return getXCoordinateOfBaseWithinNode(\n    node,\n    node.sequenceLength - read.firstNodeOffset\n  );\n}\n\nfunction getReadXEnd(read) {\n  const node = nodes[read.path[read.path.length - 1].node];\n  if (read.path[read.path.length - 1].isForward) {\n    // read ends in forward direction\n    return getXCoordinateOfBaseWithinNode(node, read.finalNodeCoverLength);\n  }\n  // read ends in backward direction\n  return getXCoordinateOfBaseWithinNode(\n    node,\n    node.sequenceLength - read.finalNodeCoverLength\n  );\n}\n\n// returns the x coordinate (in pixels) of (the left side) of the given base\n// position within the given node\nfunction getXCoordinateOfBaseWithinNode(node, base) {\n  if (base > node.sequenceLength) return null; // equality is allowed\n  const nodeLeftX = node.x - 4;\n  const nodeRightX = node.x + node.pixelWidth + 4;\n  return nodeLeftX + (base / node.sequenceLength) * (nodeRightX - nodeLeftX);\n}\n\n// transforms the info in the tracks' path attribute into actual coordinates\n// and saves them in trackRectangles and trackCurves\nfunction generateSVGShapesFromPath() {\n  let xStart;\n  let xEnd;\n  let yStart;\n  let yEnd;\n  let trackColor;\n  let highlight;\n  let dummy;\n  let reversalFlag;\n\n  for (let i = 0; i <= maxOrder; i += 1) {\n    extraLeft.push(0);\n    extraRight.push(0);\n  }\n\n  // generate x coords where each order starts and ends\n  const orderStartX = [];\n  const orderEndX = [];\n  nodes.forEach(node => {\n    if (node.hasOwnProperty('order')) {\n      orderStartX[node.order] = node.x;\n      if (orderEndX[node.order] === undefined) {\n        orderEndX[node.order] = node.x + node.pixelWidth;\n      } else {\n        orderEndX[node.order] = Math.max(\n          orderEndX[node.order],\n          node.x + node.pixelWidth\n        );\n      }\n    }\n  });\n\n  tracks.forEach(track => {\n    highlight = 'plain';\n    trackColor = generateTrackColor(track, highlight);\n\n    // start of path\n    yStart = track.path[0].y;\n    if (track.type !== 'read') {\n      if (track.sequence[0].charAt(0) === '-') {\n        // The track starts with an inversed node\n        xStart = orderEndX[track.path[0].order] + 20;\n      } else {\n        // The track starts with a forward node\n        xStart = orderStartX[track.path[0].order] - 20;\n      }\n    } else {\n      xStart = getReadXStart(track);\n    }\n\n    // middle of path\n    for (let i = 0; i < track.path.length; i += 1) {\n      if (track.path[i].y === yStart) {\n        if (track.path[i].hasOwnProperty('features')) {\n          reversalFlag =\n            i > 0 && track.path[i - 1].order === track.path[i].order;\n          dummy = createFeatureRectangle(\n            track.path[i],\n            orderStartX[track.path[i].order],\n            orderEndX[track.path[i].order],\n            highlight,\n            track,\n            xStart,\n            yStart,\n            trackColor,\n            reversalFlag\n          );\n          highlight = dummy.highlight;\n          xStart = dummy.xStart;\n        }\n      } else {\n        if (track.path[i - 1].isForward) {\n          xEnd = orderEndX[track.path[i - 1].order];\n        } else {\n          xEnd = orderStartX[track.path[i - 1].order];\n        }\n        if (xEnd !== xStart) {\n          trackColor = generateTrackColor(track, highlight);\n          trackRectangles.push({\n            xStart: Math.min(xStart, xEnd),\n            yStart,\n            xEnd: Math.max(xStart, xEnd),\n            yEnd: yStart + track.width - 1,\n            color: trackColor,\n            id: track.id,\n            type: track.type\n          });\n        }\n\n        if (track.path[i].order - 1 === track.path[i - 1].order) {\n          // regular forward connection\n          xStart = xEnd;\n          xEnd = orderStartX[track.path[i].order];\n          yEnd = track.path[i].y;\n          trackColor = generateTrackColor(track, highlight);\n          trackCurves.push({\n            xStart,\n            yStart,\n            xEnd: xEnd + 1,\n            yEnd,\n            width: track.width,\n            color: trackColor,\n            laneChange: Math.abs(track.path[i].lane - track.path[i - 1].lane),\n            id: track.id,\n            type: track.type\n          });\n          xStart = xEnd;\n          yStart = yEnd;\n        } else if (track.path[i].order + 1 === track.path[i - 1].order) {\n          // regular backward connection\n          xStart = xEnd;\n          xEnd = orderEndX[track.path[i].order];\n          yEnd = track.path[i].y;\n          trackColor = generateTrackColor(track, highlight);\n          trackCurves.push({\n            xStart: xStart + 1,\n            yStart,\n            xEnd,\n            yEnd,\n            width: track.width,\n            color: trackColor,\n            laneChange: Math.abs(track.path[i].lane - track.path[i - 1].lane),\n            id: track.id,\n            type: track.type\n          });\n          xStart = xEnd;\n          yStart = yEnd;\n        } else {\n          // change of direction\n          if (track.path[i - 1].isForward) {\n            yEnd = track.path[i].y;\n            generateForwardToReverse(\n              xEnd,\n              yStart,\n              yEnd,\n              track.width,\n              trackColor,\n              track.id,\n              track.path[i].order,\n              track.type\n            );\n            xStart = orderEndX[track.path[i].order];\n            yStart = track.path[i].y;\n          } else {\n            yEnd = track.path[i].y;\n            generateReverseToForward(\n              xEnd,\n              yStart,\n              yEnd,\n              track.width,\n              trackColor,\n              track.id,\n              track.path[i].order,\n              track.type\n            );\n            xStart = orderStartX[track.path[i].order];\n            yStart = track.path[i].y;\n          }\n        }\n\n        if (track.path[i].hasOwnProperty('features')) {\n          reversalFlag = track.path[i - 1].order === track.path[i].order;\n          dummy = createFeatureRectangle(\n            track.path[i],\n            orderStartX[track.path[i].order],\n            orderEndX[track.path[i].order],\n            highlight,\n            track,\n            xStart,\n            yStart,\n            trackColor,\n            reversalFlag\n          );\n          highlight = dummy.highlight;\n          xStart = dummy.xStart;\n        }\n      }\n    }\n\n    // ending edges\n    if (track.type !== 'read') {\n      if (!track.path[track.path.length - 1].isForward) {\n        // The track ends with an inversed node\n        xEnd = orderStartX[track.path[track.path.length - 1].order] - 20;\n      } else {\n        // The track ends with a forward node\n        xEnd = orderEndX[track.path[track.path.length - 1].order] + 20;\n      }\n    } else {\n      xEnd = getReadXEnd(track);\n    }\n    trackRectangles.push({\n      xStart: Math.min(xStart, xEnd),\n      yStart,\n      xEnd: Math.max(xStart, xEnd),\n      yEnd: yStart + track.width - 1,\n      color: trackColor,\n      id: track.id,\n      type: track.type\n    });\n  });\n}\n\nfunction createFeatureRectangle(\n  node,\n  nodeXStart,\n  nodeXEnd,\n  highlight,\n  track,\n  rectXStart,\n  yStart,\n  trackColor,\n  reversalFlag\n) {\n  let nodeWidth;\n  let currentHighlight = highlight;\n  let c;\n  let co;\n  let featureXStart;\n  let featureXEnd;\n\n  nodeXStart -= 8;\n  nodeXEnd += 8;\n  if (nodes[node.node].hasOwnProperty('sequenceLength')) {\n    nodeWidth = nodes[node.node].sequenceLength;\n  } else {\n    nodeWidth = nodes[node.node].width;\n  }\n\n  node.features.sort((a, b) => a.start - b.start);\n  node.features.forEach(feature => {\n    if (currentHighlight !== feature.type) {\n      // finish incoming rectangle\n      c = generateTrackColor(track, currentHighlight);\n      if (node.isForward === true) {\n        featureXStart =\n          nodeXStart +\n          Math.round((feature.start * (nodeXEnd - nodeXStart + 1)) / nodeWidth);\n\n        // overwrite narrow post-inversion rectangle if highlight starts near beginning of node\n        if (reversalFlag && featureXStart < nodeXStart + 8) {\n          featureXEnd =\n            nodeXStart +\n            Math.round(\n              ((feature.end + 1) * (nodeXEnd - nodeXStart + 1)) / nodeWidth\n            ) -\n            1;\n          co = generateTrackColor(track, feature.type);\n          trackRectanglesStep3.push({\n            xStart: featureXStart,\n            yStart,\n            xEnd: featureXEnd,\n            yEnd: yStart + track.width - 1,\n            color: co,\n            id: track.id,\n            type: track.type\n          });\n        }\n\n        if (featureXStart > rectXStart + 1) {\n          trackRectanglesStep3.push({\n            xStart: rectXStart,\n            yStart,\n            xEnd: featureXStart - 1,\n            yEnd: yStart + track.width - 1,\n            color: c,\n            id: track.id,\n            type: track.type\n          });\n        }\n      } else {\n        featureXStart =\n          nodeXEnd -\n          Math.round((feature.start * (nodeXEnd - nodeXStart + 1)) / nodeWidth);\n\n        // overwrite narrow post-inversion rectangle if highlight starts near beginning of node\n        if (reversalFlag && featureXStart > nodeXEnd - 8) {\n          featureXEnd =\n            nodeXEnd -\n            Math.round(\n              ((feature.end + 1) * (nodeXEnd - nodeXStart + 1)) / nodeWidth\n            ) -\n            1;\n          co = generateTrackColor(track, feature.type);\n          trackRectanglesStep3.push({\n            xStart: featureXEnd,\n            yStart,\n            xEnd: featureXStart,\n            yEnd: yStart + track.width - 1,\n            color: co,\n            id: track.id,\n            type: track.type\n          });\n        }\n\n        if (rectXStart > featureXStart + 1) {\n          trackRectanglesStep3.push({\n            xStart: featureXStart + 1,\n            yStart,\n            xEnd: rectXStart,\n            yEnd: yStart + track.width - 1,\n            color: c,\n            id: track.id,\n            type: track.type\n          });\n        }\n      }\n      rectXStart = featureXStart;\n      currentHighlight = feature.type;\n    }\n    if (feature.end < nodeWidth - 1 || !feature.hasOwnProperty('continue')) {\n      // finish internal rectangle\n      c = generateTrackColor(track, currentHighlight);\n      if (node.isForward === true) {\n        featureXEnd =\n          nodeXStart +\n          Math.round(\n            ((feature.end + 1) * (nodeXEnd - nodeXStart + 1)) / nodeWidth\n          ) -\n          1;\n        trackRectanglesStep3.push({\n          xStart: rectXStart,\n          yStart,\n          xEnd: featureXEnd,\n          yEnd: yStart + track.width - 1,\n          color: c,\n          id: track.id,\n          type: track.type\n        });\n      } else {\n        featureXEnd =\n          nodeXEnd -\n          Math.round(\n            ((feature.end + 1) * (nodeXEnd - nodeXStart + 1)) / nodeWidth\n          ) -\n          1;\n        trackRectanglesStep3.push({\n          xStart: featureXEnd,\n          yStart,\n          xEnd: rectXStart,\n          yEnd: yStart + track.width - 1,\n          color: c,\n          id: track.id,\n          type: track.type\n        });\n      }\n      rectXStart = featureXEnd + 1;\n      currentHighlight = 'plain';\n    }\n  });\n  return { xStart: rectXStart, highlight: currentHighlight };\n}\n\nfunction generateForwardToReverse(\n  x,\n  yStart,\n  yEnd,\n  trackWidth,\n  trackColor,\n  trackID,\n  order,\n  type\n) {\n  x += 10 * extraRight[order];\n  const yTop = Math.min(yStart, yEnd);\n  const yBottom = Math.max(yStart, yEnd);\n  const radius = 7;\n\n  trackVerticalRectangles.push({\n    // elongate incoming rectangle a bit to the right\n    xStart: x - 10 * extraRight[order],\n    yStart,\n    xEnd: x + 5,\n    yEnd: yStart + trackWidth - 1,\n    color: trackColor,\n    id: trackID,\n    type\n  });\n  trackVerticalRectangles.push({\n    // vertical rectangle\n    xStart: x + 5 + radius,\n    yStart: yTop + trackWidth + radius - 1,\n    xEnd: x + 5 + radius + Math.min(7, trackWidth) - 1,\n    yEnd: yBottom - radius + 1,\n    color: trackColor,\n    id: trackID,\n    type\n  });\n  trackVerticalRectangles.push({\n    xStart: x - 10 * extraRight[order],\n    yStart: yEnd,\n    xEnd: x + 5,\n    yEnd: yEnd + trackWidth - 1,\n    color: trackColor,\n    id: trackID,\n    type\n  }); // elongate outgoing rectangle a bit to the right\n\n  let d = `M ${x + 5} ${yBottom}`;\n  d += ` Q ${x + 5 + radius} ${yBottom} ${x + 5 + radius} ${yBottom - radius}`;\n  d += ` H ${x + 5 + radius + Math.min(7, trackWidth)}`;\n  d += ` Q ${x + 5 + radius + Math.min(7, trackWidth)} ${yBottom +\n    trackWidth} ${x + 5} ${yBottom + trackWidth}`;\n  d += ' Z ';\n  trackCorners.push({ path: d, color: trackColor, id: trackID, type });\n\n  d = `M ${x + 5} ${yTop}`;\n  d += ` Q ${x + 5 + radius + Math.min(7, trackWidth)} ${yTop} ${x +\n    5 +\n    radius +\n    Math.min(7, trackWidth)} ${yTop + trackWidth + radius}`;\n  d += ` H ${x + 5 + radius}`;\n  d += ` Q ${x + 5 + radius} ${yTop + trackWidth} ${x + 5} ${yTop +\n    trackWidth}`;\n  d += ' Z ';\n  trackCorners.push({ path: d, color: trackColor, id: trackID, type });\n  extraRight[order] += 1;\n}\n\nfunction generateReverseToForward(\n  x,\n  yStart,\n  yEnd,\n  trackWidth,\n  trackColor,\n  trackID,\n  order,\n  type\n) {\n  const yTop = Math.min(yStart, yEnd);\n  const yBottom = Math.max(yStart, yEnd);\n  const radius = 7;\n  x -= 10 * extraLeft[order];\n\n  trackVerticalRectangles.push({\n    xStart: x - 6,\n    yStart,\n    xEnd: x + 10 * extraLeft[order],\n    yEnd: yStart + trackWidth - 1,\n    color: trackColor,\n    id: trackID,\n    type\n  }); // elongate incoming rectangle a bit to the left\n  trackVerticalRectangles.push({\n    xStart: x - 5 - radius - Math.min(7, trackWidth),\n    yStart: yTop + trackWidth + radius - 1,\n    xEnd: x - 5 - radius - 1,\n    yEnd: yBottom - radius + 1,\n    color: trackColor,\n    id: trackID,\n    type\n  }); // vertical rectangle\n  trackVerticalRectangles.push({\n    xStart: x - 6,\n    yStart: yEnd,\n    xEnd: x + 10 * extraLeft[order],\n    yEnd: yEnd + trackWidth - 1,\n    color: trackColor,\n    id: trackID,\n    type\n  }); // elongate outgoing rectangle a bit to the left\n\n  // Path for bottom 90 degree bend\n  let d = `M ${x - 5} ${yBottom}`;\n  d += ` Q ${x - 5 - radius} ${yBottom} ${x - 5 - radius} ${yBottom - radius}`;\n  d += ` H ${x - 5 - radius - Math.min(7, trackWidth)}`;\n  d += ` Q ${x - 5 - radius - Math.min(7, trackWidth)} ${yBottom +\n    trackWidth} ${x - 5} ${yBottom + trackWidth}`;\n  d += ' Z ';\n  trackCorners.push({ path: d, color: trackColor, id: trackID, type });\n\n  // Path for top 90 degree bend\n  d = `M ${x - 5} ${yTop}`;\n  d += ` Q ${x - 5 - radius - Math.min(7, trackWidth)} ${yTop} ${x -\n    5 -\n    radius -\n    Math.min(7, trackWidth)} ${yTop + trackWidth + radius}`;\n  d += ` H ${x - 5 - radius}`;\n  d += ` Q ${x - 5 - radius} ${yTop + trackWidth} ${x - 5} ${yTop +\n    trackWidth}`;\n  d += ' Z ';\n  trackCorners.push({ path: d, color: trackColor, id: trackID, type });\n  extraLeft[order] += 1;\n}\n\n// to avoid problems with wrong overlapping of tracks, draw them in order of their color\nfunction drawReversalsByColor(corners, rectangles, type) {\n  if (typeof type === 'undefined') type = 'haplo';\n  const co = new Set();\n  rectangles.forEach(rect => {\n    co.add(rect.color);\n  });\n  co.forEach(c => {\n    drawTrackRectangles(\n      rectangles.filter(filterObjectByAttribute('color', c)),\n      type\n    );\n    drawTrackCorners(corners.filter(filterObjectByAttribute('color', c)), type);\n  });\n}\n\n// draws nodes by building svg-path for border and filling it with transparent white\nfunction drawNodes(dNodes) {\n  let x;\n  let y;\n\n  dNodes.forEach(node => {\n    // top left arc\n    node.d = `M ${node.x - 9} ${node.y} Q ${node.x - 9} ${node.y - 9} ${\n      node.x\n    } ${node.y - 9}`;\n    x = node.x;\n    y = node.y - 9;\n\n    // top straight\n    if (node.width > 1) {\n      x += node.pixelWidth;\n      node.d += ` L ${x} ${y}`;\n    }\n\n    // top right arc\n    node.d += ` Q ${x + 9} ${y} ${x + 9} ${y + 9}`;\n    x += 9;\n    y += 9;\n\n    // right straight\n    if (node.contentHeight > 0) {\n      y += node.contentHeight - 0;\n      node.d += ` L ${x} ${y}`;\n    }\n\n    // bottom right arc\n    node.d += ` Q ${x} ${y + 9} ${x - 9} ${y + 9}`;\n    x -= 9;\n    y += 9;\n\n    // bottom straight\n    if (node.width > 1) {\n      x -= node.pixelWidth;\n      node.d += ` L ${x} ${y}`;\n    }\n\n    // bottom left arc\n    node.d += ` Q ${x - 9} ${y} ${x - 9} ${y - 9}`;\n    x -= 9;\n    y -= 9;\n\n    // left straight\n    if (node.contentHeight > 0) {\n      y -= node.contentHeight - 0;\n      node.d += ` L ${x} ${y}`;\n    }\n  });\n\n  svg\n    .selectAll('.node')\n    .data(dNodes)\n    .enter()\n    .append('path')\n    .attr('id', d => d.name)\n    .attr('d', d => d.d)\n    .on('mouseover', nodeMouseOver)\n    .on('mouseout', nodeMouseOut)\n    .on('dblclick', nodeDoubleClick)\n    .style('fill', config.transparentNodesFlag ? 'none' : '#fff')\n    .style('fill-opacity', config.showExonsFlag ? '0.4' : '0.6')\n    .style('stroke', 'black')\n    .style('stroke-width', '2px')\n    .append('svg:title')\n    .text(d => getPopUpText(d));\n}\n\nfunction getPopUpText(node) {\n  return (\n    `Node ID: ${node.name}\\n` +\n    `Node Length: ${node.sequenceLength} bases\\n` +\n    `Haplotypes: ${node.degree}\\n` +\n    `Aligned Reads: ${node.incomingReads.length +\n      node.internalReads.length +\n      node.outgoingReads.length}`\n  );\n}\n\n// draw seqence labels for nodes\nfunction drawLabels(dNodes) {\n  if (config.nodeWidthOption === 0) {\n    svg\n      .selectAll('text')\n      .data(dNodes)\n      .enter()\n      .append('text')\n      .attr('x', d => d.x - 4)\n      .attr('y', d => d.y + 4)\n      .text(d => d.seq)\n      .attr('font-family', 'Courier, \"Lucida Console\", monospace')\n      .attr('font-size', '14px')\n      .attr('fill', 'black')\n      .style('pointer-events', 'none');\n  }\n}\n\nfunction drawRuler() {\n  let rulerTrackIndex = 0;\n  while (tracks[rulerTrackIndex].name !== trackForRuler) rulerTrackIndex += 1;\n  const rulerTrack = tracks[rulerTrackIndex];\n\n  // draw horizontal line\n  svg\n    .append('line')\n    .attr('x1', 0)\n    .attr('y1', minYCoordinate - 10)\n    .attr('x2', maxXCoordinate)\n    .attr('y2', minYCoordinate - 10)\n    .attr('stroke-width', 1)\n    .attr('stroke', 'black');\n\n  let markingInterval = 100;\n  if (config.nodeWidthOption === 0) markingInterval = 20;\n\n  let indexOfFirstBaseInNode = rulerTrack.indexOfFirstBase;\n  let atLeastOneMarkingDrawn = false;\n  let xCoordOfPreviousMarking = -100;\n\n  // draw ruler marking at the left end of chart for compressed charts\n  // (this marking is on purpose not at a 0 % 100 position)\n  if (config.nodeWidthOption !== 0) {\n    const firstNode = nodes[rulerTrack.indexSequence[0]];\n    xCoordOfPreviousMarking = getXCoordinateOfBaseWithinNode(firstNode, 0);\n    drawRulerMarking(indexOfFirstBaseInNode, xCoordOfPreviousMarking);\n    atLeastOneMarkingDrawn = true;\n  }\n\n  rulerTrack.indexSequence.forEach(nodeIndex => {\n    const currentNode = nodes[nodeIndex];\n    let nextMarking =\n      Math.ceil(indexOfFirstBaseInNode / markingInterval) * markingInterval;\n    while (nextMarking < indexOfFirstBaseInNode + currentNode.sequenceLength) {\n      const xCoordOfMarking = getXCoordinateOfBaseWithinNode(\n        currentNode,\n        nextMarking - indexOfFirstBaseInNode\n      );\n      if (xCoordOfPreviousMarking + 80 <= xCoordOfMarking) {\n        drawRulerMarking(nextMarking, xCoordOfMarking);\n        atLeastOneMarkingDrawn = true;\n        xCoordOfPreviousMarking = xCoordOfMarking;\n      }\n      nextMarking += markingInterval;\n    }\n    indexOfFirstBaseInNode += nodes[nodeIndex].sequenceLength;\n  });\n\n  // if no markings drawn, draw one at the very beginning\n  if (!atLeastOneMarkingDrawn) {\n    drawRulerMarking(\n      rulerTrack.indexOfFirstBase,\n      nodes[rulerTrack.indexSequence[0]].x - 4\n    );\n  }\n}\n\nfunction drawRulerMarking(sequencePosition, xCoordinate) {\n  svg\n    .append('text')\n    .attr('x', xCoordinate)\n    .attr('y', minYCoordinate - 13)\n    .text(`|${sequencePosition}`)\n    .attr('font-family', 'Courier, \"Lucida Console\", monospace')\n    .attr('font-size', '12px')\n    .attr('fill', 'black')\n    .style('pointer-events', 'none');\n}\n\nfunction filterObjectByAttribute(attribute, value) {\n  return item => item[attribute] === value;\n}\n\nfunction drawTrackRectangles(rectangles, type) {\n  if (typeof type === 'undefined') type = 'haplo';\n  rectangles = rectangles.filter(filterObjectByAttribute('type', type));\n\n  svg\n    .selectAll('trackRectangles')\n    .data(rectangles)\n    .enter()\n    .append('rect')\n    .attr('x', d => d.xStart)\n    .attr('y', d => d.yStart)\n    .attr('width', d => d.xEnd - d.xStart + 1)\n    .attr('height', d => d.yEnd - d.yStart + 1)\n    .style('fill', d => d.color)\n    .attr('trackID', d => d.id)\n    .attr('class', d => `track${d.id}`)\n    .attr('color', d => d.color)\n    .on('mouseover', trackMouseOver)\n    .on('mouseout', trackMouseOut)\n    .on('dblclick', trackDoubleClick);\n}\n\nfunction compareCurvesByLineChanges(a, b) {\n  if (a[6] < b[6]) return -1;\n  else if (a[6] > b[6]) return 1;\n  return 0;\n}\n\nfunction defineSVGPatterns() {\n  const defs = svg.append('defs');\n  let pattern = defs.append('pattern').attrs({\n    id: 'patternA',\n    width: '7',\n    height: '7',\n    patternUnits: 'userSpaceOnUse',\n    patternTransform: 'rotate(45)'\n  });\n\n  pattern\n    .append('rect')\n    .attrs({ x: '0', y: '0', width: '7', height: '7', fill: '#FFFFFF' });\n  pattern\n    .append('rect')\n    .attrs({ x: '0', y: '0', width: '3', height: '3', fill: '#505050' });\n  pattern\n    .append('rect')\n    .attrs({ x: '0', y: '4', width: '3', height: '3', fill: '#505050' });\n  pattern\n    .append('rect')\n    .attrs({ x: '4', y: '0', width: '3', height: '3', fill: '#505050' });\n  pattern\n    .append('rect')\n    .attrs({ x: '4', y: '4', width: '3', height: '3', fill: '#505050' });\n\n  pattern = defs.append('pattern').attrs({\n    id: 'patternB',\n    width: '8',\n    height: '8',\n    patternUnits: 'userSpaceOnUse',\n    patternTransform: 'rotate(45)'\n  });\n  pattern\n    .append('rect')\n    .attrs({ x: '0', y: '0', width: '8', height: '8', fill: '#FFFFFF' });\n  pattern\n    .append('rect')\n    .attrs({ x: '0', y: '0', width: '3', height: '3', fill: '#1f77b4' });\n  pattern\n    .append('rect')\n    .attrs({ x: '0', y: '5', width: '3', height: '3', fill: '#1f77b4' });\n  pattern\n    .append('rect')\n    .attrs({ x: '5', y: '0', width: '3', height: '3', fill: '#1f77b4' });\n  pattern\n    .append('rect')\n    .attrs({ x: '5', y: '5', width: '3', height: '3', fill: '#1f77b4' });\n\n  pattern = defs.append('pattern').attrs({\n    id: 'plaid0',\n    width: '6',\n    height: '6',\n    patternUnits: 'userSpaceOnUse',\n    patternTransform: 'rotate(45)'\n  });\n  pattern\n    .append('rect')\n    .attrs({ x: '0', y: '0', width: '6', height: '6', fill: '#FFFFFF' });\n  pattern\n    .append('rect')\n    .attrs({ x: '0', y: '0', width: '2', height: '2', fill: '#1f77b4' });\n  pattern\n    .append('rect')\n    .attrs({ x: '0', y: '4', width: '2', height: '2', fill: '#1f77b4' });\n  pattern\n    .append('rect')\n    .attrs({ x: '4', y: '0', width: '2', height: '2', fill: '#1f77b4' });\n  pattern\n    .append('rect')\n    .attrs({ x: '4', y: '4', width: '2', height: '2', fill: '#1f77b4' });\n\n  pattern = defs.append('pattern').attrs({\n    id: 'plaid1',\n    width: '6',\n    height: '6',\n    patternUnits: 'userSpaceOnUse',\n    patternTransform: 'rotate(45)'\n  });\n  pattern\n    .append('rect')\n    .attrs({ x: '0', y: '0', width: '6', height: '6', fill: '#FFFFFF' });\n  pattern\n    .append('rect')\n    .attrs({ x: '0', y: '0', width: '2', height: '2', fill: '#ff7f0e' });\n  pattern\n    .append('rect')\n    .attrs({ x: '0', y: '4', width: '2', height: '2', fill: '#ff7f0e' });\n  pattern\n    .append('rect')\n    .attrs({ x: '4', y: '0', width: '2', height: '2', fill: '#ff7f0e' });\n  pattern\n    .append('rect')\n    .attrs({ x: '4', y: '4', width: '2', height: '2', fill: '#ff7f0e' });\n\n  pattern = defs.append('pattern').attrs({\n    id: 'plaid2',\n    width: '6',\n    height: '6',\n    patternUnits: 'userSpaceOnUse',\n    patternTransform: 'rotate(45)'\n  });\n  pattern\n    .append('rect')\n    .attrs({ x: '0', y: '0', width: '6', height: '6', fill: '#FFFFFF' });\n  pattern\n    .append('rect')\n    .attrs({ x: '0', y: '0', width: '2', height: '2', fill: '#2ca02c' });\n  pattern\n    .append('rect')\n    .attrs({ x: '0', y: '4', width: '2', height: '2', fill: '#2ca02c' });\n  pattern\n    .append('rect')\n    .attrs({ x: '4', y: '0', width: '2', height: '2', fill: '#2ca02c' });\n  pattern\n    .append('rect')\n    .attrs({ x: '4', y: '4', width: '2', height: '2', fill: '#2ca02c' });\n\n  pattern = defs.append('pattern').attrs({\n    id: 'plaid3',\n    width: '6',\n    height: '6',\n    patternUnits: 'userSpaceOnUse',\n    patternTransform: 'rotate(45)'\n  });\n  pattern\n    .append('rect')\n    .attrs({ x: '0', y: '0', width: '6', height: '6', fill: '#FFFFFF' });\n  pattern\n    .append('rect')\n    .attrs({ x: '0', y: '0', width: '2', height: '2', fill: '#d62728' });\n  pattern\n    .append('rect')\n    .attrs({ x: '0', y: '4', width: '2', height: '2', fill: '#d62728' });\n  pattern\n    .append('rect')\n    .attrs({ x: '4', y: '0', width: '2', height: '2', fill: '#d62728' });\n  pattern\n    .append('rect')\n    .attrs({ x: '4', y: '4', width: '2', height: '2', fill: '#d62728' });\n\n  pattern = defs.append('pattern').attrs({\n    id: 'plaid4',\n    width: '6',\n    height: '6',\n    patternUnits: 'userSpaceOnUse',\n    patternTransform: 'rotate(45)'\n  });\n  pattern\n    .append('rect')\n    .attrs({ x: '0', y: '0', width: '6', height: '6', fill: '#FFFFFF' });\n  pattern\n    .append('rect')\n    .attrs({ x: '0', y: '0', width: '2', height: '2', fill: '#9467bd' });\n  pattern\n    .append('rect')\n    .attrs({ x: '0', y: '4', width: '2', height: '2', fill: '#9467bd' });\n  pattern\n    .append('rect')\n    .attrs({ x: '4', y: '0', width: '2', height: '2', fill: '#9467bd' });\n  pattern\n    .append('rect')\n    .attrs({ x: '4', y: '4', width: '2', height: '2', fill: '#9467bd' });\n\n  pattern = defs.append('pattern').attrs({\n    id: 'plaid5',\n    width: '6',\n    height: '6',\n    patternUnits: 'userSpaceOnUse',\n    patternTransform: 'rotate(45)'\n  });\n  pattern\n    .append('rect')\n    .attrs({ x: '0', y: '0', width: '6', height: '6', fill: '#FFFFFF' });\n  pattern\n    .append('rect')\n    .attrs({ x: '0', y: '0', width: '2', height: '2', fill: '#8c564b' });\n  pattern\n    .append('rect')\n    .attrs({ x: '0', y: '4', width: '2', height: '2', fill: '#8c564b' });\n  pattern\n    .append('rect')\n    .attrs({ x: '4', y: '0', width: '2', height: '2', fill: '#8c564b' });\n  pattern\n    .append('rect')\n    .attrs({ x: '4', y: '4', width: '2', height: '2', fill: '#8c564b' });\n}\n\nfunction drawTrackCurves(type) {\n  if (typeof type === 'undefined') type = 'haplo';\n  const myTrackCurves = trackCurves.filter(\n    filterObjectByAttribute('type', type)\n  );\n\n  myTrackCurves.sort(compareCurvesByLineChanges);\n\n  myTrackCurves.forEach(curve => {\n    const xMiddle = (curve.xStart + curve.xEnd) / 2;\n    let d = `M ${curve.xStart} ${curve.yStart}`;\n    d += ` C ${xMiddle} ${curve.yStart} ${xMiddle} ${curve.yEnd} ${\n      curve.xEnd\n    } ${curve.yEnd}`;\n    d += ` V ${curve.yEnd + curve.width}`;\n    d += ` C ${xMiddle} ${curve.yEnd + curve.width} ${xMiddle} ${curve.yStart +\n      curve.width} ${curve.xStart} ${curve.yStart + curve.width}`;\n    d += ' Z';\n    curve.path = d;\n  });\n\n  svg\n    .selectAll('trackCurves')\n    .data(trackCurves)\n    .enter()\n    .append('path')\n    .attr('d', d => d.path)\n    .style('fill', d => d.color)\n    .attr('trackID', d => d.id)\n    .attr('class', d => `track${d.id}`)\n    .attr('color', d => d.color)\n    .on('mouseover', trackMouseOver)\n    .on('mouseout', trackMouseOut)\n    .on('dblclick', trackDoubleClick);\n}\n\nfunction drawTrackCorners(corners, type) {\n  if (typeof type === 'undefined') type = 'haplo';\n  corners = corners.filter(filterObjectByAttribute('type', type));\n\n  svg\n    .selectAll('trackCorners')\n    .data(corners)\n    .enter()\n    .append('path')\n    .attr('d', d => d.path)\n    .style('fill', d => d.color)\n    .attr('trackID', d => d.id)\n    .attr('class', d => `track${d.id}`)\n    .attr('color', d => d.color)\n    .on('mouseover', trackMouseOver)\n    .on('mouseout', trackMouseOut)\n    .on('dblclick', trackDoubleClick);\n}\n\nfunction drawLegend() {\n  let content =\n    '<table class=\"table-sm table-condensed table-nonfluid\"><thead><tr><th>Color</th><th>Trackname</th><th>Show Track</th></tr></thead>';\n  const listeners = [];\n  for (let i = 0; i < tracks.length; i += 1) {\n    if (tracks[i].type === 'haplo') {\n      content += `<tr><td style=\"text-align:right\"><div class=\"color-box\" style=\"background-color: ${generateTrackColor(\n        tracks[i],\n        'exon'\n      )};\"></div></td>`;\n      if (tracks[i].hasOwnProperty('name')) {\n        content += `<td>${tracks[i].name}</td>`;\n      } else {\n        content += `<td>${tracks[i].id}</td>`;\n      }\n      content += `<td><input type=\"checkbox\" checked=true id=\"showTrack${i}\"></td>`;\n      listeners.push(i);\n    }\n  }\n  content += '</table';\n  // $('#legendDiv').html(content);\n  document.getElementById('legendDiv').innerHTML = content;\n  listeners.forEach(i => {\n    document\n      .getElementById(`showTrack${i}`)\n      .addEventListener('click', () => changeTrackVisibility(i), false);\n  });\n}\n\n// Highlight track on mouseover\nfunction trackMouseOver() {\n  /* jshint validthis: true */\n  const trackID = d3.select(this).attr('trackID');\n  d3.selectAll(`.track${trackID}`).style('fill', 'url(#patternA)');\n}\n\n// Highlight node on mouseover\nfunction nodeMouseOver() {\n  /* jshint validthis: true */\n  d3.select(this).style('stroke-width', '4px');\n}\n\n// Restore original track appearance on mouseout\nfunction trackMouseOut() {\n  /* jshint validthis: true */\n  const trackID = d3.select(this).attr('trackID');\n  d3.selectAll(`.track${trackID}`).each(function clearTrackHighlight() {\n    const c = d3.select(this).attr('color');\n    d3.select(this).style('fill', c);\n  });\n}\n\n// Restore original node appearance on mouseout\nfunction nodeMouseOut() {\n  /* jshint validthis: true */\n  d3.select(this).style('stroke-width', '2px');\n}\n\n// Move clicked track to first position\nfunction trackDoubleClick() {\n  /* jshint validthis: true */\n  const trackID = d3.select(this).attr('trackID');\n  let index = 0;\n  while (\n    index < inputTracks.length &&\n    inputTracks[index].id !== Number(trackID)\n  ) {\n    index += 1;\n  }\n  if (index >= inputTracks.length) return;\n  if (DEBUG) console.log(`moving index: ${index}`);\n  moveTrackToFirstPosition(index);\n  createTubeMap();\n}\n\n// Redraw with current node moved to beginning\nfunction nodeDoubleClick() {\n  /* jshint validthis: true */\n  const nodeID = d3.select(this).attr('id');\n  if (config.clickableNodesFlag) {\n    if (reads && config.showReads) {\n      document.getElementById('hgvmNodeID').value = nodeID;\n      document.getElementById('hgvmPostButton').click();\n    } else {\n      document.getElementById('nodeID').value = nodeID;\n      document.getElementById('postButton').click();\n    }\n  }\n}\n\n// extract info about nodes from vg-json\nexport function vgExtractNodes(vg) {\n  const result = [];\n  vg.node.forEach(node => {\n    result.push({\n      name: `${node.id}`,\n      sequenceLength: node.sequence.length,\n      seq: node.sequence\n    });\n  });\n  return result;\n}\n\n// calculate node widths depending on sequence lengths and chosen calculation method\nfunction generateNodeWidth() {\n  nodes.forEach(node => {\n    if (!node.hasOwnProperty('sequenceLength')) {\n      node.sequenceLength = node.seq.length;\n    }\n  });\n\n  switch (config.nodeWidthOption) {\n    case 1:\n      nodes.forEach(node => {\n        node.width = 1 + Math.log(node.sequenceLength) / Math.log(2);\n        node.pixelWidth = Math.round((node.width - 1) * 8.401);\n      });\n      break;\n    case 2:\n      nodes.forEach(node => {\n        node.width = node.sequenceLength / 100;\n        node.pixelWidth = Math.round((node.width - 1) * 8.401);\n      });\n      break;\n    default:\n      nodes.forEach(node => {\n        node.width = node.sequenceLength;\n\n        // get width of node's text label by writing label, measuring it and removing label\n        svg\n          .append('text')\n          .attr('x', 0)\n          .attr('y', 100)\n          .attr('id', 'dummytext')\n          .text(node.seq.substr(1))\n          .attr('font-family', 'Courier, \"Lucida Console\", monospace')\n          .attr('font-size', '14px')\n          .attr('fill', 'black')\n          .style('pointer-events', 'none');\n        node.pixelWidth = Math.round(\n          document.getElementById('dummytext').getComputedTextLength()\n        );\n        document.getElementById('dummytext').remove();\n        // $('#dummytext').remove();\n      });\n  }\n}\n\n// extract track info from vg-json\nexport function vgExtractTracks(vg) {\n  const result = [];\n  vg.path.forEach((path, index) => {\n    const sequence = [];\n    let isCompletelyReverse = true;\n    path.mapping.forEach(pos => {\n      if (\n        pos.position.hasOwnProperty('is_reverse') &&\n        pos.position.is_reverse === true\n      ) {\n        sequence.push(`-${pos.position.node_id}`);\n      } else {\n        sequence.push(`${pos.position.node_id}`);\n        isCompletelyReverse = false;\n      }\n    });\n    if (isCompletelyReverse) {\n      sequence.reverse();\n      sequence.forEach((node, index2) => {\n        sequence[index2] = node.substr(1);\n      });\n    }\n    const track = {};\n    track.id = index;\n    track.sequence = sequence;\n    if (path.hasOwnProperty('freq')) track.freq = path.freq;\n    if (path.hasOwnProperty('name')) track.name = path.name;\n    if (path.hasOwnProperty('indexOfFirstBase')) {\n      track.indexOfFirstBase = Number(path.indexOfFirstBase);\n    }\n    result.push(track);\n  });\n  return result;\n}\n\nfunction compareReadsByLeftEnd(a, b) {\n  let leftNodeA;\n  let leftNodeB;\n  let leftIndexA;\n  let leftIndexB;\n\n  if (a.sequence[0].charAt(0) === '-') {\n    if (a.sequence[a.sequence.length - 1].charAt(0) === '-') {\n      leftNodeA = a.sequence[a.sequence.length - 1].substr(1);\n      leftIndexA =\n        nodes[nodeMap.get(leftNodeA)].sequenceLength - a.finalNodeCoverLength;\n    } else {\n      leftNodeA = a.sequence[a.sequence.length - 1];\n      leftIndexA = 0;\n    }\n  } else {\n    leftNodeA = a.sequence[0];\n    leftIndexA = a.firstNodeOffset;\n  }\n\n  if (b.sequence[0].charAt(0) === '-') {\n    if (b.sequence[b.sequence.length - 1].charAt(0) === '-') {\n      leftNodeB = b.sequence[b.sequence.length - 1].substr(1);\n      leftIndexB =\n        nodes[nodeMap.get(leftNodeB)].sequenceLength - b.finalNodeCoverLength;\n    } else {\n      leftNodeB = b.sequence[b.sequence.length - 1];\n      leftIndexB = 0;\n    }\n  } else {\n    leftNodeB = b.sequence[0];\n    leftIndexB = b.firstNodeOffset;\n  }\n\n  if (leftNodeA < leftNodeB) return -1;\n  else if (leftNodeA > leftNodeB) return 1;\n  if (leftIndexA < leftIndexB) return -1;\n  else if (leftIndexA > leftIndexB) return 1;\n  return 0;\n}\n\nfunction compareReadsByLeftEnd2(a, b) {\n  // compare by order of first node\n  if (nodes[a.indexSequence[0]].order < nodes[b.indexSequence[0]].order) {\n    return -1;\n  } else if (\n    nodes[a.indexSequence[0]].order > nodes[b.indexSequence[0]].order\n  ) {\n    return 1;\n  }\n\n  // compare by first base within first node\n  if (a.firstNodeOffset < b.firstNodeOffset) return -1;\n  else if (a.firstNodeOffset > b.firstNodeOffset) return 1;\n\n  // compare by order of last node\n  if (\n    nodes[a.indexSequence[a.indexSequence.length - 1]].order <\n    nodes[b.indexSequence[b.indexSequence.length - 1]].order\n  ) {\n    return -1;\n  } else if (\n    nodes[a.indexSequence[a.indexSequence.length - 1]].order >\n    nodes[b.indexSequence[b.indexSequence.length - 1]].order\n  ) {\n    return 1;\n  }\n\n  // compare by last base withing last node\n  if (a.finalNodeCoverLength < b.finalNodeCoverLength) return -1;\n  else if (a.finalNodeCoverLength > b.finalNodeCoverLength) return 1;\n\n  return 0;\n}\n\nexport function vgExtractReads(myNodes, myTracks, myReads) {\n  if (DEBUG) {\n    console.log('Reads:');\n    console.log(myReads);\n  }\n  const extracted = [];\n\n  const nodeNames = [];\n  myNodes.forEach(node => {\n    nodeNames.push(node.name, 10);\n  });\n\n  for (let i = 0; i < myReads.length; i += 1) {\n    const read = myReads[i];\n    const sequence = [];\n    const sequenceNew = [];\n    let firstIndex = -1; // index within mapping of the first node id contained in nodeNames\n    let lastIndex = -1; // index within mapping of the last node id contained in nodeNames\n    read.path.mapping.forEach((pos, j) => {\n      if (nodeNames.indexOf(pos.position.node_id) > -1) {\n        const edit = {};\n        let offset = 0;\n        if (\n          pos.position.hasOwnProperty('is_reverse') &&\n          pos.position.is_reverse === true\n        ) {\n          sequence.push(`-${pos.position.node_id}`);\n          edit.nodeName = `-${pos.position.node_id}`;\n        } else {\n          sequence.push(`${pos.position.node_id}`);\n          edit.nodeName = pos.position.node_id.toString();\n        }\n        if (firstIndex < 0) {\n          firstIndex = j;\n          if (pos.position.hasOwnProperty('offset')) {\n            pos.position.offset = parseInt(pos.position.offset, 10);\n            offset = pos.position.offset;\n          }\n        }\n        lastIndex = j;\n\n        const mismatches = [];\n        let posWithinNode = offset;\n        pos.edit.forEach(element => {\n          if (\n            element.hasOwnProperty('to_length') &&\n            !element.hasOwnProperty('from_length')\n          ) {\n            // insertion\n            mismatches.push({\n              type: 'insertion',\n              pos: posWithinNode,\n              seq: element.sequence\n            });\n          } else if (\n            !element.hasOwnProperty('to_length') &&\n            element.hasOwnProperty('from_length')\n          ) {\n            // deletion\n            mismatches.push({\n              type: 'deletion',\n              pos: posWithinNode,\n              length: element.from_length\n            });\n          } else if (element.hasOwnProperty('sequence')) {\n            // substitution\n            if (element.sequence.length > 1) {\n              if (DEBUG) {\n                console.log(\n                  `found substitution at read ${i}, node ${j} = ${\n                    pos.position.node_id\n                  }, seq = ${element.sequence}`\n                );\n              }\n            }\n            mismatches.push({\n              type: 'substitution',\n              pos: posWithinNode,\n              seq: element.sequence\n            });\n          }\n          if (element.hasOwnProperty('from_length')) {\n            posWithinNode += element.from_length;\n          }\n        });\n        edit.mismatches = mismatches;\n        sequenceNew.push(edit);\n      }\n    });\n    if (sequence.length === 0) {\n      if (DEBUG) {\n        console.log(`read ${i} is empty`);\n      }\n    } else {\n      const track = {};\n      track.id = myTracks.length + extracted.length;\n      track.sequence = sequence;\n      track.sequenceNew = sequenceNew;\n      track.type = 'read';\n      if (read.path.hasOwnProperty('freq')) track.freq = read.path.freq;\n      if (read.path.hasOwnProperty('name')) track.name = read.path.name;\n\n      // where within node does read start\n      track.firstNodeOffset = 0;\n      if (read.path.mapping[firstIndex].position.hasOwnProperty('offset')) {\n        track.firstNodeOffset = read.path.mapping[firstIndex].position.offset;\n      }\n\n      // where within node does read end\n      const finalNodeEdit = read.path.mapping[lastIndex].edit;\n      track.finalNodeCoverLength = 0;\n      if (read.path.mapping[lastIndex].position.hasOwnProperty('offset')) {\n        track.finalNodeCoverLength +=\n          read.path.mapping[lastIndex].position.offset;\n      }\n      finalNodeEdit.forEach(edit => {\n        if (edit.hasOwnProperty('from_length')) {\n          track.finalNodeCoverLength += edit.from_length;\n        }\n      });\n\n      track.mapping_quality = read.mapping_quality || 0;\n      track.is_secondary = read.is_secondary || false;\n\n      extracted.push(track);\n    }\n  }\n  return extracted;\n}\n\n// remove redundant nodes\n// two nodes A and B can be merged if all tracks leaving A go directly into B\n// and all tracks entering B come directly from A\n// (plus no inversions involved)\nfunction mergeNodes() {\n  let nodeName;\n  let nodeName2;\n  const pred = []; // array of set of predecessors of each node\n  const succ = []; // array of set of successors of each node\n  for (let i = 0; i < nodes.length; i += 1) {\n    pred.push(new Set());\n    succ.push(new Set());\n  }\n\n  let tracksAndReads;\n  if (reads && config.showReads) tracksAndReads = tracks.concat(reads);\n  else tracksAndReads = tracks;\n\n  tracksAndReads.forEach(track => {\n    for (let i = 0; i < track.sequence.length; i += 1) {\n      if (track.sequence[i].charAt(0) !== '-') {\n        // forward Node\n        if (i > 0) {\n          nodeName = track.sequence[i - 1];\n          pred[nodeMap.get(track.sequence[i])].add(nodeName);\n          if (nodeName.charAt(0) === '-') {\n            // add 2 predecessors, to make sure there is no node merging in this case\n            pred[nodeMap.get(track.sequence[i])].add(nodeName.substr(1));\n          }\n        } else if (track.type === 'haplo') {\n          pred[nodeMap.get(track.sequence[i])].add('None');\n        }\n        if (i < track.sequence.length - 1) {\n          nodeName = track.sequence[i + 1];\n          succ[nodeMap.get(track.sequence[i])].add(nodeName);\n          if (nodeName.charAt(0) === '-') {\n            // add 2 successors, to make sure there is no node merging in this case\n            succ[nodeMap.get(track.sequence[i])].add(nodeName.substr(1));\n          }\n        } else if (track.type === 'haplo') {\n          succ[nodeMap.get(track.sequence[i])].add('None');\n        }\n      } else {\n        // reverse Node\n        nodeName = track.sequence[i].substr(1);\n        if (i > 0) {\n          nodeName2 = track.sequence[i - 1];\n          if (nodeName2.charAt(0) === '-') {\n            succ[nodeMap.get(nodeName)].add(nodeName2.substr(1));\n          } else {\n            // add 2 successors, to make sure there is no node merging in this case\n            succ[nodeMap.get(nodeName)].add(nodeName2);\n            succ[nodeMap.get(nodeName)].add(`-${nodeName2}`);\n          }\n        } else if (track.type === 'haplo') {\n          succ[nodeMap.get(nodeName)].add('None');\n        }\n        if (i < track.sequence.length - 1) {\n          nodeName2 = track.sequence[i + 1];\n          if (nodeName2.charAt(0) === '-') {\n            pred[nodeMap.get(nodeName)].add(nodeName2.substr(1));\n          } else {\n            pred[nodeMap.get(nodeName)].add(nodeName2);\n            pred[nodeMap.get(nodeName)].add(`-${nodeName2}`);\n          }\n        } else if (track.type === 'haplo') {\n          pred[nodeMap.get(nodeName)].add('None');\n        }\n      }\n    }\n  });\n\n  // convert sets to arrays\n  for (let i = 0; i < nodes.length; i += 1) {\n    succ[i] = Array.from(succ[i]);\n    pred[i] = Array.from(pred[i]);\n  }\n\n  // update reads which pass through merging nodes\n  if (reads && config.showReads) {\n    // sort nodes by order, then by y-coordinate\n    const sortedNodes = nodes.slice();\n    sortedNodes.sort(compareNodesByOrder);\n\n    // iterate over all nodes and calculate their position within the new merged node\n    const mergeOffset = new Map();\n    const mergeOrigin = new Map(); // maps to leftmost node of a node's \"merging cascade\"\n    sortedNodes.forEach(node => {\n      const predecessor = mergeableWithPred(nodeMap.get(node.name), pred, succ);\n      if (predecessor) {\n        mergeOffset.set(\n          node.name,\n          mergeOffset.get(predecessor) +\n            nodes[nodeMap.get(predecessor)].sequenceLength\n        );\n        mergeOffset.set(\n          '-' + node.name,\n          mergeOffset.get(predecessor) +\n            nodes[nodeMap.get(predecessor)].sequenceLength\n        );\n        mergeOrigin.set(node.name, mergeOrigin.get(predecessor));\n        mergeOrigin.set('-' + node.name, mergeOrigin.get(predecessor));\n      } else {\n        mergeOffset.set(node.name, 0);\n        mergeOffset.set('-' + node.name, 0);\n        mergeOrigin.set(node.name, node.name);\n        mergeOrigin.set('-' + node.name, node.name);\n      }\n    });\n\n    reads.forEach(read => {\n      read.firstNodeOffset += mergeOffset.get(read.sequence[0]);\n      read.finalNodeCoverLength += mergeOffset.get(\n        read.sequence[read.sequence.length - 1]\n      );\n      for (let i = read.sequence.length - 1; i >= 0; i -= 1) {\n        const nodeName =\n          read.sequence[i][0] === '-'\n            ? read.sequence[i].substr(1)\n            : read.sequence[i];\n        if (mergeableWithPred(nodeMap.get(nodeName), pred, succ)) {\n          const predecessor = mergeableWithPred(\n            nodeMap.get(nodeName),\n            pred,\n            succ\n          );\n          if (mergeableWithSucc(nodeMap.get(predecessor), pred, succ)) {\n            if (i > 0) {\n              read.sequence.splice(i, 1);\n              // adjust position of mismatches\n              read.sequenceNew[i].mismatches.forEach(mismatch => {\n                mismatch.pos += nodes[nodeMap.get(predecessor)].sequenceLength;\n              });\n              // append mismatches to previous entry's mismatches\n              read.sequenceNew[i - 1].mismatches = read.sequenceNew[\n                i - 1\n              ].mismatches.concat(read.sequenceNew[i].mismatches);\n              read.sequenceNew.splice(i, 1);\n            } else {\n              read.sequence[0] = mergeOrigin.get(read.sequence[0]);\n              read.sequenceNew[i].mismatches.forEach(mismatch => {\n                mismatch.pos += mergeOffset.get(read.sequenceNew[0].nodeName);\n              });\n              read.sequenceNew[0].nodeName = mergeOrigin.get(\n                read.sequenceNew[0].nodeName\n              );\n            }\n          }\n        }\n      }\n    });\n  }\n\n  // update node sequences + sequence lengths\n  for (let i = 0; i < nodes.length; i += 1) {\n    if (mergeableWithSucc(i, pred, succ) && !mergeableWithPred(i, pred, succ)) {\n      let donor = i;\n      while (mergeableWithSucc(donor, pred, succ)) {\n        donor = succ[donor][0];\n        if (donor.charAt(0) === '-') donor = donor.substr(1);\n        donor = nodeMap.get(donor);\n        if (nodes[i].hasOwnProperty('sequenceLength')) {\n          nodes[i].sequenceLength += nodes[donor].sequenceLength;\n        } else {\n          nodes[i].width += nodes[donor].width;\n        }\n        nodes[i].seq += nodes[donor].seq;\n      }\n    }\n  }\n\n  // actually merge the nodes by removing the corresponding nodes from track data\n  tracks.forEach(track => {\n    for (let i = track.sequence.length - 1; i >= 0; i -= 1) {\n      nodeName = track.sequence[i];\n      if (nodeName.charAt(0) === '-') nodeName = nodeName.substr(1);\n      const nodeIndex = nodeMap.get(nodeName);\n      if (mergeableWithPred(nodeIndex, pred, succ)) {\n        track.sequence.splice(i, 1);\n      }\n    }\n  });\n\n  // remove the nodes from node-array\n  for (let i = nodes.length - 1; i >= 0; i -= 1) {\n    if (mergeableWithPred(i, pred, succ)) {\n      nodes.splice(i, 1);\n    }\n  }\n}\n\nfunction mergeableWithPred(index, pred, succ) {\n  if (pred[index].length !== 1) return false;\n  if (pred[index][0] === 'None') return false;\n  let predecessor = pred[index][0];\n  if (predecessor.charAt(0) === '-') predecessor = predecessor.substr(1);\n  const predecessorIndex = nodeMap.get(predecessor);\n  if (succ[predecessorIndex].length !== 1) return false;\n  if (succ[predecessorIndex][0] === 'None') return false;\n  return predecessor;\n}\n\nfunction mergeableWithSucc(index, pred, succ) {\n  if (succ[index].length !== 1) return false;\n  if (succ[index][0] === 'None') return false;\n  let successor = succ[index][0];\n  if (successor.charAt(0) === '-') successor = successor.substr(1);\n  const successorIndex = nodeMap.get(successor);\n  if (pred[successorIndex].length !== 1) return false;\n  if (pred[successorIndex][0] === 'None') return false;\n  return true;\n}\n\nfunction drawMismatches() {\n  tracks.forEach((read, trackIdx) => {\n    if (read.type === 'read') {\n      read.sequenceNew.forEach((element, i) => {\n        element.mismatches.forEach(mm => {\n          const nodeName =\n            element.nodeName[0] === '-'\n              ? element.nodeName.substr(1)\n              : element.nodeName;\n          const nodeIndex = nodeMap.get(nodeName);\n          const node = nodes[nodeIndex];\n          const x = getXCoordinateOfBaseWithinNode(node, mm.pos);\n          let pathIndex = i;\n          while (read.path[pathIndex].node !== nodeIndex) pathIndex += 1;\n          const y = read.path[pathIndex].y;\n          if (mm.type === 'insertion') {\n            if (\n              config.showSoftClips ||\n              ((mm.pos !== read.firstNodeOffset || i !== 0) &&\n                (mm.pos !== read.finalNodeCoverLength ||\n                  i !== read.sequenceNew.length - 1))\n            ) {\n              drawInsertion(x - 3, y + 7, mm.seq, node.y);\n            }\n          } else if (mm.type === 'deletion') {\n            const x2 = getXCoordinateOfBaseWithinNode(node, mm.pos + mm.length);\n            drawDeletion(x, x2, y + 4, node.y);\n          } else if (mm.type === 'substitution') {\n            const x2 = getXCoordinateOfBaseWithinNode(\n              node,\n              mm.pos + mm.seq.length\n            );\n            drawSubstitution(x + 1, x2, y + 7, node.y, mm.seq);\n          }\n        });\n      });\n    }\n  });\n}\n\nfunction drawInsertion(x, y, seq, nodeY) {\n  svg\n    .append('text')\n    .attr('x', x)\n    .attr('y', y)\n    .text('*')\n    .attr('font-family', 'Courier, \"Lucida Console\", monospace')\n    .attr('font-size', '12px')\n    .attr('fill', 'black')\n    .attr('nodeY', nodeY)\n    .on('mouseover', insertionMouseOver)\n    .on('mouseout', insertionMouseOut)\n    .append('svg:title')\n    .text(seq);\n}\n\nfunction drawSubstitution(x1, x2, y, nodeY, seq) {\n  svg\n    .append('text')\n    .attr('x', x1)\n    .attr('y', y)\n    .text(seq)\n    .attr('font-family', 'Courier, \"Lucida Console\", monospace')\n    .attr('font-size', '12px')\n    .attr('fill', 'black')\n    .attr('nodeY', nodeY)\n    .attr('rightX', x2)\n    .on('mouseover', substitutionMouseOver)\n    .on('mouseout', substitutionMouseOut);\n}\n\nfunction drawDeletion(x1, x2, y, nodeY) {\n  // draw horizontal block\n  svg\n    .append('line')\n    .attr('x1', x1)\n    .attr('y1', y - 1)\n    .attr('x2', x2)\n    .attr('y2', y - 1)\n    .attr('stroke-width', 7)\n    .attr('stroke', 'grey')\n    .attr('nodeY', nodeY)\n    .on('mouseover', deletionMouseOver)\n    .on('mouseout', deletionMouseOut);\n}\n\nfunction insertionMouseOver() {\n  /* jshint validthis: true */\n  d3.select(this).attr('fill', 'red');\n  const x = Number(d3.select(this).attr('x'));\n  const y = Number(d3.select(this).attr('y'));\n  const yTop = Number(d3.select(this).attr('nodeY'));\n  svg\n    .append('line')\n    .attr('class', 'insertionHighlight')\n    .attr('x1', x + 4)\n    .attr('y1', y - 10)\n    .attr('x2', x + 4)\n    .attr('y2', yTop + 5)\n    .attr('stroke-width', 1)\n    .attr('stroke', 'black');\n}\n\nfunction deletionMouseOver() {\n  /* jshint validthis: true */\n  d3.select(this).attr('stroke', 'red');\n  const x1 = Number(d3.select(this).attr('x1'));\n  const x2 = Number(d3.select(this).attr('x2'));\n  const y = Number(d3.select(this).attr('y1'));\n  const yTop = Number(d3.select(this).attr('nodeY'));\n  svg\n    .append('line')\n    .attr('class', 'deletionHighlight')\n    .attr('x1', x1)\n    .attr('y1', y - 3)\n    .attr('x2', x1)\n    .attr('y2', yTop + 5)\n    .attr('stroke-width', 1)\n    .attr('stroke', 'black');\n  svg\n    .append('line')\n    .attr('class', 'deletionHighlight')\n    .attr('x1', x2)\n    .attr('y1', y - 3)\n    .attr('x2', x2)\n    .attr('y2', yTop + 5)\n    .attr('stroke-width', 1)\n    .attr('stroke', 'black');\n}\n\nfunction substitutionMouseOver() {\n  /* jshint validthis: true */\n  d3.select(this).attr('fill', 'red');\n  const x1 = Number(d3.select(this).attr('x'));\n  const x2 = Number(d3.select(this).attr('rightX'));\n  const y = Number(d3.select(this).attr('y'));\n  const yTop = Number(d3.select(this).attr('nodeY'));\n  svg\n    .append('line')\n    .attr('class', 'substitutionHighlight')\n    .attr('x1', x1 - 1)\n    .attr('y1', y - 7)\n    .attr('x2', x1 - 1)\n    .attr('y2', yTop + 5)\n    .attr('stroke-width', 1)\n    .attr('stroke', 'black');\n  svg\n    .append('line')\n    .attr('class', 'substitutionHighlight')\n    .attr('x1', x2 + 1)\n    .attr('y1', y - 7)\n    .attr('x2', x2 + 1)\n    .attr('y2', yTop + 5)\n    .attr('stroke-width', 1)\n    .attr('stroke', 'black');\n}\n\nfunction insertionMouseOut() {\n  /* jshint validthis: true */\n  d3.select(this).attr('fill', 'black');\n  d3.selectAll('.insertionHighlight').remove();\n}\n\nfunction deletionMouseOut() {\n  /* jshint validthis: true */\n  d3.select(this).attr('stroke', 'grey');\n  d3.selectAll('.deletionHighlight').remove();\n}\n\nfunction substitutionMouseOut() {\n  /* jshint validthis: true */\n  d3.select(this).attr('fill', 'black');\n  d3.selectAll('.substitutionHighlight').remove();\n}\n\nfunction filterReads(reads) {\n  if (!reads) return reads;\n  return reads.filter(\n    read =>\n      !read.is_secondary && read.mapping_quality >= config.mappingQualityCutoff\n  );\n}\n","export const dataOriginTypes = {\n  API: 'API',\n  EXAMPLE_1: 'example 1',\n  EXAMPLE_2: 'example 2',\n  EXAMPLE_3: 'example 3',\n  EXAMPLE_4: 'example 4',\n  EXAMPLE_5: 'example 5',\n  EXAMPLE_6: 'example 6'\n};\n","import React, { Component } from 'react';\nimport { Form, Label, Input, Button } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faStepBackward,\n  faStepForward,\n  faSearchPlus,\n  faSearchMinus\n} from '@fortawesome/free-solid-svg-icons';\nimport * as tubeMap from '../util/tubemap';\n\nconst ZOOM_FACTOR = 2.0;\n\nclass DataPositionFormRow extends Component {\n  handleZoomIn = () => {\n    tubeMap.zoomBy(ZOOM_FACTOR);\n  };\n\n  handleZoomOut = () => {\n    tubeMap.zoomBy(1.0 / ZOOM_FACTOR);\n  };\n\n  handleDownloadButton = () => {\n    const svgN = document.getElementById('svg');\n    const svgData = new XMLSerializer().serializeToString(svgN);\n    const svgBlob = new Blob([svgData], {\n      type: 'image/svg+xml;charset=utf-8'\n    });\n    const svgUrl = URL.createObjectURL(svgBlob);\n\n    const downloadLink = document.createElement('a');\n    downloadLink.href = svgUrl;\n    downloadLink.download = 'graph.svg';\n    document.body.appendChild(downloadLink);\n    downloadLink.click();\n    document.body.removeChild(downloadLink);\n  };\n\n  render() {\n    return (\n      <Form inline>\n        <Label className=\"tight-label mb-2 mr-sm-2 mb-sm-0 ml-2\" for=\"nodeID\">\n          Start:\n        </Label>\n        <Input\n          type=\"text\"\n          className=\"custom-input form-control mb-2 mr-sm-4 mb-sm-0\"\n          id=\"nodeID\"\n          size=\"12\"\n          value={this.props.nodeID}\n          onChange={this.props.handleInputChange}\n        />\n        <Label className=\"tight-label mb-2 mr-sm-2 mb-sm-0 ml-2\" for=\"distance\">\n          Length:\n        </Label>\n        <Input\n          type=\"text\"\n          className=\"custom-input form-control mb-2 mr-sm-2 mb-sm-0\"\n          id=\"distance\"\n          size=\"4\"\n          value={this.props.distance}\n          onChange={this.props.handleInputChange}\n        />\n        <Label\n          className=\"tight-label mb-2 mr-sm-2 mb-sm-0 ml-2\"\n          for=\"unitSelect\"\n        >\n          Unit:\n        </Label>\n        <Input\n          type=\"select\"\n          className=\"custom-select mb-2 mr-sm-2 mb-sm-0\"\n          id=\"byNode\"\n          value={this.props.byNode}\n          onChange={this.props.handleInputChange}\n        >\n          <option value=\"false\">Nucleotides</option>\n          <option value=\"true\">Nodes</option>\n        </Input>\n        &nbsp;\n        {this.props.uploadInProgress && (\n          <div className=\"smallLoader\" id=\"fileUploadSpinner\" />\n        )}\n        <Button\n          color=\"primary\"\n          id=\"goButton\"\n          onClick={this.props.handleGoButton}\n          disabled={this.props.uploadInProgress}\n        >\n          Go\n        </Button>\n        <Button\n          color=\"primary\"\n          id=\"goLeftButton\"\n          onClick={this.props.handleGoLeft}\n        >\n          <FontAwesomeIcon icon={faStepBackward} size=\"lg\" />\n        </Button>\n        <Button color=\"primary\" id=\"zoomInButton\" onClick={this.handleZoomIn}>\n          <FontAwesomeIcon icon={faSearchPlus} size=\"lg\" />\n        </Button>\n        <Button color=\"primary\" id=\"zoomOutButton\" onClick={this.handleZoomOut}>\n          <FontAwesomeIcon icon={faSearchMinus} size=\"lg\" />\n        </Button>\n        <Button\n          color=\"primary\"\n          id=\"goRightButton\"\n          onClick={this.props.handleGoRight}\n        >\n          <FontAwesomeIcon icon={faStepForward} size=\"lg\" />\n        </Button>\n        <Button\n          color=\"secondary\"\n          id=\"downloadButton\"\n          onClick={this.handleDownloadButton}\n        >\n          Download Image\n        </Button>\n      </Form>\n    );\n  }\n}\n\nexport default DataPositionFormRow;\n","import React, { Component } from 'react';\nimport { Label, Input } from 'reactstrap';\n\nclass MountedDataFormRow extends Component {\n  render() {\n    const xgFileDropdownOptions = this.props.xgSelectOptions.map(fileName => {\n      return (\n        <option value={fileName} key={fileName}>\n          {fileName}\n        </option>\n      );\n    });\n\n    const gbwtFileDropdownOptions = this.props.gbwtSelectOptions.map(\n      fileName => {\n        return (\n          <option value={fileName} key={fileName}>\n            {fileName}\n          </option>\n        );\n      }\n    );\n\n    const gamFileDropdownOptions = this.props.gamSelectOptions.map(fileName => {\n      return (\n        <option value={fileName} key={fileName}>\n          {fileName}\n        </option>\n      );\n    });\n\n    const pathDropdownOptions = this.props.pathSelectOptions.map(pathName => {\n      return (\n        <option value={pathName} key={pathName}>\n          {pathName}\n        </option>\n      );\n    });\n\n    return (\n      <React.Fragment>\n        <Label className=\"customData tight-label mb-2 mr-sm-2 mb-sm-0 ml-2\">\n          xg file:\n        </Label>\n        <Input\n          type=\"select\"\n          className=\"customDataMounted custom-select mb-2 mr-sm-4 mb-sm-0\"\n          id=\"xgSelect\"\n          value={this.props.xgSelect}\n          onChange={this.props.handleInputChange}\n        >\n          {xgFileDropdownOptions}\n        </Input>\n\n        <Label\n          for=\"gbwtFileSelect\"\n          className=\"customData tight-label mb-2 mr-sm-2 mb-sm-0 ml-2\"\n        >\n          gbwt file:\n        </Label>\n        <Input\n          type=\"select\"\n          className=\"customDataMounted custom-select mb-2 mr-sm-4 mb-sm-0\"\n          id=\"gbwtSelect\"\n          value={this.props.gbwtSelect}\n          onChange={this.props.handleInputChange}\n        >\n          {gbwtFileDropdownOptions}\n        </Input>\n\n        <Label\n          for=\"gamFileSelect\"\n          className=\"customData tight-label mb-2 mr-sm-2 mb-sm-0 ml-2\"\n        >\n          gam index:\n        </Label>\n        <Input\n          type=\"select\"\n          className=\"customDataMounted custom-select mb-2 mr-sm-4 mb-sm-0\"\n          id=\"gamSelect\"\n          value={this.props.gamSelect}\n          onChange={this.props.handleInputChange}\n        >\n          {gamFileDropdownOptions}\n        </Input>\n\n        <Label\n          for=\"pathName\"\n          className=\"customData tight-label mb-2 mr-sm-2 mb-sm-0 ml-2\"\n        >\n          Path name:\n        </Label>\n        <Input\n          type=\"select\"\n          className=\"customData custom-select mb-2 mr-sm-4 mb-sm-0\"\n          id=\"pathSelect\"\n          value={this.props.pathSelect}\n          onChange={this.props.handleInputChange}\n        >\n          {pathDropdownOptions}\n        </Input>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default MountedDataFormRow;\n","import React, { Component } from 'react';\nimport { Label, Input } from 'reactstrap';\nimport config from '../config.json';\n\nconst BACKEND_URL = config.BACKEND_URL || `http://${window.location.host}`;\nconst MAX_UPLOAD_SIZE = 5242880;\n\nclass FileUploadFormRow extends Component {\n  constructor(props) {\n    super(props);\n    this.xgFileInput = React.createRef();\n    this.gbwtFileInput = React.createRef();\n    this.gamFileInput = React.createRef();\n  }\n\n  onXgFileChange = () => {\n    const file = this.xgFileInput.current.files[0];\n    if (file === undefined) {\n      this.props.resetPathNames();\n      this.props.handleFileUpload('xgFile', 'none');\n    } else {\n      if (file.size > MAX_UPLOAD_SIZE) {\n        this.xgFileInput.current.value = '';\n        this.props.showFileSizeAlert();\n        return;\n      }\n      this.props.setUploadInProgress(true);\n      const formData = new FormData();\n      formData.append('xgFile', file);\n      const xhr = new XMLHttpRequest();\n      xhr.responseType = 'json';\n      xhr.onreadystatechange = () => {\n        if (xhr.readyState === 4 && xhr.status === 200) {\n          // Every thing ok, file uploaded\n          this.props.setUploadInProgress(false);\n          this.props.handleFileUpload('xgFile', xhr.response.path);\n          this.props.getPathNames(xhr.response.path, 'true');\n        }\n      };\n      xhr.open('POST', `${BACKEND_URL}/xgFileSubmission`, true);\n      xhr.send(formData);\n    }\n  };\n\n  onGbwtFileChange = () => {\n    const file = this.gbwtFileInput.current.files[0];\n    if (file === undefined) {\n      this.props.handleFileUpload('gbwtFile', 'none');\n    } else {\n      if (file.size > MAX_UPLOAD_SIZE) {\n        this.gbwtFileInput.current.value = '';\n        this.props.showFileSizeAlert();\n        return;\n      }\n      this.props.setUploadInProgress(true);\n      const formData = new FormData();\n      formData.append('gbwtFile', file);\n      const xhr = new XMLHttpRequest();\n      xhr.responseType = 'json';\n      xhr.onreadystatechange = () => {\n        if (xhr.readyState === 4 && xhr.status === 200) {\n          // Every thing ok, file uploaded\n          this.props.setUploadInProgress(false);\n          this.props.handleFileUpload('gbwtFile', xhr.response.path);\n        }\n      };\n      xhr.open('POST', `${BACKEND_URL}/gbwtFileSubmission`, true);\n      xhr.send(formData);\n    }\n  };\n\n  onGamFileChange = () => {\n    const file = this.gamFileInput.current.files[0];\n    if (file === undefined) {\n      this.props.handleFileUpload('gamFile', 'none');\n    } else {\n      if (file.size > MAX_UPLOAD_SIZE) {\n        this.gamFileInput.current.value = '';\n        this.props.showFileSizeAlert();\n        return;\n      }\n      this.props.setUploadInProgress(true);\n      const formData = new FormData();\n      formData.append('gamFile', file);\n      const xhr = new XMLHttpRequest();\n      xhr.responseType = 'json';\n      xhr.onreadystatechange = () => {\n        if (xhr.readyState === 4 && xhr.status === 200) {\n          // Every thing ok, file uploaded\n          this.props.setUploadInProgress(false);\n          this.props.handleFileUpload('gamFile', xhr.response.path);\n        }\n      };\n      xhr.open('POST', `${BACKEND_URL}/gamFileSubmission`, true);\n      xhr.send(formData);\n    }\n  };\n\n  render() {\n    const pathDropdownOptions = this.props.pathSelectOptions.map(pathName => {\n      return (\n        <option value={pathName} key={pathName}>\n          {pathName}\n        </option>\n      );\n    });\n\n    return (\n      <React.Fragment>\n        <Label className=\"customData tight-label mb-2 mr-sm-2 mb-sm-0 ml-2\">\n          xg file:\n        </Label>\n        <Input\n          type=\"file\"\n          className=\"customDataUpload form-control-file\"\n          id=\"xgFileUpload\"\n          accept=\".xg\"\n          innerRef={this.xgFileInput}\n          onChange={this.onXgFileChange}\n        />\n        <Label\n          for=\"gbwtFileSelect\"\n          className=\"customData tight-label mb-2 mr-sm-2 mb-sm-0 ml-2\"\n        >\n          gbwt file:\n        </Label>\n        <Input\n          type=\"file\"\n          className=\"customDataUpload form-control-file\"\n          id=\"gbwtFileUpload\"\n          accept=\".gbwt\"\n          innerRef={this.gbwtFileInput}\n          onChange={this.onGbwtFileChange}\n        />\n        <Label\n          for=\"gamFileSelect\"\n          className=\"customData tight-label mb-2 mr-sm-2 mb-sm-0 ml-2\"\n        >\n          gam index:\n        </Label>\n        <Input\n          type=\"file\"\n          className=\"customDataUpload form-control-file\"\n          id=\"gamFileUpload\"\n          accept=\".gam\"\n          innerRef={this.gamFileInput}\n          onChange={this.onGamFileChange}\n        />\n        <Label\n          for=\"pathName\"\n          className=\"customData tight-label mb-2 mr-sm-2 mb-sm-0 ml-2\"\n        >\n          Path name:\n        </Label>\n        <Input\n          type=\"select\"\n          className=\"customData custom-select mb-2 mr-sm-4 mb-sm-0\"\n          id=\"pathSelect\"\n          value={this.props.pathSelect}\n          onChange={this.props.handleInputChange}\n        >\n          {pathDropdownOptions}\n        </Input>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default FileUploadFormRow;\n","import React, { Component } from 'react';\nimport { Form, Button } from 'reactstrap';\nimport { dataOriginTypes } from '../enums';\n\nclass ExampleSelectButtons extends Component {\n  handleClick = (dataOrigin, haploColor, readColor) => {\n    this.props.setDataOrigin(dataOrigin);\n    this.props.setColorSetting('haplotypeColors', haploColor);\n    if (readColor) {\n      this.props.setColorSetting('forwardReadColors', readColor);\n    }\n  };\n\n  render() {\n    return (\n      <Form inline>\n        <Button\n          color=\"primary\"\n          id=\"example1\"\n          onClick={() =>\n            this.handleClick(dataOriginTypes.EXAMPLE_1, 'plainColors')\n          }\n        >\n          Indels and Polymorphisms only\n        </Button>\n        <Button\n          color=\"primary\"\n          id=\"example2\"\n          onClick={() =>\n            this.handleClick(dataOriginTypes.EXAMPLE_2, 'plainColors')\n          }\n        >\n          Inversions\n        </Button>\n        <Button\n          color=\"primary\"\n          id=\"example3\"\n          onClick={() =>\n            this.handleClick(dataOriginTypes.EXAMPLE_3, 'plainColors')\n          }\n        >\n          Nested Inversions\n        </Button>\n        <Button\n          color=\"primary\"\n          id=\"example4\"\n          onClick={() =>\n            this.handleClick(dataOriginTypes.EXAMPLE_4, 'plainColors')\n          }\n        >\n          Duplications\n        </Button>\n        <Button\n          color=\"primary\"\n          id=\"example5\"\n          onClick={() =>\n            this.handleClick(dataOriginTypes.EXAMPLE_5, 'plainColors')\n          }\n        >\n          Translocations\n        </Button>\n        <Button\n          color=\"primary\"\n          id=\"example6\"\n          onClick={() =>\n            this.handleClick(dataOriginTypes.EXAMPLE_6, 'greys', 'reds')\n          }\n        >\n          Aligned Reads\n        </Button>\n      </Form>\n    );\n  }\n}\n\nexport default ExampleSelectButtons;\n","import React, { Component } from 'react';\nimport { Container, Row, Col, Form, Label, Input, Alert } from 'reactstrap';\nimport { dataOriginTypes } from '../enums';\n// import defaultConfig from '../config.default.json';\nimport config from '../config.json';\nimport DataPositionFormRow from './DataPositionFormRow';\nimport MountedDataFormRow from './MountedDataFormRow';\nimport FileUploadFormRow from './FileUploadFormRow';\nimport ExampleSelectButtons from './ExampleSelectButtons';\n\nconst BACKEND_URL = config.BACKEND_URL || `http://${window.location.host}`;\nconst DATA_SOURCES = config.DATA_SOURCES;\nconst MAX_UPLOAD_SIZE_DESCRIPTION = '5 MB';\nconst dataTypes = {\n  BUILT_IN: 'built-in',\n  FILE_UPLOAD: 'file-upload',\n  MOUNTED_FILES: 'mounted files',\n  EXAMPLES: 'examples'\n};\n\nclass HeaderForm extends Component {\n  state = {\n    xgSelectOptions: ['none'],\n    xgSelect: 'none',\n\n    gbwtSelectOptions: ['none'],\n    gbwtSelect: 'none',\n\n    gamSelectOptions: ['none'],\n    gamSelect: 'none',\n\n    pathSelectOptions: ['none'],\n    pathSelect: 'none',\n\n    xgFile: 'snp1kg-BRCA1.vg.xg',\n    gbwtFile: '',\n    gamFile: 'NA12878-BRCA1.sorted.gam',\n    anchorTrackName: '17',\n    dataPath: 'default',\n\n    nodeID: '1',\n    distance: '100',\n    byNode: 'false',\n\n    dataType: dataTypes.BUILT_IN,\n    fileSizeAlert: false,\n    uploadInProgress: false\n  };\n\n  componentDidMount() {\n    this.getMountedFilenames();\n    this.setUpWebsocket();\n  }\n\n  getMountedFilenames = async () => {\n    try {\n      const response = await fetch(`${BACKEND_URL}/getFilenames`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const json = await response.json();\n      json.xgFiles.unshift('none');\n      json.gbwtFiles.unshift('none');\n      json.gamIndices.unshift('none');\n\n      this.setState(state => {\n        const xgSelect = json.xgFiles.includes(state.xgSelect)\n          ? state.xgSelect\n          : 'none';\n        const gbwtSelect = json.gbwtFiles.includes(state.gbwtSelect)\n          ? state.gbwtSelect\n          : 'none';\n        const gamSelect = json.gamIndices.includes(state.gamSelect)\n          ? state.gamSelect\n          : 'none';\n        return {\n          xgSelectOptions: json.xgFiles,\n          gbwtSelectOptions: json.gbwtFiles,\n          gamSelectOptions: json.gamIndices,\n          xgSelect,\n          gbwtSelect,\n          gamSelect\n        };\n      });\n    } catch (error) {\n      console.log('POST to /getFilenames failed');\n    }\n  };\n\n  getPathNames = async (xgFile, isUploadedFile) => {\n    try {\n      const response = await fetch(`${BACKEND_URL}/getPathNames`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ xgFile, isUploadedFile })\n      });\n      const json = await response.json();\n      this.setState(state => {\n        const pathSelect = json.pathNames.includes(state.pathSelect)\n          ? state.pathSelect\n          : json.pathNames[0];\n        return {\n          pathSelectOptions: json.pathNames,\n          pathSelect,\n          anchorTrackName: pathSelect\n        };\n      });\n    } catch (error) {\n      console.log('POST to /getPathNames failed');\n    }\n  };\n\n  resetPathNames = () => {\n    this.setState({\n      pathSelectOptions: ['none'],\n      pathSelect: 'none'\n    });\n  };\n\n  handleDataSourceChange = event => {\n    const value = event.target.value;\n    DATA_SOURCES.forEach(ds => {\n      if (ds.name === value) {\n        this.setState({\n          xgFile: ds.xgFile,\n          gbwtFile: ds.gbwtFile,\n          gamFile: ds.gamFile,\n          anchorTrackName: ds.anchorTrackName,\n          dataPath: ds.useMountedPath ? 'mounted' : 'default',\n          nodeID: ds.defaultPosition,\n          dataType: dataTypes.BUILT_IN\n        });\n        return;\n      }\n    });\n    if (value === 'customFileUpload') {\n      this.setState(state => {\n        return {\n          xgFile: state.xgSelect,\n          gbwtFile: state.gbwtSelect,\n          gamFile: state.gamSelect,\n          anchorTrackName: state.pathSelect,\n          dataPath: 'upload',\n          dataType: dataTypes.FILE_UPLOAD\n        };\n      });\n    } else if (value === 'customMounted') {\n      this.setState(state => {\n        return {\n          xgFile: state.xgSelect,\n          gbwtFile: state.gbwtSelect,\n          gamFile: state.gamSelect,\n          anchorTrackName: state.pathSelect,\n          dataPath: 'mounted',\n          dataType: dataTypes.MOUNTED_FILES\n        };\n      });\n    } else if (value === 'syntheticExamples') {\n      this.setState({ dataType: dataTypes.EXAMPLES });\n    }\n  };\n\n  handleGoButton = () => {\n    if (this.props.dataOrigin !== dataOriginTypes.API) {\n      this.props.setColorSetting('haplotypeColors', 'greys');\n      this.props.setColorSetting('forwardReadColors', 'reds');\n    }\n    const fetchParams = {\n      nodeID: this.state.nodeID,\n      distance: this.state.distance,\n      byNode: this.state.byNode,\n      xgFile: this.state.xgFile,\n      gbwtFile: this.state.gbwtFile,\n      gamFile: this.state.gamFile,\n      anchorTrackName: this.state.anchorTrackName,\n      dataPath: this.state.dataPath\n    };\n    this.props.setFetchParams(fetchParams);\n  };\n\n  handleInputChange = event => {\n    const id = event.target.id;\n    const value = event.target.value;\n    this.setState({ [id]: value });\n    if (id === 'xgSelect') {\n      this.getPathNames(value, false);\n      this.setState({ xgFile: value });\n    } else if (id === 'gbwtSelect') {\n      this.setState({ gbwtFile: value });\n    } else if (id === 'gamSelect') {\n      this.setState({ gamFile: value });\n    } else if (id === 'pathSelect') {\n      this.setState({ anchorTrackName: value });\n    }\n  };\n\n  handleGoRight = () => {\n    this.setState(\n      state => ({\n        nodeID: Number(this.state.nodeID) + Number(this.state.distance)\n      }),\n      () => this.handleGoButton()\n    );\n  };\n\n  handleGoLeft = () => {\n    this.setState(\n      state => ({\n        nodeID: Math.max(\n          0,\n          Number(this.state.nodeID) - Number(this.state.distance)\n        )\n      }),\n      () => this.handleGoButton()\n    );\n  };\n\n  handleFileUpload = (fileType, fileName) => {\n    this.setState({ [fileType]: fileName });\n  };\n\n  showFileSizeAlert = () => {\n    this.setState({ fileSizeAlert: true });\n  };\n\n  setUploadInProgress = val => {\n    this.setState({ uploadInProgress: val });\n  };\n\n  setUpWebsocket = () => {\n    this.ws = new WebSocket(BACKEND_URL.replace(/^http/, 'ws'));\n    this.ws.onmessage = message => {\n      this.getMountedFilenames();\n    };\n    this.ws.onclose = event => {\n      setTimeout(this.setUpWebsocket, 1000);\n    };\n    this.ws.onerror = event => {\n      this.ws.close();\n    };\n  };\n\n  render() {\n    let dataSourceDropdownOptions = DATA_SOURCES.map(ds => {\n      return (\n        <option value={ds.name} key={ds.name}>\n          {ds.name}\n        </option>\n      );\n    });\n    dataSourceDropdownOptions.push(\n      <option value=\"syntheticExamples\" key=\"syntheticExamples\">\n        synthetic data examples\n      </option>,\n      <option value=\"customFileUpload\" key=\"customFileUpload\">\n        custom (file upload)\n      </option>,\n      <option value=\"customMounted\" key=\"customMounted\">\n        custom (mounted files)\n      </option>\n    );\n\n    const mountedFilesFlag = this.state.dataType === dataTypes.MOUNTED_FILES;\n    const uploadFilesFlag = this.state.dataType === dataTypes.FILE_UPLOAD;\n    const examplesFlag = this.state.dataType === dataTypes.EXAMPLES;\n\n    return (\n      <div>\n        <Container fluid={true}>\n          <Row>\n            <Col md=\"auto\">\n              <img src=\"./logo.png\" alt=\"Logo\" />\n            </Col>\n            <Col>\n              <Form inline>\n                <Label\n                  className=\"tight-label mb-2 mr-sm-2 mb-sm-0 ml-2\"\n                  for=\"dataSourceSelect\"\n                >\n                  Data:\n                </Label>\n                <Input\n                  type=\"select\"\n                  id=\"dataSourceSelect\"\n                  className=\"custom-select mb-2 mr-sm-4 mb-sm-0\"\n                  onChange={this.handleDataSourceChange}\n                >\n                  {dataSourceDropdownOptions}\n                </Input>\n                {mountedFilesFlag && (\n                  <MountedDataFormRow\n                    xgSelect={this.state.xgSelect}\n                    xgSelectOptions={this.state.xgSelectOptions}\n                    gbwtSelect={this.state.gbwtSelect}\n                    gbwtSelectOptions={this.state.gbwtSelectOptions}\n                    gamSelect={this.state.gamSelect}\n                    gamSelectOptions={this.state.gamSelectOptions}\n                    pathSelect={this.state.pathSelect}\n                    pathSelectOptions={this.state.pathSelectOptions}\n                    handleInputChange={this.handleInputChange}\n                  />\n                )}\n                {uploadFilesFlag && (\n                  <FileUploadFormRow\n                    pathSelect={this.state.pathSelect}\n                    pathSelectOptions={this.state.pathSelectOptions}\n                    handleInputChange={this.handleInputChange}\n                    getPathNames={this.getPathNames}\n                    resetPathNames={this.resetPathNames}\n                    handleFileUpload={this.handleFileUpload}\n                    showFileSizeAlert={this.showFileSizeAlert}\n                    setUploadInProgress={this.setUploadInProgress}\n                  />\n                )}\n              </Form>\n              <Alert\n                color=\"danger\"\n                isOpen={this.state.fileSizeAlert}\n                toggle={() => {\n                  this.setState({ fileSizeAlert: false });\n                }}\n                className=\"mt-3\"\n              >\n                <strong>File size too big! </strong>\n                You may only upload files with a maximum size of{' '}\n                {MAX_UPLOAD_SIZE_DESCRIPTION}.\n              </Alert>\n              {examplesFlag ? (\n                <ExampleSelectButtons\n                  setDataOrigin={this.props.setDataOrigin}\n                  setColorSetting={this.props.setColorSetting}\n                />\n              ) : (\n                <DataPositionFormRow\n                  nodeID={this.state.nodeID}\n                  distance={this.state.distance}\n                  byNode={this.state.byNode}\n                  handleInputChange={this.handleInputChange}\n                  handleGoLeft={this.handleGoLeft}\n                  handleGoRight={this.handleGoRight}\n                  handleGoButton={this.handleGoButton}\n                  uploadInProgress={this.state.uploadInProgress}\n                />\n              )}\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default HeaderForm;\n","import React, { Component } from 'react';\nimport * as tubeMap from '../util/tubemap';\n\nclass TubeMap extends Component {\n  componentDidMount() {\n    this.createTubeMap();\n  }\n\n  componentDidUpdate() {\n    this.createTubeMap();\n  }\n\n  createTubeMap = () => {\n    tubeMap.create({\n      svgID: '#svg',\n      nodes: this.props.nodes,\n      tracks: this.props.tracks,\n      reads: this.props.reads\n    });\n  };\n\n  render() {\n    return <svg id=\"svg\" />;\n  }\n}\n\nexport default TubeMap;\n","import React, { Component } from 'react';\nimport TubeMap from './TubeMap';\nimport config from '../config.json';\nimport { Container, Row, Alert } from 'reactstrap';\nimport * as tubeMap from '../util/tubemap';\nimport { dataOriginTypes } from '../enums';\n\nconst BACKEND_URL = config.BACKEND_URL || `http://${window.location.host}`;\n\nclass TubeMapContainer extends Component {\n  state = {\n    isLoading: true,\n    error: null\n  };\n\n  componentDidMount() {\n    this.getRemoteTubeMapData();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.dataOrigin !== prevProps.dataOrigin) {\n      this.props.dataOrigin === dataOriginTypes.API\n        ? this.getRemoteTubeMapData()\n        : this.getExampleData();\n    } else if (this.props.fetchParams !== prevProps.fetchParams) {\n      this.getRemoteTubeMapData();\n    }\n  }\n\n  render() {\n    const { isLoading, error } = this.state;\n\n    if (error) {\n      console.log(error);\n      const message = error.message ? error.message : error;\n      return (\n        <Container>\n          <Row>\n            <Alert color=\"danger\">{message}</Alert>\n          </Row>\n        </Container>\n      );\n    }\n\n    if (isLoading) {\n      return (\n        <Container>\n          <Row>\n            <div id=\"loaderContainer\">\n              <div id=\"loader\" />\n            </div>\n          </Row>\n        </Container>\n      );\n    }\n\n    return (\n      <div id=\"tubeMapSVG\">\n        <TubeMap\n          nodes={this.state.nodes}\n          tracks={this.state.tracks}\n          reads={this.state.reads}\n        />\n      </div>\n    );\n  }\n\n  getRemoteTubeMapData = async () => {\n    this.setState({ isLoading: true, error: null });\n    try {\n      const response = await fetch(`${BACKEND_URL}/getChunkedData`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(this.props.fetchParams)\n      });\n      const json = await response.json();\n      if (json.graph === undefined) {\n        // We did not get back a graph, only (possibly) an error.\n        const error = json.error || 'Fetching remote data returned error';\n        this.setState({ error: error, isLoading: false });\n      } else {\n        console.log('graph', json.graph);\n        const nodes = tubeMap.vgExtractNodes(json.graph);\n        const tracks = tubeMap.vgExtractTracks(json.graph);\n        const reads = tubeMap.vgExtractReads(nodes, tracks, json.gam);\n        this.setState({\n          isLoading: false,\n          nodes,\n          tracks,\n          reads\n        });\n      }\n    } catch (error) {\n      this.setState({ error: error, isLoading: false });\n    }\n  };\n\n  getExampleData = async () => {\n    this.setState({ isLoading: true, error: null });\n    let nodes, tracks, reads;\n    const data = await import('../util/demo-data');\n    nodes = data.inputNodes;\n    switch (this.props.dataOrigin) {\n      case dataOriginTypes.EXAMPLE_1:\n        tracks = data.inputTracks1;\n        break;\n      case dataOriginTypes.EXAMPLE_2:\n        tracks = data.inputTracks2;\n        break;\n      case dataOriginTypes.EXAMPLE_3:\n        tracks = data.inputTracks3;\n        break;\n      case dataOriginTypes.EXAMPLE_4:\n        tracks = data.inputTracks4;\n        break;\n      case dataOriginTypes.EXAMPLE_5:\n        tracks = data.inputTracks5;\n        break;\n      case dataOriginTypes.EXAMPLE_6:\n        const vg = JSON.parse(data.k3138);\n        nodes = tubeMap.vgExtractNodes(vg);\n        tracks = tubeMap.vgExtractTracks(vg);\n        reads = tubeMap.vgExtractReads(\n          nodes,\n          tracks,\n          this.readsFromStringToArray(data.demoReads)\n        );\n        break;\n      default:\n        console.log('invalid data origin type');\n    }\n\n    this.setState({ isLoading: false, nodes, tracks, reads });\n  };\n\n  readsFromStringToArray = readsString => {\n    const lines = readsString.split('\\n');\n    const result = [];\n    lines.forEach(line => {\n      if (line.length > 0) {\n        result.push(JSON.parse(line));\n      }\n    });\n    return result;\n  };\n}\n\nexport default TubeMapContainer;\n","import React, { Component } from 'react';\nimport { Col, Label, Input, FormGroup } from 'reactstrap';\n\nconst colorMap = new Map([\n  ['colorful', 'plainColors'],\n  ['greyscale', 'greys'],\n  ['reds', 'reds'],\n  ['blues', 'blues'],\n  ['pale colors', 'lightColors']\n]);\n\nclass RadioRow extends Component {\n  onChange = event => {\n    this.props.setColorSetting(\n      this.props.trackType,\n      colorMap.get(event.target.value)\n    );\n  };\n\n  render() {\n    const colorRadios = Array.from(colorMap).map(([keyColor, valueColor]) => {\n      return (\n        <Col xs=\"auto\" key={keyColor}>\n          <FormGroup check>\n            <Label check>\n              <Input\n                type=\"radio\"\n                value={keyColor}\n                checked={this.props.color === valueColor}\n                onChange={this.onChange}\n              />\n              {keyColor}\n            </Label>\n          </FormGroup>\n        </Col>\n      );\n    });\n    return (\n      <FormGroup row className=\"mb-1\">\n        <Col sm=\"2\">{this.props.rowHeading}:</Col>\n        {colorRadios}\n      </FormGroup>\n    );\n  }\n}\n\nexport default RadioRow;\n","import React, { Component } from 'react';\nimport {\n  Container,\n  Collapse,\n  CardBody,\n  Card,\n  CardHeader,\n  Form,\n  Label,\n  Input,\n  FormGroup\n} from 'reactstrap';\nimport RadioRow from './RadioRow';\n\nclass VisualizationOptions extends Component {\n  state = {\n    isOpenLegend: false,\n    isOpenVisualizationOptions: true\n  };\n\n  toggleLegend = e => {\n    this.setState({ isOpenLegend: !this.state.isOpenLegend });\n    e.preventDefault();\n  };\n\n  toggleVisOptions = e => {\n    this.setState({\n      isOpenVisualizationOptions: !this.state.isOpenVisualizationOptions\n    });\n    e.preventDefault();\n  };\n\n  handleMappingQualityCutoffChange = event => {\n    this.props.handleMappingQualityCutoffChange(event.target.value);\n  };\n\n  render() {\n    const { visOptions, toggleFlag } = this.props;\n    const mappingQualityOptions = Array.from(Array(61).keys()).map(i => {\n      return (\n        <option value={i} key={i}>\n          {i}\n        </option>\n      );\n    });\n    return (\n      <Container>\n        <div id=\"accordion\">\n          <Card>\n            <CardHeader id=\"legendCard\">\n              <h5 className=\"mb-0\">\n                <a href=\"#collapse\" onClick={this.toggleLegend}>\n                  Legend\n                </a>\n              </h5>\n            </CardHeader>\n            <Collapse isOpen={this.state.isOpenLegend}>\n              <CardBody>\n                <div id=\"legendDiv\" />\n              </CardBody>\n            </Collapse>\n          </Card>\n\n          <Card>\n            <CardHeader id=\"visOptionsCard\">\n              <h5 className=\"mb-0\">\n                <a href=\"#collapse\" onClick={this.toggleVisOptions}>\n                  Visualization Options\n                </a>\n              </h5>\n            </CardHeader>\n            <Collapse isOpen={this.state.isOpenVisualizationOptions}>\n              <CardBody>\n                <FormGroup>\n                  <h5>General</h5>\n                  <FormGroup check>\n                    <Label check>\n                      <Input\n                        type=\"checkbox\"\n                        checked={visOptions.removeRedundantNodes}\n                        onChange={() => toggleFlag('removeRedundantNodes')}\n                      />\n                      Remove redundant nodes\n                    </Label>\n                  </FormGroup>\n                  <FormGroup check>\n                    <Label check>\n                      <Input\n                        type=\"checkbox\"\n                        checked={visOptions.compressedView}\n                        onChange={() => toggleFlag('compressedView')}\n                      />\n                      Compressed view\n                    </Label>\n                  </FormGroup>\n                  <FormGroup check>\n                    <Label check>\n                      <Input\n                        type=\"checkbox\"\n                        checked={visOptions.transparentNodes}\n                        onChange={() => toggleFlag('transparentNodes')}\n                      />\n                      Fully transparent nodes\n                    </Label>\n                  </FormGroup>\n                </FormGroup>\n\n                <FormGroup>\n                  <h5>Sequence Reads</h5>\n                  <FormGroup check>\n                    <Label check>\n                      <Input\n                        type=\"checkbox\"\n                        checked={visOptions.showReads}\n                        onChange={() => toggleFlag('showReads')}\n                      />\n                      Show sequence reads\n                    </Label>\n                  </FormGroup>\n                  {visOptions.showReads && (\n                    <React.Fragment>\n                      <FormGroup check>\n                        <Label check>\n                          <Input\n                            type=\"checkbox\"\n                            checked={visOptions.showSoftClips}\n                            onChange={() => toggleFlag('showSoftClips')}\n                          />\n                          Show soft clips\n                        </Label>\n                      </FormGroup>\n                      <FormGroup check>\n                        <Label check>\n                          <Input\n                            type=\"checkbox\"\n                            checked={visOptions.colorReadsByMappingQuality}\n                            onChange={() =>\n                              toggleFlag('colorReadsByMappingQuality')\n                            }\n                          />\n                          Color reads by mapping quality\n                        </Label>\n                      </FormGroup>\n                      <Form inline>\n                        <Label className=\"mr-sm-2 \" for=\"dataSourceSelect\">\n                          Mapping Quality Cutoff:\n                        </Label>\n                        <Input\n                          type=\"select\"\n                          id=\"dataSourceSelect\"\n                          className=\"custom-select\"\n                          value={visOptions.mappingQualityCutoff}\n                          onChange={this.handleMappingQualityCutoffChange}\n                        >\n                          {mappingQualityOptions}\n                        </Input>\n                      </Form>\n                    </React.Fragment>\n                  )}\n                </FormGroup>\n\n                <h5>Colors</h5>\n                <Form>\n                  <RadioRow\n                    rowHeading=\"Haplotypes\"\n                    color={visOptions.haplotypeColors}\n                    trackType=\"haplotypeColors\"\n                    setColorSetting={this.props.setColorSetting}\n                  />\n                  {visOptions.showReads &&\n                    !visOptions.colorReadsByMappingQuality && (\n                      <React.Fragment>\n                        <RadioRow\n                          rowHeading=\"Reads (forward strand)\"\n                          color={visOptions.forwardReadColors}\n                          trackType=\"forwardReadColors\"\n                          setColorSetting={this.props.setColorSetting}\n                        />\n                        <RadioRow\n                          rowHeading=\"Reads (reverse strand)\"\n                          color={visOptions.reverseReadColors}\n                          trackType=\"reverseReadColors\"\n                          setColorSetting={this.props.setColorSetting}\n                        />\n                      </React.Fragment>\n                    )}\n                </Form>\n              </CardBody>\n            </Collapse>\n          </Card>\n        </div>\n      </Container>\n    );\n  }\n}\n\nexport default VisualizationOptions;\n","import React, { Component } from 'react';\nimport './App.css';\nimport HeaderForm from './components/HeaderForm';\nimport TubeMapContainer from './components/TubeMapContainer';\nimport CustomizationAccordion from './components/CustomizationAccordion';\nimport { dataOriginTypes } from './enums';\nimport * as tubeMap from './util/tubemap';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      fetchParams: {\n        nodeID: '1',\n        distance: '100',\n        byNode: 'false',\n        xgFile: 'snp1kg-BRCA1.vg.xg',\n        gbwtFile: '',\n        gamFile: 'NA12878-BRCA1.sorted.gam',\n        anchorTrackName: '17',\n        dataPath: 'default'\n      },\n      dataOrigin: dataOriginTypes.API,\n      visOptions: {\n        removeRedundantNodes: true,\n        compressedView: false,\n        transparentNodes: false,\n        showReads: true,\n        showSoftClips: true,\n        haplotypeColors: 'greys',\n        forwardReadColors: 'reds',\n        reverseReadColors: 'blues',\n        colorReadsByMappingQuality: false,\n        mappingQualityCutoff: 0\n      }\n    };\n  }\n\n  componentDidUpdate() {\n    const { visOptions } = this.state;\n    visOptions.compressedView\n      ? tubeMap.setNodeWidthOption(1)\n      : tubeMap.setNodeWidthOption(0);\n    tubeMap.setMergeNodesFlag(visOptions.removeRedundantNodes);\n    tubeMap.setTransparentNodesFlag(visOptions.transparentNodes);\n    tubeMap.setShowReadsFlag(visOptions.showReads);\n    tubeMap.setSoftClipsFlag(visOptions.showSoftClips);\n    tubeMap.setColorSet('haplotypeColors', visOptions.haplotypeColors);\n    tubeMap.setColorSet('forwardReadColors', visOptions.forwardReadColors);\n    tubeMap.setColorSet('reverseReadColors', visOptions.reverseReadColors);\n    tubeMap.setColorReadsByMappingQualityFlag(\n      visOptions.colorReadsByMappingQuality\n    );\n    tubeMap.setMappingQualityCutoff(visOptions.mappingQualityCutoff);\n  }\n\n  setFetchParams = fetchParams => {\n    this.setState({\n      fetchParams: fetchParams,\n      dataOrigin: dataOriginTypes.API\n    });\n  };\n\n  toggleVisOptionFlag = flagName => {\n    this.setState(state => ({\n      visOptions: {\n        ...state.visOptions,\n        [flagName]: !state.visOptions[flagName]\n      }\n    }));\n  };\n\n  handleMappingQualityCutoffChange = value => {\n    this.setState(state => ({\n      visOptions: {\n        ...state.visOptions,\n        mappingQualityCutoff: value\n      }\n    }));\n  };\n\n  setColorSetting = (key, value) => {\n    this.setState(state => ({\n      visOptions: {\n        ...state.visOptions,\n        [key]: value\n      }\n    }));\n  };\n\n  setDataOrigin = dataOrigin => {\n    this.setState({ dataOrigin });\n  };\n\n  render() {\n    return (\n      <div>\n        <HeaderForm\n          setFetchParams={this.setFetchParams}\n          setDataOrigin={this.setDataOrigin}\n          setColorSetting={this.setColorSetting}\n          dataOrigin={this.state.dataOrigin}\n        />\n        <TubeMapContainer\n          fetchParams={this.state.fetchParams}\n          dataOrigin={this.state.dataOrigin}\n        />\n        <CustomizationAccordion\n          visOptions={this.state.visOptions}\n          toggleFlag={this.toggleVisOptionFlag}\n          handleMappingQualityCutoffChange={\n            this.handleMappingQualityCutoffChange\n          }\n          setColorSetting={this.setColorSetting}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}
{"version":3,"sources":["util/tubemap.js","enums.js","components/DataPositionFormRow.js","components/MountedDataFormRow.js","components/FileUploadFormRow.js","components/ExampleSelectButtons.js","components/HeaderForm.js","components/TubeMap.js","components/TubeMapContainer.js","components/RadioRow.js","components/CustomizationAccordion.js","App.js","index.js"],"names":["svgID","svg","zoom","nodes","tracks","reads","numberOfNodes","numberOfTracks","nodeMap","nodesPerOrder","maxOrder","trackForRuler","bed","dataOriginTypes","API","EXAMPLE_1","EXAMPLE_2","EXAMPLE_3","EXAMPLE_4","EXAMPLE_5","EXAMPLE_6","DEBUG","greys","blues","reds","plainColors","lightColors","haplotypeColors","forwardReadColors","reverseReadColors","exonColors","inputNodes","inputTracks","inputReads","assignments","extraLeft","extraRight","config","mergeNodesFlag","clickableNodesFlag","showExonsFlag","colorScheme","nodeWidthOption","showReads","showSoftClips","hideLegendFlag","trackRectangles","trackCurves","trackCorners","trackVerticalRectangles","trackRectanglesStep3","maxYCoordinate","minYCoordinate","maxXCoordinate","moveTrackToFirstPosition","index","unshift","splice","i","j","currentSequence","nodeName","nodesToInvert","sequence","length","charAt","substr","indexOf","push","concat","forEach","node","name","seq","split","reverse","join","straightenTrack","setColorSet","trackType","colorSet","createTubeMap","drawLegend","setNodeWidthOption","value","undefined","d3","selectAll","remove","JSON","parse","stringify","getColorSet","hasOwnProperty","type","hidden","generateNodeMap","generateTrackIndexSequences","generateNodeWidth","generateNodeSuccessors","generateNodeOrder","reverseReversedReads","nodeName2","tracksAndReads","pred","succ","Set","track","get","add","Array","from","sortedNodes","slice","sort","compareNodesByOrder","mergeOffset","Map","mergeOrigin","predecessor","mergeableWithPred","set","sequenceLength","read","firstNodeOffset","finalNodeCoverLength","mergeableWithSucc","sequenceNew","mismatches","mismatch","pos","donor","width","nodeIndex","mergeNodes","indexSequence","Math","abs","id","degree","console","log","max","order","getMaxOrder","allAreFour","round","freq","calculateTrackWidth","segmentNumber","currentNodeIndex","currentNodeIsForward","currentNode","previousNode","previousNodeIsForward","prevSegmentPerOrderPerTrack","isPositive","n","trackNo","path","lane","isForward","addToAssignment","generateSingleLaneAssignment","generateLaneAssignment","nodeStart","nodeEnd","feature","line","start","end","continue","features","addTrackFeatures","currentX","nextX","currentOrder","extra","leftSideEdges","rightSideEdges","calculateExtraSpace","x","pixelWidth","generateNodeXCoords","orderY","setMapToMax","y","contentHeight","step","generateReadOnlyNodeAttributes","generateBasicPathsForReads","incomingReads","outgoingReads","internalReads","idx","element","pathIdx","compareReadIncomingSegmentsByComingFrom","currentY","occupiedUntil","readElement","setOccupiedUntil","maxY","compareReadOutgoingSegmentsByGoingTo","occupiedFrom","has","incReadElementIndices","incRead","incReadPathElement","compareInternalReads","readIdx","currentRead","heightIncrease","adjustBy","assignmentNode","aNode","trackID","segmentID","adjustVertically3","bottomY","calculateBottomY","elementsWithoutNode","readIndex","pathIndex","previousY","compareNoNodeReadsByPreviousY","segment","placeReads","xStart","xEnd","yStart","yEnd","trackColor","highlight","dummy","reversalFlag","orderStartX","orderEndX","generateTrackColor","getXCoordinateOfBaseWithinNode","getReadXStart","createFeatureRectangle","min","color","laneChange","generateForwardToReverse","generateReverseToForward","getReadXEnd","generateSVGShapesFromPath","attr","document","getElementById","substring","parentNode","offsetWidth","minZoom","scaleExtent","translateExtent","on","transform","k","svg2","clientWidth","call","append","containerWidth","xOffset","translate","alignSVG","defs","pattern","attrs","height","patternUnits","patternTransform","fill","defineSVGPatterns","drawTrackRectangles","drawTrackCurves","drawReversalsByColor","dNodes","allNodes","removeUnusedNodes","d","data","enter","nodeMouseOver","nodeMouseOut","nodeDoubleClick","style","text","drawNodes","drawLabels","rulerTrackIndex","rulerTrack","markingInterval","indexOfFirstBaseInNode","indexOfFirstBase","atLeastOneMarkingDrawn","xCoordOfPreviousMarking","firstNode","drawRulerMarking","nextMarking","ceil","xCoordOfMarking","drawRuler","trackIdx","mm","nodeY","insertionMouseOver","insertionMouseOut","drawInsertion","x2","x1","deletionMouseOver","deletionMouseOut","drawDeletion","substitutionMouseOver","substitutionMouseOut","drawSubstitution","map","key","a","b","segmentA","segmentB","pathIndexA","pathIndexB","nodeA","nodeB","beginDiff","pathA","pathB","idxA","idxB","is_reverse","_loop","nodeWidth","getReverseComplement","temp","seqLength","s","result","tracksOrReads","zoomBy","zoomFactor","parentElement","translateK","translateX","translateY","transition","duration","scale","current","follower","successors","predecessors","generateNodeOrderOfSingleTrack","forwardOrder","backwardOrder","minOrder","increaseOrderForAllNodes","generateNodeOrderTrackBeginning","increment","anchorIndex","modifiedSequence","rightIndex","leftIndex","uninvert","increaseOrderForSuccessors","isSuccessor","first","second","visited","stack","pop","childIndex","amount","startingNode","tabuNode","newOrder","increasedOrders","queue","_loop2","shift","successor","compareToFromSame","assignment","currentLane","potentialAdjustmentValues","prevNameIsNull","prevTrack","idealLane","idealY","getIdealLanesAndCoords","compareByIdealLane","topLane","verticalAdjustment","minAdjustmentCost","Number","MAX_SAFE_INTEGER","moveBy","getVerticalAdjustmentCost","adjustVertically","colorSetName","base","nodeLeftX","nodeRightX","nodeXStart","nodeXEnd","rectXStart","c","co","featureXStart","featureXEnd","currentHighlight","trackWidth","yTop","yBottom","corners","rectangles","rect","filter","filterObjectByAttribute","trackMouseOver","trackMouseOut","trackDoubleClick","drawTrackCorners","sequencePosition","xCoordinate","attribute","item","compareCurvesByLineChanges","myTrackCurves","curve","xMiddle","content","listeners","innerHTML","addEventListener","changeTrackVisibility","this","each","nodeID","click","vgExtractNodes","vg","getComputedTextLength","vgExtractTracks","isCompletelyReverse","mapping","position","node_id","index2","vgExtractReads","myNodes","myTracks","myReads","extracted","nodeNames","_loop3","firstIndex","lastIndex","edit","offset","toString","parseInt","posWithinNode","from_length","finalNodeEdit","predecessorIndex","successorIndex","ZOOM_FACTOR","DataPositionFormRow","handleZoomIn","tubeMap","handleZoomOut","handleDownloadButton","svgN","svgData","XMLSerializer","serializeToString","svgBlob","Blob","svgUrl","URL","createObjectURL","downloadLink","createElement","href","download","body","appendChild","removeChild","react_default","reactstrap_es","inline","className","for","size","props","onChange","handleInputChange","distance","byNode","uploadInProgress","onClick","handleGoButton","disabled","handleGoLeft","index_es","icon","faStepBackward","faSearchPlus","faSearchMinus","handleGoRight","faStepForward","Component","MountedDataFormRow","xgFileDropdownOptions","xgSelectOptions","fileName","gbwtFileDropdownOptions","gbwtSelectOptions","gamFileDropdownOptions","gamSelectOptions","pathDropdownOptions","pathSelectOptions","pathName","Fragment","xgSelect","gbwtSelect","gamSelect","pathSelect","BACKEND_URL","window","location","host","MAX_UPLOAD_SIZE","FileUploadFormRow","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","onXgFileChange","file","xgFileInput","files","resetPathNames","handleFileUpload","showFileSizeAlert","setUploadInProgress","formData","FormData","xhr","XMLHttpRequest","responseType","onreadystatechange","readyState","status","response","getPathNames","open","send","onGbwtFileChange","gbwtFileInput","onGamFileChange","gamFileInput","React","createRef","accept","innerRef","ExampleSelectButtons","handleClick","dataOrigin","haploColor","readColor","setDataOrigin","setColorSetting","_this2","DATA_SOURCES","dataTypes","BUILT_IN","FILE_UPLOAD","MOUNTED_FILES","EXAMPLES","HeaderForm","state","xgFile","gbwtFile","gamFile","anchorTrackName","dataPath","dataType","fileSizeAlert","getMountedFilenames","_callee","json","regenerator_default","wrap","_context","prev","next","fetch","method","headers","Content-Type","sent","xgFiles","gbwtFiles","gamIndices","setState","includes","t0","stop","_callee2","isUploadedFile","_context2","pathNames","handleDataSourceChange","event","target","ds","useMountedPath","defaultPosition","fetchParams","setFetchParams","defineProperty","fileType","val","setUpWebsocket","ws","WebSocket","replace","onmessage","message","onclose","setTimeout","onerror","close","dataSourceDropdownOptions","mountedFilesFlag","uploadFilesFlag","examplesFlag","fluid","md","src","alt","components_MountedDataFormRow","components_FileUploadFormRow","isOpen","toggle","components_ExampleSelectButtons","components_DataPositionFormRow","TubeMap","params","clickableNodes","hideLegend","TubeMapContainer","isLoading","error","getRemoteTubeMapData","graph","gam","getExampleData","__webpack_require__","e","then","bind","inputTracks1","abrupt","inputTracks2","inputTracks3","inputTracks4","inputTracks5","k3138","readsFromStringToArray","demoReads","readsString","lines","prevProps","_this$state","components_TubeMap","colorMap","RadioRow","colorRadios","_ref","_ref2","slicedToArray","keyColor","valueColor","xs","check","checked","row","sm","rowHeading","VisualizationOptions","isOpenLegend","isOpenVisualizationOptions","toggleLegend","preventDefault","toggleVisOptions","_this$props","visOptions","toggleFlag","removeRedundantNodes","compressedView","components_RadioRow","App","toggleVisOptionFlag","flagName","objectSpread","components_HeaderForm","components_TubeMapContainer","CustomizationAccordion","ReactDOM","render","src_App_0"],"mappings":"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","file":"static/js/main.9d786e58.chunk.js","sourcesContent":["/* eslint no-param-reassign: \"off\" */\n/* eslint no-lonely-if: \"off\" */\n/* eslint no-prototype-builtins: \"off\" */\n/* eslint no-console: \"off\" */\n/* eslint no-continue: \"off\" */\n\n/* eslint max-len: \"off\" */\n/* eslint no-loop-func: \"off\" */\n/* eslint no-unused-vars: \"off\" */\n/* eslint no-return-assign: \"off\" */\nimport * as d3 from 'd3';\nimport 'd3-selection-multi';\n\nconst DEBUG = false;\n\nconst greys = [\n  '#d9d9d9',\n  '#bdbdbd',\n  '#969696',\n  '#737373',\n  '#525252',\n  '#252525',\n  '#000000'\n];\n\nconst blues = [\n  '#c6dbef',\n  '#9ecae1',\n  '#6baed6',\n  '#4292c6',\n  '#2171b5',\n  '#08519c',\n  '#08306b'\n];\n\nconst reds = [\n  '#fcbba1',\n  '#fc9272',\n  '#fb6a4a',\n  '#ef3b2c',\n  '#cb181d',\n  '#a50f15',\n  '#67000d'\n];\n\n// d3 category10\nconst plainColors = [\n  '#1f77b4',\n  '#ff7f0e',\n  '#2ca02c',\n  '#d62728',\n  '#9467bd',\n  '#8c564b',\n  '#e377c2',\n  '#7f7f7f',\n  '#bcbd22',\n  '#17becf'\n];\n\n// d3 category10\nconst lightColors = [\n  '#ABCCE3',\n  '#FFCFA5',\n  '#B0DBB0',\n  '#F0AEAE',\n  '#D7C6E6',\n  '#C6ABA5',\n  '#F4CCE8',\n  '#CFCFCF',\n  '#E6E6AC',\n  '#A8E7ED'\n];\n\nlet haplotypeColors = [];\nlet forwardReadColors = [];\nlet reverseReadColors = [];\nlet exonColors = [];\n\nlet svgID; // the (html-tag) ID of the svg\nlet svg; // the svg\nexport let zoom; // eslint-disable-line import/no-mutable-exports\nlet inputNodes = [];\nlet inputTracks = [];\nlet inputReads = [];\nlet nodes;\nlet tracks;\nlet reads;\nlet numberOfNodes;\nlet numberOfTracks;\nlet nodeMap; // maps node names to node indices\nlet nodesPerOrder;\nlet assignments = []; // contains info about lane assignments sorted by order\nlet extraLeft = []; // info whether nodes have to be moved further apart because of multiple 180° directional changes at the same horizontal order\nlet extraRight = []; // info whether nodes have to be moved further apart because of multiple 180° directional changes at the same horizontal order\nlet maxOrder; // horizontal order of the rightmost node\n\nconst config = {\n  mergeNodesFlag: true,\n  clickableNodesFlag: false,\n  showExonsFlag: false,\n  colorScheme: 0,\n  // Options for the width of sequence nodes:\n  // 0...scale node width linear with number of bases within node\n  // 1...scale node width with log2 of number of bases within node\n  // 2...scale node width with log10 of number of bases within node\n  nodeWidthOption: 0,\n  showReads: true,\n  showSoftClips: true,\n  haplotypeColors: 'greys',\n  forwardReadColors: 'reds',\n  reverseReadColors: 'blues',\n  exonColors: 'lightColors',\n  hideLegendFlag: false\n};\n\n// variables for storing info which can be directly translated into drawing instructions\nlet trackRectangles = [];\nlet trackCurves = [];\nlet trackCorners = [];\nlet trackVerticalRectangles = []; // stored separately from horizontal rectangles. This allows drawing them in a separate step -> avoids issues with wrong overlapping\nlet trackRectanglesStep3 = [];\n\nlet maxYCoordinate = 0;\nlet minYCoordinate = 0;\nlet maxXCoordinate = 0;\nlet trackForRuler;\n\nlet bed;\n\n// main function to call from outside\n// which starts the process of creating a tube map visualization\nexport function create(params) {\n  // mandatory parameters: svgID, nodes, tracks\n  // optional parameters: bed, clickableNodes, reads, showLegend\n  svgID = params.svgID;\n  svg = d3.select(params.svgID);\n  inputNodes = JSON.parse(JSON.stringify(params.nodes)); // deep copy\n  inputTracks = JSON.parse(JSON.stringify(params.tracks)); // deep copy\n  inputReads = params.reads || null;\n  bed = params.bed || null;\n  config.clickableNodesFlag = params.clickableNodes || false;\n  config.hideLegendFlag = params.hideLegend || false;\n  const tr = createTubeMap();\n  if (!config.hideLegendFlag) drawLegend(tr);\n}\n\n// moves a specific track to the top\nfunction moveTrackToFirstPosition(index) {\n  inputTracks.unshift(inputTracks[index]); // add element to beginning\n  inputTracks.splice(index + 1, 1); // remove 1 element from the middle\n  straightenTrack(0);\n}\n\n// straighten track given by index by inverting inverted nodes\n// only keep them inverted if this single track runs thrugh them in both directions\nfunction straightenTrack(index) {\n  let i;\n  let j;\n  const nodesToInvert = [];\n  let currentSequence;\n  let nodeName;\n\n  // find out which nodes should be inverted\n  currentSequence = inputTracks[index].sequence;\n  for (i = 0; i < currentSequence.length; i += 1) {\n    if (currentSequence[i].charAt(0) === '-') {\n      nodeName = currentSequence[i].substr(1);\n      if (\n        currentSequence.indexOf(nodeName) === -1 ||\n        currentSequence.indexOf(nodeName) > i\n      ) {\n        // only if this inverted node is no repeat\n        nodesToInvert.push(currentSequence[i].substr(1));\n      }\n    }\n  }\n\n  // invert nodes in the tracks' sequence\n  for (i = 0; i < inputTracks.length; i += 1) {\n    currentSequence = inputTracks[i].sequence;\n    for (j = 0; j < currentSequence.length; j += 1) {\n      if (currentSequence[j].charAt(0) !== '-') {\n        if (nodesToInvert.indexOf(currentSequence[j]) !== -1) {\n          currentSequence[j] = `-${currentSequence[j]}`;\n        }\n      } else if (nodesToInvert.indexOf(currentSequence[j].substr(1)) !== -1) {\n        currentSequence[j] = currentSequence[j].substr(1);\n      }\n    }\n  }\n\n  // invert the sequence within the nodes\n  inputNodes.forEach(node => {\n    if (nodesToInvert.indexOf(node.name) !== -1) {\n      node.seq = node.seq\n        .split('')\n        .reverse()\n        .join('');\n    }\n  });\n}\n\nexport function changeTrackVisibility(trackID) {\n  let i = 0;\n  while (i < inputTracks.length && inputTracks[i].id !== trackID) i += 1;\n  if (i < inputTracks.length) {\n    if (inputTracks[i].hasOwnProperty('hidden')) {\n      inputTracks[i].hidden = !inputTracks[i].hidden;\n    } else {\n      inputTracks[i].hidden = true;\n    }\n  }\n  createTubeMap();\n}\n\nexport function changeExonVisibility() {\n  config.showExonsFlag = !config.showExonsFlag;\n  createTubeMap();\n}\n\n// sets the flag for whether redundant nodes should be automatically removed or not\nexport function setMergeNodesFlag(value) {\n  if (config.mergeNodesFlag !== value) {\n    config.mergeNodesFlag = value;\n    svg = d3.select(svgID);\n    createTubeMap();\n  }\n}\n\n// sets the flag for whether read soft clips should be displayed or not\nexport function setSoftClipsFlag(value) {\n  if (config.showSoftClips !== value) {\n    config.showSoftClips = value;\n    svg = d3.select(svgID);\n    createTubeMap();\n  }\n}\n\n// sets the flag for whether reads should be displayed or not\nexport function setShowReadsFlag(value) {\n  if (config.showReads !== value) {\n    config.showReads = value;\n    svg = d3.select(svgID);\n    createTubeMap();\n  }\n}\n\nexport function setColorSet(trackType, colorSet) {\n  if (config[trackType] !== colorSet) {\n    config[trackType] = colorSet;\n    const tr = createTubeMap();\n    if (!config.hideLegendFlag) drawLegend(tr);\n  }\n}\n\n// sets which option should be used for calculating the node width from its sequence length\nexport function setNodeWidthOption(value) {\n  if (value === 0 || value === 1 || value === 2) {\n    if (config.nodeWidthOption !== value) {\n      config.nodeWidthOption = value;\n      if (svg !== undefined) {\n        svg = d3.select(svgID);\n        createTubeMap();\n      }\n    }\n  }\n}\n\n// main\nfunction createTubeMap() {\n  trackRectangles = [];\n  trackCurves = [];\n  trackCorners = [];\n  trackVerticalRectangles = [];\n  trackRectanglesStep3 = [];\n  assignments = [];\n  extraLeft = [];\n  extraRight = [];\n  maxYCoordinate = 0;\n  minYCoordinate = 0;\n  maxXCoordinate = 0;\n  trackForRuler = undefined;\n  svg = d3.select(svgID);\n  svg.selectAll('*').remove(); // clear svg for (re-)drawing\n\n  nodes = JSON.parse(JSON.stringify(inputNodes)); // deep copy (can add stuff to copy and leave original unchanged)\n  tracks = JSON.parse(JSON.stringify(inputTracks));\n  reads = JSON.parse(JSON.stringify(inputReads));\n\n  // early exit is necessary when visualization options such as colors are\n  // changed before any graph has been rendered\n  if (nodes.length === 0 || tracks.length === 0) return;\n\n  assignColorSets();\n\n  for (let i = tracks.length - 1; i >= 0; i -= 1) {\n    if (!tracks[i].hasOwnProperty('type')) {\n      // TODO: maybe remove \"haplo\"-property?\n      tracks[i].type = 'haplo';\n    }\n    if (tracks[i].hasOwnProperty('hidden')) {\n      if (tracks[i].hidden === true) {\n        tracks.splice(i, 1);\n      }\n    }\n    if (tracks[i] && tracks[i].hasOwnProperty('indexOfFirstBase')) {\n      trackForRuler = tracks[i].name;\n    }\n  }\n  if (tracks.length === 0) return;\n\n  nodeMap = generateNodeMap(nodes);\n  generateTrackIndexSequences(tracks);\n  if (reads && config.showReads) generateTrackIndexSequences(reads);\n  generateNodeWidth();\n\n  if (config.mergeNodesFlag) {\n    generateNodeSuccessors(); // requires indexSequence\n    generateNodeOrder(); // requires successors\n    if (reads && config.showReads) reverseReversedReads();\n    mergeNodes();\n    nodeMap = generateNodeMap(nodes);\n    generateNodeWidth();\n    generateTrackIndexSequences(tracks);\n    if (reads && config.showReads) generateTrackIndexSequences(reads);\n  }\n\n  numberOfNodes = nodes.length;\n  numberOfTracks = tracks.length;\n  generateNodeSuccessors();\n  generateNodeDegree();\n  if (DEBUG) console.log(`${numberOfNodes} nodes.`);\n  generateNodeOrder();\n  maxOrder = getMaxOrder();\n\n  // can cause problems when there is a reversed single track node\n  // OTOH, can solve problems with complex inversion patterns\n  // switchNodeOrientation();\n  // generateNodeOrder(nodes, tracks);\n  // maxOrder = getMaxOrder();\n\n  calculateTrackWidth(tracks);\n  generateLaneAssignment();\n\n  if (config.showExonsFlag === true && bed !== null) addTrackFeatures();\n  generateNodeXCoords();\n\n  if (reads && config.showReads) {\n    generateReadOnlyNodeAttributes();\n    reverseReversedReads();\n    generateTrackIndexSequences(reads);\n    placeReads();\n    tracks = tracks.concat(reads);\n  }\n\n  generateSVGShapesFromPath(nodes, tracks);\n  if (DEBUG) {\n    console.log('Tracks:');\n    console.log(tracks);\n    console.log('Nodes:');\n    console.log(nodes);\n    console.log('Lane assignment:');\n    console.log(assignments);\n  }\n  getImageDimensions();\n  alignSVG(nodes, tracks);\n  defineSVGPatterns();\n\n  drawTrackRectangles(trackRectangles);\n  drawTrackCurves();\n  drawReversalsByColor(trackCorners, trackVerticalRectangles);\n  drawTrackRectangles(trackRectanglesStep3);\n  drawTrackRectangles(trackRectangles, 'read');\n  drawTrackCurves('read');\n\n  // draw only those nodes which have coords assigned to them\n  const dNodes = removeUnusedNodes(nodes);\n  drawReversalsByColor(trackCorners, trackVerticalRectangles, 'read');\n  drawNodes(dNodes);\n  if (config.nodeWidthOption === 0) drawLabels(dNodes);\n  if (trackForRuler !== undefined) drawRuler();\n  if (config.nodeWidthOption === 0) drawMismatches(); // TODO: call this before drawLabels and fix d3 data/append/enter stuff\n  if (DEBUG) {\n    console.log(`number of tracks: ${numberOfTracks}`);\n    console.log(`number of nodes: ${numberOfNodes}`);\n  }\n  return tracks;\n}\n\n// generates attributes (node.y, node.contentHeight) for nodes without tracks, only reads\nfunction generateReadOnlyNodeAttributes() {\n  nodesPerOrder = [];\n  for (let i = 0; i <= maxOrder; i += 1) {\n    nodesPerOrder[i] = [];\n  }\n\n  const orderY = new Map();\n  nodes.forEach(node => {\n    if (node.hasOwnProperty('order') && node.hasOwnProperty('y')) {\n      setMapToMax(orderY, node.order, node.y + node.contentHeight);\n    }\n  });\n\n  // for order values where there is no node with haplotypes, orderY is calculated via tracks\n  tracks.forEach(track => {\n    if (track.type === 'haplo') {\n      track.path.forEach(step => {\n        setMapToMax(orderY, step.order, step.y + track.width);\n      });\n    }\n  });\n\n  nodes.forEach((node, i) => {\n    if (node.hasOwnProperty('order') && !node.hasOwnProperty('y')) {\n      node.y = orderY.get(node.order) + 25;\n      node.contentHeight = 0;\n      nodesPerOrder[node.order].push(i);\n    }\n  });\n}\n\nfunction setMapToMax(map, key, value) {\n  if (map.has(key)) {\n    map.set(key, Math.max(map.get(key), value));\n  } else {\n    map.set(key, value);\n  }\n}\n\n// add info about reads to nodes (incoming, outgoing and internal reads)\nfunction assignReadsToNodes() {\n  nodes.forEach(node => {\n    node.incomingReads = [];\n    node.outgoingReads = [];\n    node.internalReads = [];\n  });\n  reads.forEach((read, idx) => {\n    read.width = 7;\n    if (read.path.length === 1) {\n      nodes[read.path[0].node].internalReads.push(idx);\n    } else {\n      read.path.forEach((element, pathIdx) => {\n        if (pathIdx === 0) {\n          nodes[read.path[0].node].outgoingReads.push([idx, pathIdx]);\n        } else if (read.path[pathIdx].node !== null) {\n          nodes[read.path[pathIdx].node].incomingReads.push([idx, pathIdx]);\n        }\n      });\n    }\n  });\n}\n\nfunction removeNonPathNodesFromReads() {\n  reads.forEach(read => {\n    for (let i = read.sequence.length - 1; i >= 0; i -= 1) {\n      let nodeName = read.sequence[i];\n      if (nodeName.charAt(0) === '-') {\n        nodeName = nodeName.substr(1);\n      }\n      if (!nodeMap.has(nodeName) || nodes[nodeMap.get(nodeName)].degree === 0) {\n        read.sequence.splice(i, 1);\n      }\n    }\n  });\n}\n\n// calculate paths (incl. correct y coordinate) for all reads\nfunction placeReads() {\n  generateBasicPathsForReads();\n  assignReadsToNodes();\n\n  // sort nodes by order, then by y-coordinate\n  const sortedNodes = nodes.slice();\n  sortedNodes.sort(compareNodesByOrder);\n\n  // iterate over all nodes\n  sortedNodes.forEach(node => {\n    // sort incoming reads\n    node.incomingReads.sort(compareReadIncomingSegmentsByComingFrom);\n\n    // place incoming reads\n    let currentY = node.y + node.contentHeight;\n    const occupiedUntil = new Map();\n    node.incomingReads.forEach(readElement => {\n      reads[readElement[0]].path[readElement[1]].y = currentY;\n      setOccupiedUntil(\n        occupiedUntil,\n        reads[readElement[0]],\n        readElement[1],\n        currentY,\n        node\n      );\n      currentY += 7;\n    });\n    let maxY = currentY;\n\n    // sort outgoing reads\n    node.outgoingReads.sort(compareReadOutgoingSegmentsByGoingTo);\n\n    // place outgoing reads\n    const occupiedFrom = new Map();\n    currentY = node.y + node.contentHeight;\n    node.outgoingReads.forEach(readElement => {\n      // place in next lane\n      reads[readElement[0]].path[readElement[1]].y = currentY;\n      occupiedFrom.set(currentY, reads[readElement[0]].firstNodeOffset);\n      // if no conflicts\n      if (\n        !occupiedUntil.has(currentY) ||\n        occupiedUntil.get(currentY) + 1 < reads[readElement[0]].firstNodeOffset\n      ) {\n        currentY += 7;\n        maxY = Math.max(maxY, currentY);\n      } else {\n        // otherwise push down incoming reads to make place for outgoing Read\n        occupiedUntil.set(currentY, 0);\n        node.incomingReads.forEach(incReadElementIndices => {\n          const incRead = reads[incReadElementIndices[0]];\n          const incReadPathElement = incRead.path[incReadElementIndices[1]];\n          if (incReadPathElement.y >= currentY) {\n            incReadPathElement.y += 7;\n            setOccupiedUntil(\n              occupiedUntil,\n              incRead,\n              incReadElementIndices[1],\n              incReadPathElement.y,\n              node\n            );\n          }\n        });\n        currentY += 7;\n        maxY += 7;\n      }\n    });\n\n    // sort internal reads\n    node.internalReads.sort(compareInternalReads);\n\n    // place internal reads\n    node.internalReads.forEach(readIdx => {\n      const currentRead = reads[readIdx];\n      currentY = node.y + node.contentHeight;\n      while (\n        currentRead.firstNodeOffset < occupiedUntil.get(currentY) + 2 ||\n        currentRead.finalNodeCoverLength > occupiedFrom.get(currentY) - 3\n      ) {\n        currentY += 7;\n      }\n      currentRead.path[0].y = currentY;\n      occupiedUntil.set(currentY, currentRead.finalNodeCoverLength);\n      maxY = Math.max(maxY, currentY);\n    });\n\n    // adjust node height and move other nodes vertically down\n    const heightIncrease = maxY - node.y - node.contentHeight;\n    node.contentHeight += heightIncrease;\n    adjustVertically3(node, heightIncrease);\n  });\n\n  // place read segments which are without node\n  const bottomY = calculateBottomY();\n  const elementsWithoutNode = [];\n  reads.forEach((read, idx) => {\n    read.path.forEach((element, pathIdx) => {\n      if (!element.hasOwnProperty('y')) {\n        elementsWithoutNode.push({\n          readIndex: idx,\n          pathIndex: pathIdx,\n          previousY: reads[idx].path[pathIdx - 1].y\n        });\n      }\n    });\n  });\n  elementsWithoutNode.sort(compareNoNodeReadsByPreviousY);\n  elementsWithoutNode.forEach(element => {\n    const segment = reads[element.readIndex].path[element.pathIndex];\n    segment.y = bottomY[segment.order];\n    bottomY[segment.order] += reads[element.readIndex].width;\n  });\n\n  if (DEBUG) {\n    console.log('Reads:');\n    console.log(reads);\n  }\n}\n\n// keeps track of where reads end within nodes\nfunction setOccupiedUntil(map, read, pathIndex, y, node) {\n  if (pathIndex === read.path.length - 1) {\n    // last node of current read\n    map.set(y, read.finalNodeCoverLength);\n  } else {\n    // read covers the whole node\n    map.set(y, node.sequenceLength);\n  }\n}\n\n// compare read segments which are outside of nodes\n// by the y-coord of where they are coming from\nfunction compareNoNodeReadsByPreviousY(a, b) {\n  const segmentA = reads[a.readIndex].path[a.pathIndex];\n  const segmentB = reads[b.readIndex].path[b.pathIndex];\n  if (segmentA.order === segmentB.order) {\n    return a.previousY - b.previousY;\n  }\n  return segmentA.order - segmentB.order;\n}\n\n// compare read segments by where they are going to\nfunction compareReadOutgoingSegmentsByGoingTo(a, b) {\n  let pathIndexA = a[1];\n  let pathIndexB = b[1];\n  // let readA = reads[a[0]]\n  // let nodeIndexA = readA.path[pathIndexA].node;\n  let nodeA = nodes[reads[a[0]].path[pathIndexA].node];\n  let nodeB = nodes[reads[b[0]].path[pathIndexB].node];\n  while (nodeA !== null && nodeB !== null && nodeA === nodeB) {\n    if (pathIndexA < reads[a[0]].path.length - 1) {\n      pathIndexA += 1;\n      while (reads[a[0]].path[pathIndexA].node === null) pathIndexA += 1; // skip null nodes in path\n      nodeA = nodes[reads[a[0]].path[pathIndexA].node];\n    } else {\n      nodeA = null;\n    }\n    if (pathIndexB < reads[b[0]].path.length - 1) {\n      pathIndexB += 1;\n      while (reads[b[0]].path[pathIndexB].node === null) pathIndexB += 1; // skip null nodes in path\n      nodeB = nodes[reads[b[0]].path[pathIndexB].node];\n    } else {\n      nodeB = null;\n    }\n  }\n  if (nodeA !== null) {\n    if (nodeB !== null) return compareNodesByOrder(nodeA, nodeB);\n    return 1; // nodeB is null, nodeA not null\n  }\n  if (nodeB !== null) return -1; // nodeB not null, nodeA null\n  // both nodes are null -> both end in the same node\n  const beginDiff = reads[a[0]].firstNodeOffset - reads[b[0]].firstNodeOffset;\n  if (beginDiff !== 0) return beginDiff;\n  // break tie: both reads cover the same nodes and begin at the same position -> compare by endPosition\n  return reads[a[0]].finalNodeCoverLength - reads[b[0]].finalNodeCoverLength;\n}\n\n// compare read segments by (y-coord of) where they are coming from\nfunction compareReadIncomingSegmentsByComingFrom(a, b) {\n  // these boundary conditions avoid errors for incoming reads\n  // from inverted nodes (u-turns)\n  if (a[1] === 0) return -1;\n  if (b[1] === 0) return 1;\n\n  const pathA = reads[a[0]].path[a[1] - 1];\n  const pathB = reads[b[0]].path[b[1] - 1];\n  if (pathA.hasOwnProperty('y')) {\n    if (pathB.hasOwnProperty('y')) {\n      return pathA.y - pathB.y; // a and b have y-property\n    }\n    return -1; // only a has y-property\n  }\n  if (pathB.hasOwnProperty('y')) {\n    return 1; // only b has y-property\n  }\n  return compareReadIncomingSegmentsByComingFrom(\n    [a[0], a[1] - 1],\n    [b[0], b[1] - 1]\n  ); // neither has y-property\n}\n\n// compare 2 reads which are completely within a single node\nfunction compareInternalReads(idxA, idxB) {\n  const a = reads[idxA];\n  const b = reads[idxB];\n  // compare by first base within first node\n  if (a.firstNodeOffset < b.firstNodeOffset) return -1;\n  else if (a.firstNodeOffset > b.firstNodeOffset) return 1;\n\n  // compare by last base within last node\n  if (a.finalNodeCoverLength < b.finalNodeCoverLength) return -1;\n  else if (a.finalNodeCoverLength > b.finalNodeCoverLength) return 1;\n\n  return 0;\n}\n\n// determine biggest y-coordinate for each order-value\nfunction calculateBottomY() {\n  const bottomY = [];\n  for (let i = 0; i <= maxOrder; i += 1) {\n    bottomY.push(0);\n  }\n\n  nodes.forEach(node => {\n    bottomY[node.order] = Math.max(\n      bottomY[node.order],\n      node.y + node.contentHeight + 20\n    );\n  });\n\n  tracks.forEach(track => {\n    track.path.forEach(element => {\n      bottomY[element.order] = Math.max(\n        bottomY[element.order],\n        element.y + track.width\n      );\n    });\n  });\n  return bottomY;\n}\n\n// generate path-info for each read\n// containing order, node and orientation, but no concrete coordinates\nfunction generateBasicPathsForReads() {\n  let currentNodeIndex;\n  let currentNodeIsForward;\n  let currentNode;\n  let previousNode;\n  let previousNodeIsForward;\n  const isPositive = n => ((n = +n) || 1 / n) >= 0;\n\n  reads.forEach(read => {\n    // add info for start of track\n    currentNodeIndex = Math.abs(read.indexSequence[0]);\n    currentNodeIsForward = isPositive(read.indexSequence[0]);\n    currentNode = nodes[currentNodeIndex];\n\n    read.path = [];\n    read.path.push({\n      order: currentNode.order,\n      isForward: currentNodeIsForward,\n      node: currentNodeIndex\n    });\n\n    for (let i = 1; i < read.sequence.length; i += 1) {\n      previousNode = currentNode;\n      previousNodeIsForward = currentNodeIsForward;\n\n      currentNodeIndex = Math.abs(read.indexSequence[i]);\n      currentNodeIsForward = isPositive(read.indexSequence[i]);\n      currentNode = nodes[currentNodeIndex];\n\n      if (currentNode.order > previousNode.order) {\n        if (!previousNodeIsForward) {\n          // backward to forward at previous node\n          read.path.push({\n            order: previousNode.order,\n            isForward: true,\n            node: null\n          });\n        }\n        for (let j = previousNode.order + 1; j < currentNode.order; j += 1) {\n          // forward without nodes\n          read.path.push({ order: j, isForward: true, node: null });\n        }\n        if (!currentNodeIsForward) {\n          // forward to backward at current node\n          read.path.push({\n            order: currentNode.order,\n            isForward: true,\n            node: null\n          });\n          read.path.push({\n            order: currentNode.order,\n            isForward: false,\n            node: currentNodeIndex\n          });\n        } else {\n          // current Node forward\n          read.path.push({\n            order: currentNode.order,\n            isForward: true,\n            node: currentNodeIndex\n          });\n        }\n      } else if (currentNode.order < previousNode.order) {\n        if (previousNodeIsForward) {\n          // turnaround from fw to bw at previous node\n          read.path.push({\n            order: previousNode.order,\n            isForward: false,\n            node: null\n          });\n        }\n        for (let j = previousNode.order - 1; j > currentNode.order; j -= 1) {\n          // bachward without nodes\n          read.path.push({ order: j, isForward: false, node: null });\n        }\n        if (currentNodeIsForward) {\n          // backward to forward at current node\n          read.path.push({\n            order: currentNode.order,\n            isForward: false,\n            node: null\n          });\n          read.path.push({\n            order: currentNode.order,\n            isForward: true,\n            node: currentNodeIndex\n          });\n        } else {\n          // backward at current node\n          read.path.push({\n            order: currentNode.order,\n            isForward: false,\n            node: currentNodeIndex\n          });\n        }\n      } else {\n        if (currentNodeIsForward !== previousNodeIsForward) {\n          read.path.push({\n            order: currentNode.order,\n            isForward: currentNodeIsForward,\n            node: currentNodeIndex\n          });\n        } else {\n          read.path.push({\n            order: currentNode.order,\n            isForward: !currentNodeIsForward,\n            node: null\n          });\n          read.path.push({\n            order: currentNode.order,\n            isForward: currentNodeIsForward,\n            node: currentNodeIndex\n          });\n        }\n      }\n    }\n  });\n}\n\n// reverse reads which are reversed\nfunction reverseReversedReads() {\n  reads.forEach(read => {\n    let pos = 0;\n    while (pos < read.sequence.length && read.sequence[pos].charAt(0) === '-') {\n      pos += 1;\n    }\n    if (pos === read.sequence.length) {\n      // completely reversed read\n      read.is_reverse = true;\n      read.sequence = read.sequence.reverse(); // invert sequence\n      for (let i = 0; i < read.sequence.length; i += 1) {\n        read.sequence[i] = read.sequence[i].substr(1); // remove '-'\n      }\n\n      read.sequenceNew = read.sequenceNew.reverse(); // invert sequence\n      for (let i = 0; i < read.sequenceNew.length; i += 1) {\n        read.sequenceNew[i].nodeName = read.sequenceNew[i].nodeName.substr(1); // remove '-'\n        const nodeWidth =\n          nodes[nodeMap.get(read.sequenceNew[i].nodeName)].width;\n        read.sequenceNew[i].mismatches.forEach(mm => {\n          if (mm.type === 'insertion') {\n            mm.pos = nodeWidth - mm.pos;\n            mm.seq = getReverseComplement(mm.seq);\n          } else if (mm.type === 'deletion') {\n            mm.pos = nodeWidth - mm.pos - mm.length;\n          } else if (mm.type === 'substitution') {\n            mm.pos = nodeWidth - mm.pos - mm.seq.length;\n            mm.seq = getReverseComplement(mm.seq);\n          }\n          if (mm.hasOwnProperty('seq')) {\n            mm.seq = mm.seq\n              .split('')\n              .reverse()\n              .join('');\n          }\n        });\n      }\n\n      // adjust firstNodeOffset and finalNodeCoverLength\n      const temp = read.firstNodeOffset;\n      let seqLength = nodes[nodeMap.get(read.sequence[0])].sequenceLength;\n      read.firstNodeOffset = seqLength - read.finalNodeCoverLength;\n      seqLength =\n        nodes[nodeMap.get(read.sequence[read.sequence.length - 1])]\n          .sequenceLength;\n      read.finalNodeCoverLength = seqLength - temp;\n    }\n  });\n}\n\nfunction getReverseComplement(s) {\n  let result = '';\n  for (let i = s.length - 1; i >= 0; i -= 1) {\n    switch (s.charAt(i)) {\n      case 'A':\n        result += 'T';\n        break;\n      case 'T':\n        result += 'A';\n        break;\n      case 'C':\n        result += 'G';\n        break;\n      case 'G':\n        result += 'C';\n        break;\n      default:\n        result += 'N';\n    }\n  }\n  return result;\n}\n\n// for each track: generate sequence of node indices from seq. of node names\nfunction generateTrackIndexSequencesNEW(tracksOrReads) {\n  tracksOrReads.forEach(track => {\n    track.indexSequence = [];\n    track.sequence.forEach(edit => {\n      if (edit.nodeName.charAt(0) === '-') {\n        track.indexSequence.push(-nodeMap.get(edit.nodeName.substr(1)));\n      } else {\n        track.indexSequence.push(nodeMap.get(edit.nodeName));\n      }\n    });\n  });\n}\n\n// for each track: generate sequence of node indices from seq. of node names\nfunction generateTrackIndexSequences(tracksOrReads) {\n  tracksOrReads.forEach(track => {\n    track.indexSequence = [];\n    track.sequence.forEach(nodeName => {\n      if (nodeName.charAt(0) === '-') {\n        track.indexSequence.push(-nodeMap.get(nodeName.substr(1)));\n      } else {\n        track.indexSequence.push(nodeMap.get(nodeName));\n      }\n    });\n  });\n}\n\n// remove nodes with no tracks moving through them to avoid d3.js errors\nfunction removeUnusedNodes(allNodes) {\n  const dNodes = allNodes.slice(0);\n  let i;\n  for (i = dNodes.length - 1; i >= 0; i -= 1) {\n    if (!dNodes[i].hasOwnProperty('x')) {\n      dNodes.splice(i, 1);\n    }\n  }\n  return dNodes;\n}\n\n// get the minimum and maximum coordinates used in the image to calculate image dimensions\nfunction getImageDimensions() {\n  maxXCoordinate = -99;\n  minYCoordinate = 99;\n  maxYCoordinate = -99;\n\n  nodes.forEach(node => {\n    if (node.hasOwnProperty('x')) {\n      maxXCoordinate = Math.max(maxXCoordinate, node.x + 20 + node.pixelWidth);\n    }\n    if (node.hasOwnProperty('y')) {\n      minYCoordinate = Math.min(minYCoordinate, node.y - 10);\n      maxYCoordinate = Math.max(\n        maxYCoordinate,\n        node.y + node.contentHeight + 10\n      );\n    }\n  });\n\n  tracks.forEach(track => {\n    track.path.forEach(segment => {\n      maxYCoordinate = Math.max(maxYCoordinate, segment.y + track.width);\n      minYCoordinate = Math.min(minYCoordinate, segment.y);\n    });\n  });\n}\n\n// align visualization to the top and left within svg and resize svg to correct size\n// enable zooming and panning\nfunction alignSVG() {\n  svg.attr('height', maxYCoordinate - minYCoordinate + 50);\n  svg.attr(\n    'width',\n    document.getElementById(svgID.substring(1)).parentNode.offsetWidth\n  );\n\n  function zoomed() {\n    const transform = d3.event.transform;\n    // vertical adjustment so that top of graph is at top of svg\n    // otherwise would violate translateExtent, which leads to graph \"jumping\" on next pan\n    transform.y = (25 - minYCoordinate) * transform.k;\n    svg.attr('transform', transform);\n    const svg2 = d3.select(svgID);\n    // adjust height, so that vertical scroll bar is shown when necessary\n    svg2.attr(\n      'height',\n      (maxYCoordinate - minYCoordinate + 50) * d3.event.transform.k\n    );\n    // adjust width to compensate for verical scroll bar appearing\n    svg2.attr('width', document.getElementById('tubeMapSVG').clientWidth);\n  }\n\n  const minZoom = Math.min(\n    1,\n    document.getElementById(svgID.substring(1)).parentNode.offsetWidth /\n      (maxXCoordinate + 10)\n  );\n  zoom = d3\n    .zoom()\n    .scaleExtent([minZoom, 8])\n    .translateExtent([\n      [-1, minYCoordinate - 25],\n      [maxXCoordinate + 2, maxYCoordinate + 25]\n    ])\n    .on('zoom', zoomed);\n\n  svg = svg\n    .call(zoom)\n    .on('dblclick.zoom', null)\n    .append('g');\n\n  // translate to correct position on initial draw\n  const containerWidth = document.getElementById(svgID.substring(1)).parentNode\n    .offsetWidth;\n  const xOffset =\n    maxXCoordinate + 10 < containerWidth\n      ? (containerWidth - maxXCoordinate - 10) / 2\n      : 0;\n  d3.select(svgID).call(\n    zoom.transform,\n    d3.zoomIdentity.translate(xOffset, 25 - minYCoordinate)\n  );\n}\n\nexport function zoomBy(zoomFactor) {\n  const minZoom = Math.min(\n    1,\n    document.getElementById(svgID.substring(1)).parentNode.offsetWidth /\n      (maxXCoordinate + 10)\n  );\n  const maxZoom = 8;\n  const width = document.getElementById(svgID.substring(1)).parentElement\n    .clientWidth;\n\n  const transform = d3.zoomTransform(d3.select(svgID).node());\n  const translateK = Math.min(\n    maxZoom,\n    Math.max(transform.k * zoomFactor, minZoom)\n  );\n  let translateX =\n    width / 2.0 - ((width / 2.0 - transform.x) * translateK) / transform.k;\n  translateX = Math.min(translateX, 1 * translateK);\n  translateX = Math.max(translateX, width - (maxXCoordinate + 2) * translateK);\n  const translateY = (25 - minYCoordinate) * translateK;\n  d3.select(svgID)\n    .transition()\n    .duration(750)\n    .call(\n      zoom.transform,\n      d3.zoomIdentity.translate(translateX, translateY).scale(translateK)\n    );\n}\n\n// map node names to node indices\nfunction generateNodeMap() {\n  nodeMap = new Map();\n  nodes.forEach((node, index) => {\n    nodeMap.set(node.name, index);\n  });\n  return nodeMap;\n}\n\n// adds a successor-array to each node containing the indices of the nodes coming directly after the current node\nfunction generateNodeSuccessors() {\n  let current;\n  let follower;\n\n  nodes.forEach(node => {\n    node.successors = [];\n    node.predecessors = [];\n  });\n\n  tracks.forEach(track => {\n    for (let i = 0; i < track.indexSequence.length - 1; i += 1) {\n      current = Math.abs(track.indexSequence[i]);\n      follower = Math.abs(track.indexSequence[i + 1]);\n      if (nodes[current].successors.indexOf(follower) === -1) {\n        nodes[current].successors.push(follower);\n      }\n      if (nodes[follower].predecessors.indexOf(current) === -1) {\n        nodes[follower].predecessors.push(current);\n      }\n    }\n  });\n\n  if (reads && config.showReads) {\n    reads.forEach(track => {\n      for (let i = 0; i < track.indexSequence.length - 1; i += 1) {\n        current = Math.abs(track.indexSequence[i]);\n        follower = Math.abs(track.indexSequence[i + 1]);\n        if (nodes[current].successors.indexOf(follower) === -1) {\n          nodes[current].successors.push(follower);\n        }\n        if (nodes[follower].predecessors.indexOf(current) === -1) {\n          nodes[follower].predecessors.push(current);\n        }\n      }\n    });\n  }\n}\n\nfunction generateNodeOrderOfSingleTrack(sequence) {\n  let forwardOrder = 0;\n  let backwardOrder = 0;\n  let currentNode;\n  let minOrder = 0;\n\n  sequence.forEach(nodeIndex => {\n    if (nodeIndex < 0) {\n      currentNode = nodes[Math.abs(nodeIndex)];\n      if (!currentNode.hasOwnProperty('order')) {\n        currentNode.order = backwardOrder;\n      }\n      if (currentNode.order < minOrder) minOrder = currentNode.order;\n      forwardOrder = currentNode.order;\n      backwardOrder = currentNode.order - 1;\n    } else {\n      currentNode = nodes[nodeIndex];\n      if (!currentNode.hasOwnProperty('order')) {\n        currentNode.order = forwardOrder;\n      }\n      forwardOrder = currentNode.order + 1;\n      backwardOrder = currentNode.order;\n    }\n  });\n  if (minOrder < 0) {\n    increaseOrderForAllNodes(-minOrder);\n  }\n}\n\n// calculate the order-value of nodes contained in sequence which are to the left of the first node which already has an order-value\nfunction generateNodeOrderTrackBeginning(sequence) {\n  let anchorIndex = 0;\n  let currentOrder;\n  let currentNode;\n  let minOrder = 0;\n  let increment;\n\n  while (\n    anchorIndex < sequence.length &&\n    !nodes[Math.abs(sequence[anchorIndex])].hasOwnProperty('order')\n  ) {\n    anchorIndex += 1; // anchor = first node in common with existing graph\n  }\n  if (anchorIndex >= sequence.length) {\n    return null;\n  }\n\n  if (sequence[anchorIndex] >= 0) {\n    // regular node\n    currentOrder = nodes[sequence[anchorIndex]].order - 1;\n    increment = -1;\n  } else {\n    // reverse node\n    currentOrder = nodes[-sequence[anchorIndex]].order + 1;\n    increment = 1;\n  }\n\n  for (let j = anchorIndex - 1; j >= 0; j -= 1) {\n    // assign order to nodes which are left of anchor node\n    currentNode = nodes[Math.abs(sequence[j])];\n    if (!currentNode.hasOwnProperty('order')) {\n      currentNode.order = currentOrder;\n      minOrder = Math.min(minOrder, currentOrder);\n      currentOrder += increment;\n    }\n  }\n\n  if (minOrder < 0) {\n    increaseOrderForAllNodes(-minOrder);\n  }\n  return anchorIndex;\n}\n\n// generate global sequence of nodes from left to right, starting with first track and adding other tracks sequentially\nfunction generateNodeOrder() {\n  let modifiedSequence;\n  let currentOrder;\n  let currentNode;\n  let rightIndex;\n  let leftIndex;\n  let minOrder = 0;\n  let tracksAndReads;\n  if (reads && config.showReads) tracksAndReads = tracks.concat(reads);\n  else tracksAndReads = tracks;\n\n  nodes.forEach(node => {\n    delete node.order;\n  });\n\n  generateNodeOrderOfSingleTrack(tracks[0].indexSequence); // calculate order values for all nodes of the first track\n\n  for (let i = 1; i < tracksAndReads.length; i += 1) {\n    if (DEBUG) console.log(`generating order for track ${i + 1}`);\n    rightIndex = generateNodeOrderTrackBeginning(\n      tracksAndReads[i].indexSequence\n    ); // calculate order values for all nodes until the first anchor\n    if (rightIndex === null) {\n      if (tracksAndReads[i].type === 'haplo') {\n        generateNodeOrderOfSingleTrack(tracksAndReads[i].indexSequence);\n      } else {\n        tracksAndReads.splice(i, 1);\n        reads.splice(i - tracks.length, 1);\n        i -= 1;\n      }\n      continue;\n    }\n    modifiedSequence = uninvert(tracksAndReads[i].indexSequence);\n\n    while (rightIndex < modifiedSequence.length) {\n      // move right until the end of the sequence\n      // find next anchor node\n      leftIndex = rightIndex;\n      rightIndex += 1;\n      while (\n        rightIndex < modifiedSequence.length &&\n        !nodes[modifiedSequence[rightIndex]].hasOwnProperty('order')\n      ) {\n        rightIndex += 1;\n      }\n\n      if (rightIndex < modifiedSequence.length) {\n        // middle segment between two anchors\n        currentOrder = nodes[modifiedSequence[leftIndex]].order + 1; // start with order value of leftAnchor + 1\n        for (let j = leftIndex + 1; j < rightIndex; j += 1) {\n          nodes[modifiedSequence[j]].order = currentOrder; // assign order values\n          currentOrder += 1;\n        }\n\n        if (\n          nodes[modifiedSequence[rightIndex]].order >\n          nodes[modifiedSequence[leftIndex]].order\n        ) {\n          // if order-value of left anchor < order-value of right anchor\n          if (nodes[modifiedSequence[rightIndex]].order < currentOrder) {\n            // and the right anchor now has a lower order-value than our newly added nodes\n            increaseOrderForSuccessors(\n              modifiedSequence[rightIndex],\n              modifiedSequence[rightIndex - 1],\n              currentOrder\n            );\n          }\n        } else {\n          // potential node reversal: check for ordering conflict, if no conflict found move node at rightIndex further to the right in order to not create a track reversal\n          if (\n            tracksAndReads[i].indexSequence[rightIndex] >= 0 &&\n            !isSuccessor(\n              modifiedSequence[rightIndex],\n              modifiedSequence[leftIndex]\n            )\n          ) {\n            // no real reversal\n            increaseOrderForSuccessors(\n              modifiedSequence[rightIndex],\n              modifiedSequence[rightIndex - 1],\n              currentOrder\n            );\n          } else {\n            // real reversal\n            if (\n              tracksAndReads[i].sequence[leftIndex] < 0 ||\n              (nodes[modifiedSequence[leftIndex + 1]].degree < 2 &&\n                nodes[modifiedSequence[rightIndex]].order <\n                  nodes[modifiedSequence[leftIndex]].order)\n            ) {\n              currentOrder = nodes[modifiedSequence[leftIndex]].order - 1; // start with order value of leftAnchor - 1\n              for (let j = leftIndex + 1; j < rightIndex; j += 1) {\n                nodes[modifiedSequence[j]].order = currentOrder; // assign order values\n                currentOrder -= 1;\n              }\n            }\n          }\n        }\n      } else {\n        // right segment to the right of last anchor\n        if (tracksAndReads[i].sequence[leftIndex] >= 0) {\n          // elongate towards the right\n          currentOrder = nodes[modifiedSequence[leftIndex]].order + 1;\n          for (let j = leftIndex + 1; j < modifiedSequence.length; j += 1) {\n            currentNode = nodes[modifiedSequence[j]];\n            if (!currentNode.hasOwnProperty('order')) {\n              currentNode.order = currentOrder;\n              currentOrder += 1;\n            }\n          }\n        } else {\n          // elongate towards the left\n          currentOrder = nodes[modifiedSequence[leftIndex]].order - 1;\n          for (let j = leftIndex + 1; j < modifiedSequence.length; j += 1) {\n            currentNode = nodes[modifiedSequence[j]];\n            if (!currentNode.hasOwnProperty('order')) {\n              currentNode.order = currentOrder;\n              minOrder = Math.min(minOrder, currentOrder);\n              currentOrder -= 1;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  // adjust all nodes if necessary, so that no order<0\n  if (minOrder < 0) increaseOrderForAllNodes(-minOrder);\n}\n\nfunction isSuccessor(first, second) {\n  const visited = new Array(numberOfNodes).fill(false);\n  const stack = [];\n  stack.push(first);\n  visited[first] = true;\n  while (stack.length > 0) {\n    const current = stack.pop();\n    if (current === second) return true;\n    for (let i = 0; i < nodes[current].successors.length; i += 1) {\n      const childIndex = nodes[current].successors[i];\n      if (!visited[childIndex]) {\n        visited[childIndex] = true;\n        stack.push(childIndex);\n      }\n    }\n  }\n  return false;\n}\n\n// get order number of the rightmost node\nfunction getMaxOrder() {\n  let max = -1;\n  nodes.forEach(node => {\n    if (node.hasOwnProperty('order') && node.order > max) max = node.order;\n  });\n  return max;\n}\n\n// generates sequence keeping the order but switching all reversed (negative) nodes to forward nodes\nfunction uninvert(sequence) {\n  const result = [];\n  for (let i = 0; i < sequence.length; i += 1) {\n    if (sequence[i] >= 0) {\n      result.push(sequence[i]);\n    } else {\n      result.push(-sequence[i]);\n    }\n  }\n  return result;\n}\n\n// increases the order-value of all nodes by amount\nfunction increaseOrderForAllNodes(amount) {\n  nodes.forEach(node => {\n    if (node.hasOwnProperty('order')) node.order += amount;\n  });\n}\n\n// increases the order-value for currentNode and (if necessary) successor nodes recursively\nfunction increaseOrderForSuccessors(startingNode, tabuNode, newOrder) {\n  const increasedOrders = new Map();\n  const queue = [];\n  queue.push([startingNode, newOrder]);\n\n  while (queue.length > 0) {\n    const current = queue.shift();\n    const currentNode = current[0];\n    const currentOrder = current[1];\n\n    if (\n      nodes[currentNode].hasOwnProperty('order') &&\n      nodes[currentNode].order < currentOrder\n    ) {\n      if (\n        !increasedOrders.has(currentNode) ||\n        increasedOrders.get(currentNode) < currentOrder\n      ) {\n        increasedOrders.set(currentNode, currentOrder);\n        nodes[currentNode].successors.forEach(successor => {\n          if (\n            nodes[successor].order > nodes[currentNode].order &&\n            successor !== tabuNode\n          ) {\n            // only increase order of successors if they lie to the right of the currentNode (not for repeats/translocations)\n            queue.push([successor, currentOrder + 1]);\n          }\n        });\n        if (currentNode !== startingNode) {\n          nodes[currentNode].predecessors.forEach(predecessor => {\n            if (\n              nodes[predecessor].order > currentNode.order &&\n              predecessor !== tabuNode\n            ) {\n              // only increase order of predecessors if they lie to the right of the currentNode (not for repeats/translocations)\n              queue.push([predecessor, currentOrder + 1]);\n            }\n          });\n        }\n      }\n    }\n  }\n\n  increasedOrders.forEach((value, key) => {\n    nodes[key].order = value;\n  });\n}\n\n// calculates the node degree: the number of tracks passing through the node / the node height\nfunction generateNodeDegree() {\n  nodes.forEach(node => {\n    node.tracks = [];\n  });\n\n  tracks.forEach(track => {\n    track.indexSequence.forEach(nodeIndex => {\n      nodes[Math.abs(nodeIndex)].tracks.push(track.id);\n    });\n  });\n\n  nodes.forEach(node => {\n    if (node.hasOwnProperty('tracks')) node.degree = node.tracks.length;\n  });\n}\n\n// if more tracks pass through a specific node in reverse direction than in\n// regular direction, switch its orientation\n// (does not apply to the first track's nodes, these are always oriented as\n// dictated by the first track)\nfunction switchNodeOrientation() {\n  const toSwitch = new Map();\n  let nodeName;\n  let prevNode;\n  let nextNode;\n  let currentNode;\n\n  for (let i = 1; i < tracks.length; i += 1) {\n    for (let j = 0; j < tracks[i].sequence.length; j += 1) {\n      nodeName = tracks[i].sequence[j];\n      if (nodeName.charAt(0) === '-') nodeName = nodeName.substr(1);\n      currentNode = nodes[nodeMap.get(nodeName)];\n      if (tracks[0].sequence.indexOf(nodeName) === -1) {\n        // do not change orientation for nodes which are part of the pivot track\n        if (j > 0) {\n          if (tracks[i].sequence[j - 1].charAt(0) !== '-') {\n            prevNode = nodes[nodeMap.get(tracks[i].sequence[j - 1])];\n          } else {\n            prevNode = nodes[nodeMap.get(tracks[i].sequence[j - 1].substr(1))];\n          }\n        }\n        if (j < tracks[i].sequence.length - 1) {\n          if (tracks[i].sequence[j + 1].charAt(0) !== '-') {\n            nextNode = nodes[nodeMap.get(tracks[i].sequence[j + 1])];\n          } else {\n            nextNode = nodes[nodeMap.get(tracks[i].sequence[j + 1].substr(1))];\n          }\n        }\n        if (\n          (j === 0 || prevNode.order < currentNode.order) &&\n          (j === tracks[i].sequence.length - 1 ||\n            currentNode.order < nextNode.order)\n        ) {\n          if (!toSwitch.has(nodeName)) toSwitch.set(nodeName, 0);\n          if (tracks[i].sequence[j].charAt(0) === '-') {\n            toSwitch.set(nodeName, toSwitch.get(nodeName) + 1);\n          } else {\n            toSwitch.set(nodeName, toSwitch.get(nodeName) - 1);\n          }\n        }\n        if (\n          (j === 0 || prevNode.order > currentNode.order) &&\n          (j === tracks[i].sequence.length - 1 ||\n            currentNode.order > nextNode.order)\n        ) {\n          if (!toSwitch.has(nodeName)) toSwitch.set(nodeName, 0);\n          if (tracks[i].sequence[j].charAt(0) === '-') {\n            toSwitch.set(nodeName, toSwitch.get(nodeName) - 1);\n          } else {\n            toSwitch.set(nodeName, toSwitch.get(nodeName) + 1);\n          }\n        }\n      }\n    }\n  }\n\n  tracks.forEach((track, trackIndex) => {\n    track.sequence.forEach((node, nodeIndex) => {\n      nodeName = node;\n      if (nodeName.charAt(0) === '-') nodeName = nodeName.substr(1);\n      if (toSwitch.has(nodeName) && toSwitch.get(nodeName) > 0) {\n        if (node.charAt(0) === '-') {\n          tracks[trackIndex].sequence[nodeIndex] = node.substr(1);\n        } else {\n          tracks[trackIndex].sequence[nodeIndex] = `-${node}`;\n        }\n      }\n    });\n  });\n\n  // invert the sequence within the nodes\n  toSwitch.forEach((value, key) => {\n    if (value > 0) {\n      currentNode = nodeMap.get(key);\n      nodes[currentNode].seq = nodes[currentNode].seq\n        .split('')\n        .reverse()\n        .join('');\n    }\n  });\n}\n\n// calculates the concrete values for the nodes' x-coordinates\nfunction generateNodeXCoords() {\n  let currentX = 0;\n  let nextX = 20;\n  let currentOrder = -1;\n  const sortedNodes = nodes.slice();\n  sortedNodes.sort(compareNodesByOrder);\n  const extra = calculateExtraSpace();\n\n  sortedNodes.forEach(node => {\n    if (node.hasOwnProperty('order')) {\n      if (node.order > currentOrder) {\n        currentOrder = node.order;\n        currentX = nextX + 10 * extra[node.order];\n      }\n      node.x = currentX;\n      nextX = Math.max(nextX, currentX + 40 + node.pixelWidth);\n    }\n  });\n}\n\n// calculates additional horizontal space needed between two nodes\n// two neighboring nodes have to be moved further apart if there is a lot going on in between them\n// -> edges turning to vertical orientation should not overlap\nfunction calculateExtraSpace() {\n  const leftSideEdges = [];\n  const rightSideEdges = [];\n  const extra = [];\n\n  for (let i = 0; i <= maxOrder; i += 1) {\n    leftSideEdges.push(0);\n    rightSideEdges.push(0);\n  }\n\n  tracks.forEach(track => {\n    for (let i = 1; i < track.path.length; i += 1) {\n      if (track.path[i].order === track.path[i - 1].order) {\n        // repeat or translocation\n        if (track.path[i].isForward === true) {\n          leftSideEdges[track.path[i].order] += 1;\n        } else {\n          rightSideEdges[track.path[i].order] += 1;\n        }\n      }\n    }\n  });\n\n  extra.push(Math.max(0, leftSideEdges[0] - 1));\n  for (let i = 1; i <= maxOrder; i += 1) {\n    extra.push(\n      Math.max(0, leftSideEdges[i] - 1) + Math.max(0, rightSideEdges[i - 1] - 1)\n    );\n  }\n  return extra;\n}\n\n// create and fill assignment-variable, which contains info about tracks and lanes for each order-value\nfunction generateLaneAssignment() {\n  let segmentNumber;\n  let currentNodeIndex;\n  let currentNodeIsForward;\n  let currentNode;\n  let previousNode;\n  let previousNodeIsForward;\n  const prevSegmentPerOrderPerTrack = [];\n  const isPositive = n => ((n = +n) || 1 / n) >= 0;\n\n  // create empty variables\n  for (let i = 0; i <= maxOrder; i += 1) {\n    assignments[i] = [];\n    prevSegmentPerOrderPerTrack[i] = [];\n    for (let j = 0; j < numberOfTracks; j += 1) {\n      prevSegmentPerOrderPerTrack[i][j] = null;\n    }\n  }\n\n  tracks.forEach((track, trackNo) => {\n    // add info for start of track\n    currentNodeIndex = Math.abs(track.indexSequence[0]);\n    currentNodeIsForward = isPositive(track.indexSequence[0]);\n    currentNode = nodes[currentNodeIndex];\n\n    track.path = [];\n    track.path.push({\n      order: currentNode.order,\n      lane: null,\n      isForward: currentNodeIsForward,\n      node: currentNodeIndex\n    });\n    addToAssignment(\n      currentNode.order,\n      currentNodeIndex,\n      trackNo,\n      0,\n      prevSegmentPerOrderPerTrack\n    );\n\n    segmentNumber = 1;\n    for (let i = 1; i < track.sequence.length; i += 1) {\n      previousNode = currentNode;\n      previousNodeIsForward = currentNodeIsForward;\n\n      currentNodeIndex = Math.abs(track.indexSequence[i]);\n      currentNodeIsForward = isPositive(track.indexSequence[i]);\n      currentNode = nodes[currentNodeIndex];\n\n      if (currentNode.order > previousNode.order) {\n        if (!previousNodeIsForward) {\n          // backward to forward at previous node\n          track.path.push({\n            order: previousNode.order,\n            lane: null,\n            isForward: true,\n            node: null\n          });\n          addToAssignment(\n            previousNode.order,\n            null,\n            trackNo,\n            segmentNumber,\n            prevSegmentPerOrderPerTrack\n          );\n          segmentNumber += 1;\n        }\n        for (let j = previousNode.order + 1; j < currentNode.order; j += 1) {\n          // forward without nodes\n          track.path.push({\n            order: j,\n            lane: null,\n            isForward: true,\n            node: null\n          });\n          addToAssignment(\n            j,\n            null,\n            trackNo,\n            segmentNumber,\n            prevSegmentPerOrderPerTrack\n          );\n          segmentNumber += 1;\n        }\n        if (!currentNodeIsForward) {\n          // forward to backward at current node\n          track.path.push({\n            order: currentNode.order,\n            lane: null,\n            isForward: true,\n            node: null\n          });\n          addToAssignment(\n            currentNode.order,\n            null,\n            trackNo,\n            segmentNumber,\n            prevSegmentPerOrderPerTrack\n          );\n          segmentNumber += 1;\n          track.path.push({\n            order: currentNode.order,\n            lane: null,\n            isForward: false,\n            node: currentNodeIndex\n          });\n          addToAssignment(\n            currentNode.order,\n            currentNodeIndex,\n            trackNo,\n            segmentNumber,\n            prevSegmentPerOrderPerTrack\n          );\n          segmentNumber += 1;\n        } else {\n          // current Node forward\n          track.path.push({\n            order: currentNode.order,\n            lane: null,\n            isForward: true,\n            node: currentNodeIndex\n          });\n          addToAssignment(\n            currentNode.order,\n            currentNodeIndex,\n            trackNo,\n            segmentNumber,\n            prevSegmentPerOrderPerTrack\n          );\n          segmentNumber += 1;\n        }\n      } else if (currentNode.order < previousNode.order) {\n        if (previousNodeIsForward) {\n          // turnaround from fw to bw at previous node\n          track.path.push({\n            order: previousNode.order,\n            lane: null,\n            isForward: false,\n            node: null\n          });\n          addToAssignment(\n            previousNode.order,\n            null,\n            trackNo,\n            segmentNumber,\n            prevSegmentPerOrderPerTrack\n          );\n          segmentNumber += 1;\n        }\n        for (let j = previousNode.order - 1; j > currentNode.order; j -= 1) {\n          // bachward without nodes\n          track.path.push({\n            order: j,\n            lane: null,\n            isForward: false,\n            node: null\n          });\n          addToAssignment(\n            j,\n            null,\n            trackNo,\n            segmentNumber,\n            prevSegmentPerOrderPerTrack\n          );\n          segmentNumber += 1;\n        }\n        if (currentNodeIsForward) {\n          // backward to forward at current node\n          track.path.push({\n            order: currentNode.order,\n            lane: null,\n            isForward: false,\n            node: null\n          });\n          addToAssignment(\n            currentNode.order,\n            null,\n            trackNo,\n            segmentNumber,\n            prevSegmentPerOrderPerTrack\n          );\n          segmentNumber += 1;\n          track.path.push({\n            order: currentNode.order,\n            lane: null,\n            isForward: true,\n            node: currentNodeIndex\n          });\n          addToAssignment(\n            currentNode.order,\n            currentNodeIndex,\n            trackNo,\n            segmentNumber,\n            prevSegmentPerOrderPerTrack\n          );\n          segmentNumber += 1;\n        } else {\n          // backward at current node\n          track.path.push({\n            order: currentNode.order,\n            lane: null,\n            isForward: false,\n            node: currentNodeIndex\n          });\n          addToAssignment(\n            currentNode.order,\n            currentNodeIndex,\n            trackNo,\n            segmentNumber,\n            prevSegmentPerOrderPerTrack\n          );\n          segmentNumber += 1;\n        }\n      } else {\n        if (currentNodeIsForward !== previousNodeIsForward) {\n          track.path.push({\n            order: currentNode.order,\n            lane: null,\n            isForward: currentNodeIsForward,\n            node: currentNodeIndex\n          });\n          addToAssignment(\n            currentNode.order,\n            currentNodeIndex,\n            trackNo,\n            segmentNumber,\n            prevSegmentPerOrderPerTrack\n          );\n          segmentNumber += 1;\n        } else {\n          track.path.push({\n            order: currentNode.order,\n            lane: null,\n            isForward: !currentNodeIsForward,\n            node: null\n          });\n          addToAssignment(\n            currentNode.order,\n            null,\n            trackNo,\n            segmentNumber,\n            prevSegmentPerOrderPerTrack\n          );\n          segmentNumber += 1;\n          track.path.push({\n            order: currentNode.order,\n            lane: null,\n            isForward: currentNodeIsForward,\n            node: currentNodeIndex\n          });\n          addToAssignment(\n            currentNode.order,\n            currentNodeIndex,\n            trackNo,\n            segmentNumber,\n            prevSegmentPerOrderPerTrack\n          );\n          segmentNumber += 1;\n        }\n      }\n    }\n  });\n\n  for (let i = 0; i <= maxOrder; i += 1) {\n    generateSingleLaneAssignment(assignments[i], i); // this is where the lanes get assigned\n  }\n}\n\nfunction addToAssignment(\n  order,\n  nodeIndex,\n  trackNo,\n  segmentID,\n  prevSegmentPerOrderPerTrack\n) {\n  const compareToFromSame = prevSegmentPerOrderPerTrack[order][trackNo];\n\n  if (nodeIndex === null) {\n    assignments[order].push({\n      type: 'single',\n      node: null,\n      tracks: [{ trackID: trackNo, segmentID, compareToFromSame }]\n    });\n    prevSegmentPerOrderPerTrack[order][trackNo] =\n      assignments[order][assignments[order].length - 1].tracks[0];\n  } else {\n    for (let i = 0; i < assignments[order].length; i += 1) {\n      if (assignments[order][i].node === nodeIndex) {\n        // add to existing node in assignment\n        assignments[order][i].type = 'multiple';\n        assignments[order][i].tracks.push({\n          trackID: trackNo,\n          segmentID,\n          compareToFromSame\n        });\n        prevSegmentPerOrderPerTrack[order][trackNo] =\n          assignments[order][i].tracks[assignments[order][i].tracks.length - 1];\n        return;\n      }\n    }\n    // create new node in assignment\n    assignments[order].push({\n      type: 'single',\n      node: nodeIndex,\n      tracks: [{ trackID: trackNo, segmentID, compareToFromSame }]\n    });\n    prevSegmentPerOrderPerTrack[order][trackNo] =\n      assignments[order][assignments[order].length - 1].tracks[0];\n  }\n}\n\n// looks at assignment and sets idealY and idealLane by looking at where the tracks come from\nfunction getIdealLanesAndCoords(assignment, order) {\n  let index;\n\n  assignment.forEach(node => {\n    node.idealLane = 0;\n    node.tracks.forEach(track => {\n      if (track.segmentID === 0) {\n        track.idealLane = track.trackID;\n        track.idealY = null;\n      } else {\n        if (\n          tracks[track.trackID].path[track.segmentID - 1].order ===\n          order - 1\n        ) {\n          track.idealLane =\n            tracks[track.trackID].path[track.segmentID - 1].lane;\n          track.idealY = tracks[track.trackID].path[track.segmentID - 1].y;\n        } else if (\n          track.segmentID < tracks[track.trackID].path.length - 1 &&\n          tracks[track.trackID].path[track.segmentID + 1].order === order - 1\n        ) {\n          track.idealLane =\n            tracks[track.trackID].path[track.segmentID + 1].lane;\n          track.idealY = tracks[track.trackID].path[track.segmentID + 1].y;\n        } else {\n          index = track.segmentID - 1;\n          while (\n            index >= 0 &&\n            tracks[track.trackID].path[index].order !== order - 1\n          ) {\n            index -= 1;\n          }\n          if (index < 0) {\n            track.idealLane = track.trackID;\n            track.idealY = null;\n          } else {\n            track.idealLane = tracks[track.trackID].path[index].lane;\n            track.idealY = tracks[track.trackID].path[index].y;\n          }\n        }\n      }\n      node.idealLane += track.idealLane;\n    });\n    node.idealLane /= node.tracks.length;\n  });\n}\n\n// assigns the optimal lanes for a single horizontal position (=order)\n// first an ideal lane is calculated for each track (which is ~ the lane of its predecessor)\n// then the nodes are sorted by their average ideal lane\n// and the whole construct is then moved up or down if necessary\nfunction generateSingleLaneAssignment(assignment, order) {\n  let currentLane = 0;\n  const potentialAdjustmentValues = new Set();\n  let currentY = 20;\n  let prevNameIsNull = false;\n  let prevTrack = -1;\n\n  getIdealLanesAndCoords(assignment, order);\n  assignment.sort(compareByIdealLane);\n\n  assignment.forEach(node => {\n    if (node.node !== null) {\n      nodes[node.node].topLane = currentLane;\n      if (prevNameIsNull) currentY -= 10;\n      nodes[node.node].y = currentY;\n      nodes[node.node].contentHeight = 0;\n      prevNameIsNull = false;\n    } else {\n      if (prevNameIsNull) currentY -= 25;\n      else if (currentY > 20) currentY -= 10;\n      prevNameIsNull = true;\n    }\n\n    node.tracks.sort(compareByIdealLane);\n    node.tracks.forEach(track => {\n      track.lane = currentLane;\n      if (track.trackID === prevTrack && node.node === null && prevNameIsNull) {\n        currentY += 10;\n      }\n      tracks[track.trackID].path[track.segmentID].lane = currentLane;\n      tracks[track.trackID].path[track.segmentID].y = currentY;\n      if (track.idealY !== null) {\n        potentialAdjustmentValues.add(track.idealY - currentY);\n      }\n      currentLane += 1;\n      currentY += tracks[track.trackID].width;\n      if (node.node !== null) {\n        nodes[node.node].contentHeight += tracks[track.trackID].width;\n      }\n      prevTrack = track.trackID;\n    });\n    currentY += 25;\n  });\n\n  adjustVertically(assignment, potentialAdjustmentValues);\n}\n\n// moves all tracks at a single horizontal location (=order) up/down to minimize lane changes\nfunction adjustVertically(assignment, potentialAdjustmentValues) {\n  let verticalAdjustment = 0;\n  let minAdjustmentCost = Number.MAX_SAFE_INTEGER;\n\n  potentialAdjustmentValues.forEach(moveBy => {\n    if (getVerticalAdjustmentCost(assignment, moveBy) < minAdjustmentCost) {\n      minAdjustmentCost = getVerticalAdjustmentCost(assignment, moveBy);\n      verticalAdjustment = moveBy;\n    }\n  });\n\n  assignment.forEach(node => {\n    if (node.node !== null) {\n      nodes[node.node].y += verticalAdjustment;\n    }\n    node.tracks.forEach(track => {\n      tracks[track.trackID].path[track.segmentID].y += verticalAdjustment;\n    });\n  });\n}\n\nfunction adjustVertically3(node, adjustBy) {\n  if (node.hasOwnProperty('order')) {\n    assignments[node.order].forEach(assignmentNode => {\n      if (assignmentNode.node !== null) {\n        const aNode = nodes[assignmentNode.node];\n        if (aNode !== node && aNode.y > node.y) {\n          aNode.y += adjustBy;\n          assignmentNode.tracks.forEach(track => {\n            tracks[track.trackID].path[track.segmentID].y += adjustBy;\n          });\n        }\n      } else {\n        // track-segment not within a node\n        assignmentNode.tracks.forEach(track => {\n          if (tracks[track.trackID].path[track.segmentID].y >= node.y) {\n            tracks[track.trackID].path[track.segmentID].y += adjustBy;\n          }\n        });\n      }\n    });\n    if (nodesPerOrder[node.order].length > 0) {\n      nodesPerOrder[node.order].forEach(nodeIndex => {\n        if (nodes[nodeIndex] !== node && nodes[nodeIndex].y > node.y) {\n          nodes[nodeIndex].y += adjustBy;\n        }\n      });\n    }\n  }\n}\n\n// calculates cost of vertical adjustment as vertical distance * width of track\nfunction getVerticalAdjustmentCost(assignment, moveBy) {\n  let result = 0;\n  assignment.forEach(node => {\n    node.tracks.forEach(track => {\n      if (track.idealY !== null && tracks[track.trackID].type !== 'read') {\n        result +=\n          Math.abs(\n            track.idealY -\n              moveBy -\n              tracks[track.trackID].path[track.segmentID].y\n          ) * tracks[track.trackID].width;\n      }\n    });\n  });\n  return result;\n}\n\nfunction compareByIdealLane(a, b) {\n  if (a.hasOwnProperty('idealLane')) {\n    if (b.hasOwnProperty('idealLane')) {\n      if (a.idealLane < b.idealLane) return -1;\n      else if (a.idealLane > b.idealLane) return 1;\n      return 0;\n    }\n    return -1;\n  }\n  if (b.hasOwnProperty('idealLane')) {\n    return 1;\n  }\n  return 0;\n}\n\nfunction compareNodesByOrder(a, b) {\n  if (a === null) {\n    if (b === null) return 0;\n    return -1;\n  }\n  if (b === null) return 1;\n\n  if (a.hasOwnProperty('order')) {\n    if (b.hasOwnProperty('order')) {\n      if (a.order < b.order) return -1;\n      else if (a.order > b.order) return 1;\n      if (a.hasOwnProperty('y') && b.hasOwnProperty('y')) {\n        if (a.y < b.y) return -1;\n        else if (a.y > b.y) return 1;\n      }\n      return 0;\n    }\n    return -1;\n  }\n  if (b.hasOwnProperty('order')) return 1;\n  return 0;\n}\n\nfunction addTrackFeatures() {\n  let nodeStart;\n  let nodeEnd;\n  let feature = {};\n\n  bed.forEach(line => {\n    let i = 0;\n    while (i < numberOfTracks && tracks[i].name !== line.track) i += 1;\n    if (i < numberOfTracks) {\n      nodeStart = 0;\n      tracks[i].path.forEach(node => {\n        if (node.node !== null) {\n          feature = {};\n          if (nodes[node.node].hasOwnProperty('sequenceLength')) {\n            nodeEnd = nodeStart + nodes[node.node].sequenceLength - 1;\n          } else {\n            nodeEnd = nodeStart + nodes[node.node].width - 1;\n          }\n\n          if (nodeStart >= line.start && nodeStart <= line.end) {\n            feature.start = 0;\n          }\n          if (nodeStart < line.start && nodeEnd >= line.start) {\n            feature.start = line.start - nodeStart;\n          }\n          if (nodeEnd <= line.end && nodeEnd >= line.start) {\n            feature.end = nodeEnd - nodeStart;\n            if (nodeEnd < line.end) feature.continue = true;\n          }\n          if (nodeEnd > line.end && nodeStart <= line.end) {\n            feature.end = line.end - nodeStart;\n          }\n          if (feature.hasOwnProperty('start')) {\n            feature.type = line.type;\n            feature.name = line.name;\n            if (!node.hasOwnProperty('features')) node.features = [];\n            node.features.push(feature);\n          }\n          nodeStart = nodeEnd + 1;\n        }\n      });\n    }\n  });\n}\n\nfunction calculateTrackWidth() {\n  // flag: if vg returns freq of 0 for all tracks, we will increase width manually\n  let allAreFour = true;\n\n  tracks.forEach(track => {\n    if (track.hasOwnProperty('freq')) {\n      // custom track width\n      track.width = Math.round((Math.log(track.freq) + 1) * 4);\n    } else {\n      // default track width\n      track.width = 15;\n      if (track.hasOwnProperty('type') && track.type === 'read') {\n        track.width = 4;\n      }\n    }\n    if (track.width !== 4) {\n      allAreFour = false;\n    }\n  });\n\n  if (allAreFour) {\n    tracks.forEach(track => {\n      if (track.hasOwnProperty('freq')) {\n        track.width = 15;\n      }\n    });\n  }\n}\n\nexport function useColorScheme(x) {\n  config.colorScheme = x;\n  svg = d3.select(svgID);\n  const tr = createTubeMap();\n  if (!config.hideLegendFlag) drawLegend(tr);\n}\n\nfunction assignColorSets() {\n  haplotypeColors = getColorSet(config.haplotypeColors);\n  forwardReadColors = getColorSet(config.forwardReadColors);\n  reverseReadColors = getColorSet(config.reverseReadColors);\n  exonColors = getColorSet(config.exonColors);\n}\n\nfunction getColorSet(colorSetName) {\n  switch (colorSetName) {\n    case 'plainColors':\n      return plainColors;\n    case 'reds':\n      return reds;\n    case 'blues':\n      return blues;\n    case 'greys':\n      return greys;\n    case 'lightColors':\n      return lightColors;\n    default:\n      return greys;\n  }\n}\n\nfunction generateTrackColor(track, highlight) {\n  if (typeof highlight === 'undefined') highlight = 'plain';\n  let trackColor;\n  if (track.hasOwnProperty('type') && track.type === 'read') {\n    if (track.hasOwnProperty('is_reverse') && track.is_reverse === true) {\n      trackColor = reverseReadColors[track.id % reverseReadColors.length];\n    } else {\n      trackColor = forwardReadColors[track.id % forwardReadColors.length];\n    }\n  } else {\n    if (config.showExonsFlag === false || highlight !== 'plain') {\n      trackColor = haplotypeColors[track.id % haplotypeColors.length];\n    } else {\n      trackColor = exonColors[track.id % exonColors.length];\n    }\n  }\n  return trackColor;\n}\n\nfunction generateTrackColorOLD(track, highlight) {\n  if (typeof highlight === 'undefined') highlight = 'plain';\n  let trackColor;\n  // Color reads in red and reverse reads in blue\n  if (track.hasOwnProperty('type') && track.type === 'read') {\n    if (track.hasOwnProperty('is_reverse') && track.is_reverse === true) {\n      trackColor = blues[track.id % blues.length];\n    } else {\n      trackColor = reds[track.id % reds.length];\n    }\n  } else {\n    if (config.colorScheme === 0) {\n      // colorful color scheme\n      if (config.showExonsFlag === false || highlight !== 'plain') {\n        trackColor = plainColors[track.id % plainColors.length];\n      } else {\n        trackColor = lightColors[track.id % lightColors.length];\n      }\n    } else if (config.colorScheme === 1) {\n      // blue-ish color scheme\n      if (config.showExonsFlag === false || highlight === 'plain') {\n        trackColor = greys[track.id % greys.length];\n      } else {\n        trackColor = reds[track.id % reds.length];\n      }\n    }\n  }\n  return trackColor;\n}\n\nfunction getReadXStart(read) {\n  const node = nodes[read.path[0].node];\n  if (read.path[0].isForward) {\n    // read starts in forward direction\n    return getXCoordinateOfBaseWithinNode(node, read.firstNodeOffset);\n  }\n  // read starts in backward direction\n  return getXCoordinateOfBaseWithinNode(\n    node,\n    node.sequenceLength - read.firstNodeOffset\n  );\n}\n\nfunction getReadXEnd(read) {\n  const node = nodes[read.path[read.path.length - 1].node];\n  if (read.path[read.path.length - 1].isForward) {\n    // read ends in forward direction\n    return getXCoordinateOfBaseWithinNode(node, read.finalNodeCoverLength);\n  }\n  // read ends in backward direction\n  return getXCoordinateOfBaseWithinNode(\n    node,\n    node.sequenceLength - read.finalNodeCoverLength\n  );\n}\n\n// returns the x coordinate (in pixels) of (the left side) of the given base\n// position within the given node\nfunction getXCoordinateOfBaseWithinNode(node, base) {\n  if (base > node.sequenceLength) return null; // equality is allowed\n  const nodeLeftX = node.x - 4;\n  const nodeRightX = node.x + node.pixelWidth + 4;\n  return nodeLeftX + (base / node.sequenceLength) * (nodeRightX - nodeLeftX);\n}\n\n// transforms the info in the tracks' path attribute into actual coordinates\n// and saves them in trackRectangles and trackCurves\nfunction generateSVGShapesFromPath() {\n  let xStart;\n  let xEnd;\n  let yStart;\n  let yEnd;\n  let trackColor;\n  let highlight;\n  let dummy;\n  let reversalFlag;\n\n  for (let i = 0; i <= maxOrder; i += 1) {\n    extraLeft.push(0);\n    extraRight.push(0);\n  }\n\n  // generate x coords where each order starts and ends\n  const orderStartX = [];\n  const orderEndX = [];\n  nodes.forEach(node => {\n    if (node.hasOwnProperty('order')) {\n      orderStartX[node.order] = node.x;\n      if (orderEndX[node.order] === undefined) {\n        orderEndX[node.order] = node.x + node.pixelWidth;\n      } else {\n        orderEndX[node.order] = Math.max(\n          orderEndX[node.order],\n          node.x + node.pixelWidth\n        );\n      }\n    }\n  });\n\n  tracks.forEach(track => {\n    highlight = 'plain';\n    trackColor = generateTrackColor(track, highlight);\n\n    // start of path\n    yStart = track.path[0].y;\n    if (track.type !== 'read') {\n      if (track.sequence[0].charAt(0) === '-') {\n        // The track starts with an inversed node\n        xStart = orderEndX[track.path[0].order] + 20;\n      } else {\n        // The track starts with a forward node\n        xStart = orderStartX[track.path[0].order] - 20;\n      }\n    } else {\n      xStart = getReadXStart(track);\n    }\n\n    // middle of path\n    for (let i = 0; i < track.path.length; i += 1) {\n      if (track.path[i].y === yStart) {\n        if (track.path[i].hasOwnProperty('features')) {\n          reversalFlag =\n            i > 0 && track.path[i - 1].order === track.path[i].order;\n          dummy = createFeatureRectangle(\n            track.path[i],\n            orderStartX[track.path[i].order],\n            orderEndX[track.path[i].order],\n            highlight,\n            track,\n            xStart,\n            yStart,\n            trackColor,\n            reversalFlag\n          );\n          highlight = dummy.highlight;\n          xStart = dummy.xStart;\n        }\n      } else {\n        if (track.path[i - 1].isForward) {\n          xEnd = orderEndX[track.path[i - 1].order];\n        } else {\n          xEnd = orderStartX[track.path[i - 1].order];\n        }\n        if (xEnd !== xStart) {\n          trackColor = generateTrackColor(track, highlight);\n          trackRectangles.push({\n            xStart: Math.min(xStart, xEnd),\n            yStart,\n            xEnd: Math.max(xStart, xEnd),\n            yEnd: yStart + track.width - 1,\n            color: trackColor,\n            id: track.id,\n            type: track.type\n          });\n        }\n\n        if (track.path[i].order - 1 === track.path[i - 1].order) {\n          // regular forward connection\n          xStart = xEnd;\n          xEnd = orderStartX[track.path[i].order];\n          yEnd = track.path[i].y;\n          trackColor = generateTrackColor(track, highlight);\n          trackCurves.push({\n            xStart,\n            yStart,\n            xEnd: xEnd + 1,\n            yEnd,\n            width: track.width,\n            color: trackColor,\n            laneChange: Math.abs(track.path[i].lane - track.path[i - 1].lane),\n            id: track.id,\n            type: track.type\n          });\n          xStart = xEnd;\n          yStart = yEnd;\n        } else if (track.path[i].order + 1 === track.path[i - 1].order) {\n          // regular backward connection\n          xStart = xEnd;\n          xEnd = orderEndX[track.path[i].order];\n          yEnd = track.path[i].y;\n          trackColor = generateTrackColor(track, highlight);\n          trackCurves.push({\n            xStart: xStart + 1,\n            yStart,\n            xEnd,\n            yEnd,\n            width: track.width,\n            color: trackColor,\n            laneChange: Math.abs(track.path[i].lane - track.path[i - 1].lane),\n            id: track.id,\n            type: track.type\n          });\n          xStart = xEnd;\n          yStart = yEnd;\n        } else {\n          // change of direction\n          if (track.path[i - 1].isForward) {\n            yEnd = track.path[i].y;\n            generateForwardToReverse(\n              xEnd,\n              yStart,\n              yEnd,\n              track.width,\n              trackColor,\n              track.id,\n              track.path[i].order,\n              track.type\n            );\n            xStart = orderEndX[track.path[i].order];\n            yStart = track.path[i].y;\n          } else {\n            yEnd = track.path[i].y;\n            generateReverseToForward(\n              xEnd,\n              yStart,\n              yEnd,\n              track.width,\n              trackColor,\n              track.id,\n              track.path[i].order,\n              track.type\n            );\n            xStart = orderStartX[track.path[i].order];\n            yStart = track.path[i].y;\n          }\n        }\n\n        if (track.path[i].hasOwnProperty('features')) {\n          reversalFlag = track.path[i - 1].order === track.path[i].order;\n          dummy = createFeatureRectangle(\n            track.path[i],\n            orderStartX[track.path[i].order],\n            orderEndX[track.path[i].order],\n            highlight,\n            track,\n            xStart,\n            yStart,\n            trackColor,\n            reversalFlag\n          );\n          highlight = dummy.highlight;\n          xStart = dummy.xStart;\n        }\n      }\n    }\n\n    // ending edges\n    if (track.type !== 'read') {\n      if (!track.path[track.path.length - 1].isForward) {\n        // The track ends with an inversed node\n        xEnd = orderStartX[track.path[track.path.length - 1].order] - 20;\n      } else {\n        // The track ends with a forward node\n        xEnd = orderEndX[track.path[track.path.length - 1].order] + 20;\n      }\n    } else {\n      xEnd = getReadXEnd(track);\n    }\n    trackRectangles.push({\n      xStart: Math.min(xStart, xEnd),\n      yStart,\n      xEnd: Math.max(xStart, xEnd),\n      yEnd: yStart + track.width - 1,\n      color: trackColor,\n      id: track.id,\n      type: track.type\n    });\n  });\n}\n\nfunction createFeatureRectangle(\n  node,\n  nodeXStart,\n  nodeXEnd,\n  highlight,\n  track,\n  rectXStart,\n  yStart,\n  trackColor,\n  reversalFlag\n) {\n  let nodeWidth;\n  let currentHighlight = highlight;\n  let c;\n  let co;\n  let featureXStart;\n  let featureXEnd;\n\n  nodeXStart -= 8;\n  nodeXEnd += 8;\n  if (nodes[node.node].hasOwnProperty('sequenceLength')) {\n    nodeWidth = nodes[node.node].sequenceLength;\n  } else {\n    nodeWidth = nodes[node.node].width;\n  }\n\n  node.features.sort((a, b) => a.start - b.start);\n  node.features.forEach(feature => {\n    if (currentHighlight !== feature.type) {\n      // finish incoming rectangle\n      c = generateTrackColor(track, currentHighlight);\n      if (node.isForward === true) {\n        featureXStart =\n          nodeXStart +\n          Math.round((feature.start * (nodeXEnd - nodeXStart + 1)) / nodeWidth);\n\n        // overwrite narrow post-inversion rectangle if highlight starts near beginning of node\n        if (reversalFlag && featureXStart < nodeXStart + 8) {\n          featureXEnd =\n            nodeXStart +\n            Math.round(\n              ((feature.end + 1) * (nodeXEnd - nodeXStart + 1)) / nodeWidth\n            ) -\n            1;\n          co = generateTrackColor(track, feature.type);\n          trackRectanglesStep3.push({\n            xStart: featureXStart,\n            yStart,\n            xEnd: featureXEnd,\n            yEnd: yStart + track.width - 1,\n            color: co,\n            id: track.id,\n            type: track.type\n          });\n        }\n\n        if (featureXStart > rectXStart + 1) {\n          trackRectanglesStep3.push({\n            xStart: rectXStart,\n            yStart,\n            xEnd: featureXStart - 1,\n            yEnd: yStart + track.width - 1,\n            color: c,\n            id: track.id,\n            type: track.type\n          });\n        }\n      } else {\n        featureXStart =\n          nodeXEnd -\n          Math.round((feature.start * (nodeXEnd - nodeXStart + 1)) / nodeWidth);\n\n        // overwrite narrow post-inversion rectangle if highlight starts near beginning of node\n        if (reversalFlag && featureXStart > nodeXEnd - 8) {\n          featureXEnd =\n            nodeXEnd -\n            Math.round(\n              ((feature.end + 1) * (nodeXEnd - nodeXStart + 1)) / nodeWidth\n            ) -\n            1;\n          co = generateTrackColor(track, feature.type);\n          trackRectanglesStep3.push({\n            xStart: featureXEnd,\n            yStart,\n            xEnd: featureXStart,\n            yEnd: yStart + track.width - 1,\n            color: co,\n            id: track.id,\n            type: track.type\n          });\n        }\n\n        if (rectXStart > featureXStart + 1) {\n          trackRectanglesStep3.push({\n            xStart: featureXStart + 1,\n            yStart,\n            xEnd: rectXStart,\n            yEnd: yStart + track.width - 1,\n            color: c,\n            id: track.id,\n            type: track.type\n          });\n        }\n      }\n      rectXStart = featureXStart;\n      currentHighlight = feature.type;\n    }\n    if (feature.end < nodeWidth - 1 || !feature.hasOwnProperty('continue')) {\n      // finish internal rectangle\n      c = generateTrackColor(track, currentHighlight);\n      if (node.isForward === true) {\n        featureXEnd =\n          nodeXStart +\n          Math.round(\n            ((feature.end + 1) * (nodeXEnd - nodeXStart + 1)) / nodeWidth\n          ) -\n          1;\n        trackRectanglesStep3.push({\n          xStart: rectXStart,\n          yStart,\n          xEnd: featureXEnd,\n          yEnd: yStart + track.width - 1,\n          color: c,\n          id: track.id,\n          type: track.type\n        });\n      } else {\n        featureXEnd =\n          nodeXEnd -\n          Math.round(\n            ((feature.end + 1) * (nodeXEnd - nodeXStart + 1)) / nodeWidth\n          ) -\n          1;\n        trackRectanglesStep3.push({\n          xStart: featureXEnd,\n          yStart,\n          xEnd: rectXStart,\n          yEnd: yStart + track.width - 1,\n          color: c,\n          id: track.id,\n          type: track.type\n        });\n      }\n      rectXStart = featureXEnd + 1;\n      currentHighlight = 'plain';\n    }\n  });\n  return { xStart: rectXStart, highlight: currentHighlight };\n}\n\nfunction generateForwardToReverse(\n  x,\n  yStart,\n  yEnd,\n  trackWidth,\n  trackColor,\n  trackID,\n  order,\n  type\n) {\n  x += 10 * extraRight[order];\n  const yTop = Math.min(yStart, yEnd);\n  const yBottom = Math.max(yStart, yEnd);\n  const radius = 7;\n\n  trackVerticalRectangles.push({\n    // elongate incoming rectangle a bit to the right\n    xStart: x - 10 * extraRight[order],\n    yStart,\n    xEnd: x + 5,\n    yEnd: yStart + trackWidth - 1,\n    color: trackColor,\n    id: trackID,\n    type\n  });\n  trackVerticalRectangles.push({\n    // vertical rectangle\n    xStart: x + 5 + radius,\n    yStart: yTop + trackWidth + radius - 1,\n    xEnd: x + 5 + radius + Math.min(7, trackWidth) - 1,\n    yEnd: yBottom - radius + 1,\n    color: trackColor,\n    id: trackID,\n    type\n  });\n  trackVerticalRectangles.push({\n    xStart: x - 10 * extraRight[order],\n    yStart: yEnd,\n    xEnd: x + 5,\n    yEnd: yEnd + trackWidth - 1,\n    color: trackColor,\n    id: trackID,\n    type\n  }); // elongate outgoing rectangle a bit to the right\n\n  let d = `M ${x + 5} ${yBottom}`;\n  d += ` Q ${x + 5 + radius} ${yBottom} ${x + 5 + radius} ${yBottom - radius}`;\n  d += ` H ${x + 5 + radius + Math.min(7, trackWidth)}`;\n  d += ` Q ${x + 5 + radius + Math.min(7, trackWidth)} ${yBottom +\n    trackWidth} ${x + 5} ${yBottom + trackWidth}`;\n  d += ' Z ';\n  trackCorners.push({ path: d, color: trackColor, id: trackID, type });\n\n  d = `M ${x + 5} ${yTop}`;\n  d += ` Q ${x + 5 + radius + Math.min(7, trackWidth)} ${yTop} ${x +\n    5 +\n    radius +\n    Math.min(7, trackWidth)} ${yTop + trackWidth + radius}`;\n  d += ` H ${x + 5 + radius}`;\n  d += ` Q ${x + 5 + radius} ${yTop + trackWidth} ${x + 5} ${yTop +\n    trackWidth}`;\n  d += ' Z ';\n  trackCorners.push({ path: d, color: trackColor, id: trackID, type });\n  extraRight[order] += 1;\n}\n\nfunction generateReverseToForward(\n  x,\n  yStart,\n  yEnd,\n  trackWidth,\n  trackColor,\n  trackID,\n  order,\n  type\n) {\n  const yTop = Math.min(yStart, yEnd);\n  const yBottom = Math.max(yStart, yEnd);\n  const radius = 7;\n  x -= 10 * extraLeft[order];\n\n  trackVerticalRectangles.push({\n    xStart: x - 6,\n    yStart,\n    xEnd: x + 10 * extraLeft[order],\n    yEnd: yStart + trackWidth - 1,\n    color: trackColor,\n    id: trackID,\n    type\n  }); // elongate incoming rectangle a bit to the left\n  trackVerticalRectangles.push({\n    xStart: x - 5 - radius - Math.min(7, trackWidth),\n    yStart: yTop + trackWidth + radius - 1,\n    xEnd: x - 5 - radius - 1,\n    yEnd: yBottom - radius + 1,\n    color: trackColor,\n    id: trackID,\n    type\n  }); // vertical rectangle\n  trackVerticalRectangles.push({\n    xStart: x - 6,\n    yStart: yEnd,\n    xEnd: x + 10 * extraLeft[order],\n    yEnd: yEnd + trackWidth - 1,\n    color: trackColor,\n    id: trackID,\n    type\n  }); // elongate outgoing rectangle a bit to the left\n\n  // Path for bottom 90 degree bend\n  let d = `M ${x - 5} ${yBottom}`;\n  d += ` Q ${x - 5 - radius} ${yBottom} ${x - 5 - radius} ${yBottom - radius}`;\n  d += ` H ${x - 5 - radius - Math.min(7, trackWidth)}`;\n  d += ` Q ${x - 5 - radius - Math.min(7, trackWidth)} ${yBottom +\n    trackWidth} ${x - 5} ${yBottom + trackWidth}`;\n  d += ' Z ';\n  trackCorners.push({ path: d, color: trackColor, id: trackID, type });\n\n  // Path for top 90 degree bend\n  d = `M ${x - 5} ${yTop}`;\n  d += ` Q ${x - 5 - radius - Math.min(7, trackWidth)} ${yTop} ${x -\n    5 -\n    radius -\n    Math.min(7, trackWidth)} ${yTop + trackWidth + radius}`;\n  d += ` H ${x - 5 - radius}`;\n  d += ` Q ${x - 5 - radius} ${yTop + trackWidth} ${x - 5} ${yTop +\n    trackWidth}`;\n  d += ' Z ';\n  trackCorners.push({ path: d, color: trackColor, id: trackID, type });\n  extraLeft[order] += 1;\n}\n\n// to avoid problems with wrong overlapping of tracks, draw them in order of their color\nfunction drawReversalsByColor(corners, rectangles, type) {\n  if (typeof type === 'undefined') type = 'haplo';\n  const co = new Set();\n  rectangles.forEach(rect => {\n    co.add(rect.color);\n  });\n  co.forEach(c => {\n    drawTrackRectangles(\n      rectangles.filter(filterObjectByAttribute('color', c)),\n      type\n    );\n    drawTrackCorners(corners.filter(filterObjectByAttribute('color', c)), type);\n  });\n}\n\n// draws nodes by building svg-path for border and filling it with transparent white\nfunction drawNodes(dNodes) {\n  let x;\n  let y;\n\n  dNodes.forEach(node => {\n    // top left arc\n    node.d = `M ${node.x - 9} ${node.y} Q ${node.x - 9} ${node.y - 9} ${\n      node.x\n    } ${node.y - 9}`;\n    x = node.x;\n    y = node.y - 9;\n\n    // top straight\n    if (node.width > 1) {\n      x += node.pixelWidth;\n      node.d += ` L ${x} ${y}`;\n    }\n\n    // top right arc\n    node.d += ` Q ${x + 9} ${y} ${x + 9} ${y + 9}`;\n    x += 9;\n    y += 9;\n\n    // right straight\n    if (node.contentHeight > 0) {\n      y += node.contentHeight - 0;\n      node.d += ` L ${x} ${y}`;\n    }\n\n    // bottom right arc\n    node.d += ` Q ${x} ${y + 9} ${x - 9} ${y + 9}`;\n    x -= 9;\n    y += 9;\n\n    // bottom straight\n    if (node.width > 1) {\n      x -= node.pixelWidth;\n      node.d += ` L ${x} ${y}`;\n    }\n\n    // bottom left arc\n    node.d += ` Q ${x - 9} ${y} ${x - 9} ${y - 9}`;\n    x -= 9;\n    y -= 9;\n\n    // left straight\n    if (node.contentHeight > 0) {\n      y -= node.contentHeight - 0;\n      node.d += ` L ${x} ${y}`;\n    }\n  });\n\n  svg\n    .selectAll('.node')\n    .data(dNodes)\n    .enter()\n    .append('path')\n    .attr('id', d => d.name)\n    .attr('d', d => d.d)\n    .on('mouseover', nodeMouseOver)\n    .on('mouseout', nodeMouseOut)\n    .on('dblclick', nodeDoubleClick)\n    .style('fill', '#fff')\n    .style('fill-opacity', config.showExonsFlag ? '0.4' : '0.6')\n    .style('stroke', 'black')\n    .style('stroke-width', '2px')\n    .append('svg:title')\n    .text(d => d.name);\n}\n\n// draw seqence labels for nodes\nfunction drawLabels(dNodes) {\n  if (config.nodeWidthOption === 0) {\n    svg\n      .selectAll('text')\n      .data(dNodes)\n      .enter()\n      .append('text')\n      .attr('x', d => d.x - 4)\n      .attr('y', d => d.y + 4)\n      .text(d => d.seq)\n      .attr('font-family', 'Courier, \"Lucida Console\", monospace')\n      .attr('font-size', '14px')\n      .attr('fill', 'black')\n      .style('pointer-events', 'none');\n  }\n}\n\nfunction drawRuler() {\n  let rulerTrackIndex = 0;\n  while (tracks[rulerTrackIndex].name !== trackForRuler) rulerTrackIndex += 1;\n  const rulerTrack = tracks[rulerTrackIndex];\n\n  // draw horizontal line\n  svg\n    .append('line')\n    .attr('x1', 0)\n    .attr('y1', minYCoordinate - 10)\n    .attr('x2', maxXCoordinate)\n    .attr('y2', minYCoordinate - 10)\n    .attr('stroke-width', 1)\n    .attr('stroke', 'black');\n\n  let markingInterval = 100;\n  if (config.nodeWidthOption === 0) markingInterval = 20;\n\n  let indexOfFirstBaseInNode = rulerTrack.indexOfFirstBase;\n  let atLeastOneMarkingDrawn = false;\n  let xCoordOfPreviousMarking = -100;\n\n  // draw ruler marking at the left end of chart for compressed charts\n  // (this marking is on purpose not at a 0 % 100 position)\n  if (config.nodeWidthOption !== 0) {\n    const firstNode = nodes[rulerTrack.indexSequence[0]];\n    xCoordOfPreviousMarking = getXCoordinateOfBaseWithinNode(firstNode, 0);\n    drawRulerMarking(indexOfFirstBaseInNode, xCoordOfPreviousMarking);\n    atLeastOneMarkingDrawn = true;\n  }\n\n  rulerTrack.indexSequence.forEach(nodeIndex => {\n    const currentNode = nodes[nodeIndex];\n    let nextMarking =\n      Math.ceil(indexOfFirstBaseInNode / markingInterval) * markingInterval;\n    while (nextMarking < indexOfFirstBaseInNode + currentNode.sequenceLength) {\n      const xCoordOfMarking = getXCoordinateOfBaseWithinNode(\n        currentNode,\n        nextMarking - indexOfFirstBaseInNode\n      );\n      if (xCoordOfPreviousMarking + 80 <= xCoordOfMarking) {\n        drawRulerMarking(nextMarking, xCoordOfMarking);\n        atLeastOneMarkingDrawn = true;\n        xCoordOfPreviousMarking = xCoordOfMarking;\n      }\n      nextMarking += markingInterval;\n    }\n    indexOfFirstBaseInNode += nodes[nodeIndex].sequenceLength;\n  });\n\n  // if no markings drawn, draw one at the very beginning\n  if (!atLeastOneMarkingDrawn) {\n    drawRulerMarking(\n      rulerTrack.indexOfFirstBase,\n      nodes[rulerTrack.indexSequence[0]].x - 4\n    );\n  }\n}\n\nfunction drawRulerMarking(sequencePosition, xCoordinate) {\n  svg\n    .append('text')\n    .attr('x', xCoordinate)\n    .attr('y', minYCoordinate - 13)\n    .text(`|${sequencePosition}`)\n    .attr('font-family', 'Courier, \"Lucida Console\", monospace')\n    .attr('font-size', '12px')\n    .attr('fill', 'black')\n    .style('pointer-events', 'none');\n}\n\nfunction filterObjectByAttribute(attribute, value) {\n  return item => item[attribute] === value;\n}\n\nfunction drawTrackRectangles(rectangles, type) {\n  if (typeof type === 'undefined') type = 'haplo';\n  rectangles = rectangles.filter(filterObjectByAttribute('type', type));\n\n  svg\n    .selectAll('trackRectangles')\n    .data(rectangles)\n    .enter()\n    .append('rect')\n    .attr('x', d => d.xStart)\n    .attr('y', d => d.yStart)\n    .attr('width', d => d.xEnd - d.xStart + 1)\n    .attr('height', d => d.yEnd - d.yStart + 1)\n    .style('fill', d => d.color)\n    .attr('trackID', d => d.id)\n    .attr('class', d => `track${d.id}`)\n    .attr('color', d => d.color)\n    .on('mouseover', trackMouseOver)\n    .on('mouseout', trackMouseOut)\n    .on('dblclick', trackDoubleClick);\n}\n\nfunction compareCurvesByLineChanges(a, b) {\n  if (a[6] < b[6]) return -1;\n  else if (a[6] > b[6]) return 1;\n  return 0;\n}\n\nfunction defineSVGPatterns() {\n  const defs = svg.append('defs');\n  let pattern = defs.append('pattern').attrs({\n    id: 'patternA',\n    width: '7',\n    height: '7',\n    patternUnits: 'userSpaceOnUse',\n    patternTransform: 'rotate(45)'\n  });\n\n  pattern\n    .append('rect')\n    .attrs({ x: '0', y: '0', width: '7', height: '7', fill: '#FFFFFF' });\n  pattern\n    .append('rect')\n    .attrs({ x: '0', y: '0', width: '3', height: '3', fill: '#505050' });\n  pattern\n    .append('rect')\n    .attrs({ x: '0', y: '4', width: '3', height: '3', fill: '#505050' });\n  pattern\n    .append('rect')\n    .attrs({ x: '4', y: '0', width: '3', height: '3', fill: '#505050' });\n  pattern\n    .append('rect')\n    .attrs({ x: '4', y: '4', width: '3', height: '3', fill: '#505050' });\n\n  pattern = defs.append('pattern').attrs({\n    id: 'patternB',\n    width: '8',\n    height: '8',\n    patternUnits: 'userSpaceOnUse',\n    patternTransform: 'rotate(45)'\n  });\n  pattern\n    .append('rect')\n    .attrs({ x: '0', y: '0', width: '8', height: '8', fill: '#FFFFFF' });\n  pattern\n    .append('rect')\n    .attrs({ x: '0', y: '0', width: '3', height: '3', fill: '#1f77b4' });\n  pattern\n    .append('rect')\n    .attrs({ x: '0', y: '5', width: '3', height: '3', fill: '#1f77b4' });\n  pattern\n    .append('rect')\n    .attrs({ x: '5', y: '0', width: '3', height: '3', fill: '#1f77b4' });\n  pattern\n    .append('rect')\n    .attrs({ x: '5', y: '5', width: '3', height: '3', fill: '#1f77b4' });\n\n  pattern = defs.append('pattern').attrs({\n    id: 'plaid0',\n    width: '6',\n    height: '6',\n    patternUnits: 'userSpaceOnUse',\n    patternTransform: 'rotate(45)'\n  });\n  pattern\n    .append('rect')\n    .attrs({ x: '0', y: '0', width: '6', height: '6', fill: '#FFFFFF' });\n  pattern\n    .append('rect')\n    .attrs({ x: '0', y: '0', width: '2', height: '2', fill: '#1f77b4' });\n  pattern\n    .append('rect')\n    .attrs({ x: '0', y: '4', width: '2', height: '2', fill: '#1f77b4' });\n  pattern\n    .append('rect')\n    .attrs({ x: '4', y: '0', width: '2', height: '2', fill: '#1f77b4' });\n  pattern\n    .append('rect')\n    .attrs({ x: '4', y: '4', width: '2', height: '2', fill: '#1f77b4' });\n\n  pattern = defs.append('pattern').attrs({\n    id: 'plaid1',\n    width: '6',\n    height: '6',\n    patternUnits: 'userSpaceOnUse',\n    patternTransform: 'rotate(45)'\n  });\n  pattern\n    .append('rect')\n    .attrs({ x: '0', y: '0', width: '6', height: '6', fill: '#FFFFFF' });\n  pattern\n    .append('rect')\n    .attrs({ x: '0', y: '0', width: '2', height: '2', fill: '#ff7f0e' });\n  pattern\n    .append('rect')\n    .attrs({ x: '0', y: '4', width: '2', height: '2', fill: '#ff7f0e' });\n  pattern\n    .append('rect')\n    .attrs({ x: '4', y: '0', width: '2', height: '2', fill: '#ff7f0e' });\n  pattern\n    .append('rect')\n    .attrs({ x: '4', y: '4', width: '2', height: '2', fill: '#ff7f0e' });\n\n  pattern = defs.append('pattern').attrs({\n    id: 'plaid2',\n    width: '6',\n    height: '6',\n    patternUnits: 'userSpaceOnUse',\n    patternTransform: 'rotate(45)'\n  });\n  pattern\n    .append('rect')\n    .attrs({ x: '0', y: '0', width: '6', height: '6', fill: '#FFFFFF' });\n  pattern\n    .append('rect')\n    .attrs({ x: '0', y: '0', width: '2', height: '2', fill: '#2ca02c' });\n  pattern\n    .append('rect')\n    .attrs({ x: '0', y: '4', width: '2', height: '2', fill: '#2ca02c' });\n  pattern\n    .append('rect')\n    .attrs({ x: '4', y: '0', width: '2', height: '2', fill: '#2ca02c' });\n  pattern\n    .append('rect')\n    .attrs({ x: '4', y: '4', width: '2', height: '2', fill: '#2ca02c' });\n\n  pattern = defs.append('pattern').attrs({\n    id: 'plaid3',\n    width: '6',\n    height: '6',\n    patternUnits: 'userSpaceOnUse',\n    patternTransform: 'rotate(45)'\n  });\n  pattern\n    .append('rect')\n    .attrs({ x: '0', y: '0', width: '6', height: '6', fill: '#FFFFFF' });\n  pattern\n    .append('rect')\n    .attrs({ x: '0', y: '0', width: '2', height: '2', fill: '#d62728' });\n  pattern\n    .append('rect')\n    .attrs({ x: '0', y: '4', width: '2', height: '2', fill: '#d62728' });\n  pattern\n    .append('rect')\n    .attrs({ x: '4', y: '0', width: '2', height: '2', fill: '#d62728' });\n  pattern\n    .append('rect')\n    .attrs({ x: '4', y: '4', width: '2', height: '2', fill: '#d62728' });\n\n  pattern = defs.append('pattern').attrs({\n    id: 'plaid4',\n    width: '6',\n    height: '6',\n    patternUnits: 'userSpaceOnUse',\n    patternTransform: 'rotate(45)'\n  });\n  pattern\n    .append('rect')\n    .attrs({ x: '0', y: '0', width: '6', height: '6', fill: '#FFFFFF' });\n  pattern\n    .append('rect')\n    .attrs({ x: '0', y: '0', width: '2', height: '2', fill: '#9467bd' });\n  pattern\n    .append('rect')\n    .attrs({ x: '0', y: '4', width: '2', height: '2', fill: '#9467bd' });\n  pattern\n    .append('rect')\n    .attrs({ x: '4', y: '0', width: '2', height: '2', fill: '#9467bd' });\n  pattern\n    .append('rect')\n    .attrs({ x: '4', y: '4', width: '2', height: '2', fill: '#9467bd' });\n\n  pattern = defs.append('pattern').attrs({\n    id: 'plaid5',\n    width: '6',\n    height: '6',\n    patternUnits: 'userSpaceOnUse',\n    patternTransform: 'rotate(45)'\n  });\n  pattern\n    .append('rect')\n    .attrs({ x: '0', y: '0', width: '6', height: '6', fill: '#FFFFFF' });\n  pattern\n    .append('rect')\n    .attrs({ x: '0', y: '0', width: '2', height: '2', fill: '#8c564b' });\n  pattern\n    .append('rect')\n    .attrs({ x: '0', y: '4', width: '2', height: '2', fill: '#8c564b' });\n  pattern\n    .append('rect')\n    .attrs({ x: '4', y: '0', width: '2', height: '2', fill: '#8c564b' });\n  pattern\n    .append('rect')\n    .attrs({ x: '4', y: '4', width: '2', height: '2', fill: '#8c564b' });\n}\n\nfunction drawTrackCurves(type) {\n  if (typeof type === 'undefined') type = 'haplo';\n  const myTrackCurves = trackCurves.filter(\n    filterObjectByAttribute('type', type)\n  );\n\n  myTrackCurves.sort(compareCurvesByLineChanges);\n\n  myTrackCurves.forEach(curve => {\n    const xMiddle = (curve.xStart + curve.xEnd) / 2;\n    let d = `M ${curve.xStart} ${curve.yStart}`;\n    d += ` C ${xMiddle} ${curve.yStart} ${xMiddle} ${curve.yEnd} ${\n      curve.xEnd\n    } ${curve.yEnd}`;\n    d += ` V ${curve.yEnd + curve.width}`;\n    d += ` C ${xMiddle} ${curve.yEnd + curve.width} ${xMiddle} ${curve.yStart +\n      curve.width} ${curve.xStart} ${curve.yStart + curve.width}`;\n    d += ' Z';\n    curve.path = d;\n  });\n\n  svg\n    .selectAll('trackCurves')\n    .data(trackCurves)\n    .enter()\n    .append('path')\n    .attr('d', d => d.path)\n    .style('fill', d => d.color)\n    .attr('trackID', d => d.id)\n    .attr('class', d => `track${d.id}`)\n    .attr('color', d => d.color)\n    .on('mouseover', trackMouseOver)\n    .on('mouseout', trackMouseOut)\n    .on('dblclick', trackDoubleClick);\n}\n\nfunction drawTrackCorners(corners, type) {\n  if (typeof type === 'undefined') type = 'haplo';\n  corners = corners.filter(filterObjectByAttribute('type', type));\n\n  svg\n    .selectAll('trackCorners')\n    .data(corners)\n    .enter()\n    .append('path')\n    .attr('d', d => d.path)\n    .style('fill', d => d.color)\n    .attr('trackID', d => d.id)\n    .attr('class', d => `track${d.id}`)\n    .attr('color', d => d.color)\n    .on('mouseover', trackMouseOver)\n    .on('mouseout', trackMouseOut)\n    .on('dblclick', trackDoubleClick);\n}\n\nfunction drawLegend() {\n  let content =\n    '<table class=\"table-sm table-condensed table-nonfluid\"><thead><tr><th>Color</th><th>Trackname</th><th>Show Track</th></tr></thead>';\n  const listeners = [];\n  for (let i = 0; i < tracks.length; i += 1) {\n    if (tracks[i].type === 'haplo') {\n      content += `<tr><td style=\"text-align:right\"><div class=\"color-box\" style=\"background-color: ${generateTrackColor(\n        tracks[i],\n        'exon'\n      )};\"></div></td>`;\n      if (tracks[i].hasOwnProperty('name')) {\n        content += `<td>${tracks[i].name}</td>`;\n      } else {\n        content += `<td>${tracks[i].id}</td>`;\n      }\n      content += `<td><input type=\"checkbox\" checked=true id=\"showTrack${i}\"></td>`;\n      listeners.push(i);\n    }\n  }\n  content += '</table';\n  // $('#legendDiv').html(content);\n  document.getElementById('legendDiv').innerHTML = content;\n  listeners.forEach(i => {\n    document\n      .getElementById(`showTrack${i}`)\n      .addEventListener('click', () => changeTrackVisibility(i), false);\n  });\n}\n\n// Highlight track on mouseover\nfunction trackMouseOver() {\n  /* jshint validthis: true */\n  const trackID = d3.select(this).attr('trackID');\n  d3.selectAll(`.track${trackID}`).style('fill', 'url(#patternA)');\n}\n\n// Highlight node on mouseover\nfunction nodeMouseOver() {\n  /* jshint validthis: true */\n  d3.select(this).style('stroke-width', '4px');\n}\n\n// Restore original track appearance on mouseout\nfunction trackMouseOut() {\n  /* jshint validthis: true */\n  const trackID = d3.select(this).attr('trackID');\n  d3.selectAll(`.track${trackID}`).each(function clearTrackHighlight() {\n    const c = d3.select(this).attr('color');\n    d3.select(this).style('fill', c);\n  });\n}\n\n// Restore original node appearance on mouseout\nfunction nodeMouseOut() {\n  /* jshint validthis: true */\n  d3.select(this).style('stroke-width', '2px');\n}\n\n// Move clicked track to first position\nfunction trackDoubleClick() {\n  /* jshint validthis: true */\n  const trackID = d3.select(this).attr('trackID');\n  let index = 0;\n  while (\n    index < inputTracks.length &&\n    inputTracks[index].id !== Number(trackID)\n  ) {\n    index += 1;\n  }\n  if (index >= inputTracks.length) return;\n  if (DEBUG) console.log(`moving index: ${index}`);\n  moveTrackToFirstPosition(index);\n  createTubeMap();\n}\n\n// Redraw with current node moved to beginning\nfunction nodeDoubleClick() {\n  /* jshint validthis: true */\n  const nodeID = d3.select(this).attr('id');\n  if (config.clickableNodesFlag) {\n    if (reads && config.showReads) {\n      document.getElementById('hgvmNodeID').value = nodeID;\n      document.getElementById('hgvmPostButton').click();\n    } else {\n      document.getElementById('nodeID').value = nodeID;\n      document.getElementById('postButton').click();\n    }\n  }\n}\n\n// extract info about nodes from vg-json\nexport function vgExtractNodes(vg) {\n  const result = [];\n  vg.node.forEach(node => {\n    result.push({\n      name: `${node.id}`,\n      sequenceLength: node.sequence.length,\n      seq: node.sequence\n    });\n  });\n  return result;\n}\n\n// calculate node widths depending on sequence lengths and chosen calculation method\nfunction generateNodeWidth() {\n  nodes.forEach(node => {\n    if (!node.hasOwnProperty('sequenceLength')) {\n      node.sequenceLength = node.seq.length;\n    }\n  });\n\n  switch (config.nodeWidthOption) {\n    case 1:\n      nodes.forEach(node => {\n        node.width = 1 + Math.log(node.sequenceLength) / Math.log(2);\n        node.pixelWidth = Math.round((node.width - 1) * 8.401);\n      });\n      break;\n    case 2:\n      nodes.forEach(node => {\n        node.width = node.sequenceLength / 100;\n        node.pixelWidth = Math.round((node.width - 1) * 8.401);\n      });\n      break;\n    default:\n      nodes.forEach(node => {\n        node.width = node.sequenceLength;\n\n        // get width of node's text label by writing label, measuring it and removing label\n        svg\n          .append('text')\n          .attr('x', 0)\n          .attr('y', 100)\n          .attr('id', 'dummytext')\n          .text(node.seq.substr(1))\n          .attr('font-family', 'Courier, \"Lucida Console\", monospace')\n          .attr('font-size', '14px')\n          .attr('fill', 'black')\n          .style('pointer-events', 'none');\n        node.pixelWidth = Math.round(\n          document.getElementById('dummytext').getComputedTextLength()\n        );\n        document.getElementById('dummytext').remove();\n        // $('#dummytext').remove();\n      });\n  }\n}\n\n// extract track info from vg-json\nexport function vgExtractTracks(vg) {\n  const result = [];\n  vg.path.forEach((path, index) => {\n    const sequence = [];\n    let isCompletelyReverse = true;\n    path.mapping.forEach(pos => {\n      if (\n        pos.position.hasOwnProperty('is_reverse') &&\n        pos.position.is_reverse === true\n      ) {\n        sequence.push(`-${pos.position.node_id}`);\n      } else {\n        sequence.push(`${pos.position.node_id}`);\n        isCompletelyReverse = false;\n      }\n    });\n    if (isCompletelyReverse) {\n      sequence.reverse();\n      sequence.forEach((node, index2) => {\n        sequence[index2] = node.substr(1);\n      });\n    }\n    const track = {};\n    track.id = index;\n    track.sequence = sequence;\n    if (path.hasOwnProperty('freq')) track.freq = path.freq;\n    if (path.hasOwnProperty('name')) track.name = path.name;\n    if (path.hasOwnProperty('indexOfFirstBase')) {\n      track.indexOfFirstBase = Number(path.indexOfFirstBase);\n    }\n    result.push(track);\n  });\n  return result;\n}\n\nfunction compareReadsByLeftEnd(a, b) {\n  let leftNodeA;\n  let leftNodeB;\n  let leftIndexA;\n  let leftIndexB;\n\n  if (a.sequence[0].charAt(0) === '-') {\n    if (a.sequence[a.sequence.length - 1].charAt(0) === '-') {\n      leftNodeA = a.sequence[a.sequence.length - 1].substr(1);\n      leftIndexA =\n        nodes[nodeMap.get(leftNodeA)].sequenceLength - a.finalNodeCoverLength;\n    } else {\n      leftNodeA = a.sequence[a.sequence.length - 1];\n      leftIndexA = 0;\n    }\n  } else {\n    leftNodeA = a.sequence[0];\n    leftIndexA = a.firstNodeOffset;\n  }\n\n  if (b.sequence[0].charAt(0) === '-') {\n    if (b.sequence[b.sequence.length - 1].charAt(0) === '-') {\n      leftNodeB = b.sequence[b.sequence.length - 1].substr(1);\n      leftIndexB =\n        nodes[nodeMap.get(leftNodeB)].sequenceLength - b.finalNodeCoverLength;\n    } else {\n      leftNodeB = b.sequence[b.sequence.length - 1];\n      leftIndexB = 0;\n    }\n  } else {\n    leftNodeB = b.sequence[0];\n    leftIndexB = b.firstNodeOffset;\n  }\n\n  if (leftNodeA < leftNodeB) return -1;\n  else if (leftNodeA > leftNodeB) return 1;\n  if (leftIndexA < leftIndexB) return -1;\n  else if (leftIndexA > leftIndexB) return 1;\n  return 0;\n}\n\nfunction compareReadsByLeftEnd2(a, b) {\n  // compare by order of first node\n  if (nodes[a.indexSequence[0]].order < nodes[b.indexSequence[0]].order) {\n    return -1;\n  } else if (\n    nodes[a.indexSequence[0]].order > nodes[b.indexSequence[0]].order\n  ) {\n    return 1;\n  }\n\n  // compare by first base within first node\n  if (a.firstNodeOffset < b.firstNodeOffset) return -1;\n  else if (a.firstNodeOffset > b.firstNodeOffset) return 1;\n\n  // compare by order of last node\n  if (\n    nodes[a.indexSequence[a.indexSequence.length - 1]].order <\n    nodes[b.indexSequence[b.indexSequence.length - 1]].order\n  ) {\n    return -1;\n  } else if (\n    nodes[a.indexSequence[a.indexSequence.length - 1]].order >\n    nodes[b.indexSequence[b.indexSequence.length - 1]].order\n  ) {\n    return 1;\n  }\n\n  // compare by last base withing last node\n  if (a.finalNodeCoverLength < b.finalNodeCoverLength) return -1;\n  else if (a.finalNodeCoverLength > b.finalNodeCoverLength) return 1;\n\n  return 0;\n}\n\nexport function vgExtractReads(myNodes, myTracks, myReads) {\n  if (DEBUG) {\n    console.log('Reads:');\n    console.log(myReads);\n  }\n  const extracted = [];\n\n  const nodeNames = [];\n  myNodes.forEach(node => {\n    nodeNames.push(node.name, 10);\n  });\n\n  for (let i = 0; i < myReads.length; i += 1) {\n    const read = myReads[i];\n    const sequence = [];\n    const sequenceNew = [];\n    let firstIndex = -1; // index within mapping of the first node id contained in nodeNames\n    let lastIndex = -1; // index within mapping of the last node id contained in nodeNames\n    read.path.mapping.forEach((pos, j) => {\n      if (nodeNames.indexOf(pos.position.node_id) > -1) {\n        const edit = {};\n        let offset = 0;\n        if (\n          pos.position.hasOwnProperty('is_reverse') &&\n          pos.position.is_reverse === true\n        ) {\n          sequence.push(`-${pos.position.node_id}`);\n          edit.nodeName = `-${pos.position.node_id}`;\n        } else {\n          sequence.push(`${pos.position.node_id}`);\n          edit.nodeName = pos.position.node_id.toString();\n        }\n        if (firstIndex < 0) {\n          firstIndex = j;\n          if (pos.position.hasOwnProperty('offset')) {\n            pos.position.offset = parseInt(pos.position.offset, 10);\n            offset = pos.position.offset;\n          }\n        }\n        lastIndex = j;\n\n        const mismatches = [];\n        let posWithinNode = offset;\n        pos.edit.forEach(element => {\n          if (\n            element.hasOwnProperty('to_length') &&\n            !element.hasOwnProperty('from_length')\n          ) {\n            // insertion\n            mismatches.push({\n              type: 'insertion',\n              pos: posWithinNode,\n              seq: element.sequence\n            });\n          } else if (\n            !element.hasOwnProperty('to_length') &&\n            element.hasOwnProperty('from_length')\n          ) {\n            // deletion\n            mismatches.push({\n              type: 'deletion',\n              pos: posWithinNode,\n              length: element.from_length\n            });\n          } else if (element.hasOwnProperty('sequence')) {\n            // substitution\n            if (element.sequence.length > 1) {\n              if (DEBUG) {\n                console.log(\n                  `found substitution at read ${i}, node ${j} = ${\n                    pos.position.node_id\n                  }, seq = ${element.sequence}`\n                );\n              }\n            }\n            mismatches.push({\n              type: 'substitution',\n              pos: posWithinNode,\n              seq: element.sequence\n            });\n          }\n          if (element.hasOwnProperty('from_length')) {\n            posWithinNode += element.from_length;\n          }\n        });\n        edit.mismatches = mismatches;\n        sequenceNew.push(edit);\n      }\n    });\n    if (sequence.length === 0) {\n      if (DEBUG) {\n        console.log(`read ${i} is empty`);\n      }\n    } else {\n      const track = {};\n      track.id = myTracks.length + extracted.length;\n      track.sequence = sequence;\n      track.sequenceNew = sequenceNew;\n      track.type = 'read';\n      if (read.path.hasOwnProperty('freq')) track.freq = read.path.freq;\n      if (read.path.hasOwnProperty('name')) track.name = read.path.name;\n\n      // where within node does read start\n      track.firstNodeOffset = 0;\n      if (read.path.mapping[firstIndex].position.hasOwnProperty('offset')) {\n        track.firstNodeOffset = read.path.mapping[firstIndex].position.offset;\n      }\n\n      // where within node does read end\n      const finalNodeEdit = read.path.mapping[lastIndex].edit;\n      track.finalNodeCoverLength = 0;\n      if (read.path.mapping[lastIndex].position.hasOwnProperty('offset')) {\n        track.finalNodeCoverLength +=\n          read.path.mapping[lastIndex].position.offset;\n      }\n      finalNodeEdit.forEach(edit => {\n        if (edit.hasOwnProperty('from_length')) {\n          track.finalNodeCoverLength += edit.from_length;\n        }\n      });\n\n      extracted.push(track);\n    }\n  }\n  return extracted;\n}\n\n// remove redundant nodes\n// two nodes A and B can be merged if all tracks leaving A go directly into B\n// and all tracks entering B come directly from A\n// (plus no inversions involved)\nfunction mergeNodes() {\n  let nodeName;\n  let nodeName2;\n  const pred = []; // array of set of predecessors of each node\n  const succ = []; // array of set of successors of each node\n  for (let i = 0; i < nodes.length; i += 1) {\n    pred.push(new Set());\n    succ.push(new Set());\n  }\n\n  let tracksAndReads;\n  if (reads && config.showReads) tracksAndReads = tracks.concat(reads);\n  else tracksAndReads = tracks;\n\n  tracksAndReads.forEach(track => {\n    for (let i = 0; i < track.sequence.length; i += 1) {\n      if (track.sequence[i].charAt(0) !== '-') {\n        // forward Node\n        if (i > 0) {\n          nodeName = track.sequence[i - 1];\n          pred[nodeMap.get(track.sequence[i])].add(nodeName);\n          if (nodeName.charAt(0) === '-') {\n            // add 2 predecessors, to make sure there is no node merging in this case\n            pred[nodeMap.get(track.sequence[i])].add(nodeName.substr(1));\n          }\n        } else if (track.type === 'haplo') {\n          pred[nodeMap.get(track.sequence[i])].add('None');\n        }\n        if (i < track.sequence.length - 1) {\n          nodeName = track.sequence[i + 1];\n          succ[nodeMap.get(track.sequence[i])].add(nodeName);\n          if (nodeName.charAt(0) === '-') {\n            // add 2 successors, to make sure there is no node merging in this case\n            succ[nodeMap.get(track.sequence[i])].add(nodeName.substr(1));\n          }\n        } else if (track.type === 'haplo') {\n          succ[nodeMap.get(track.sequence[i])].add('None');\n        }\n      } else {\n        // reverse Node\n        nodeName = track.sequence[i].substr(1);\n        if (i > 0) {\n          nodeName2 = track.sequence[i - 1];\n          if (nodeName2.charAt(0) === '-') {\n            succ[nodeMap.get(nodeName)].add(nodeName2.substr(1));\n          } else {\n            // add 2 successors, to make sure there is no node merging in this case\n            succ[nodeMap.get(nodeName)].add(nodeName2);\n            succ[nodeMap.get(nodeName)].add(`-${nodeName2}`);\n          }\n        } else if (track.type === 'haplo') {\n          succ[nodeMap.get(nodeName)].add('None');\n        }\n        if (i < track.sequence.length - 1) {\n          nodeName2 = track.sequence[i + 1];\n          if (nodeName2.charAt(0) === '-') {\n            pred[nodeMap.get(nodeName)].add(nodeName2.substr(1));\n          } else {\n            pred[nodeMap.get(nodeName)].add(nodeName2);\n            pred[nodeMap.get(nodeName)].add(`-${nodeName2}`);\n          }\n        } else if (track.type === 'haplo') {\n          pred[nodeMap.get(nodeName)].add('None');\n        }\n      }\n    }\n  });\n\n  // convert sets to arrays\n  for (let i = 0; i < nodes.length; i += 1) {\n    succ[i] = Array.from(succ[i]);\n    pred[i] = Array.from(pred[i]);\n  }\n\n  // update reads which pass through merging nodes\n  if (reads && config.showReads) {\n    // sort nodes by order, then by y-coordinate\n    const sortedNodes = nodes.slice();\n    sortedNodes.sort(compareNodesByOrder);\n\n    // iterate over all nodes and calculate their position within the new merged node\n    const mergeOffset = new Map();\n    const mergeOrigin = new Map(); // maps to leftmost node of a node's \"merging cascade\"\n    sortedNodes.forEach(node => {\n      const predecessor = mergeableWithPred(nodeMap.get(node.name), pred, succ);\n      if (predecessor) {\n        mergeOffset.set(\n          node.name,\n          mergeOffset.get(predecessor) +\n            nodes[nodeMap.get(predecessor)].sequenceLength\n        );\n        mergeOffset.set(\n          '-' + node.name,\n          mergeOffset.get(predecessor) +\n            nodes[nodeMap.get(predecessor)].sequenceLength\n        );\n        mergeOrigin.set(node.name, mergeOrigin.get(predecessor));\n        mergeOrigin.set('-' + node.name, mergeOrigin.get(predecessor));\n      } else {\n        mergeOffset.set(node.name, 0);\n        mergeOffset.set('-' + node.name, 0);\n        mergeOrigin.set(node.name, node.name);\n        mergeOrigin.set('-' + node.name, node.name);\n      }\n    });\n\n    reads.forEach(read => {\n      read.firstNodeOffset += mergeOffset.get(read.sequence[0]);\n      read.finalNodeCoverLength += mergeOffset.get(\n        read.sequence[read.sequence.length - 1]\n      );\n      for (let i = read.sequence.length - 1; i >= 0; i -= 1) {\n        const nodeName =\n          read.sequence[i][0] === '-'\n            ? read.sequence[i].substr(1)\n            : read.sequence[i];\n        if (mergeableWithPred(nodeMap.get(nodeName), pred, succ)) {\n          const predecessor = mergeableWithPred(\n            nodeMap.get(nodeName),\n            pred,\n            succ\n          );\n          if (mergeableWithSucc(nodeMap.get(predecessor), pred, succ)) {\n            if (i > 0) {\n              read.sequence.splice(i, 1);\n              // adjust position of mismatches\n              read.sequenceNew[i].mismatches.forEach(mismatch => {\n                mismatch.pos += nodes[nodeMap.get(predecessor)].sequenceLength;\n              });\n              // append mismatches to previous entry's mismatches\n              read.sequenceNew[i - 1].mismatches = read.sequenceNew[\n                i - 1\n              ].mismatches.concat(read.sequenceNew[i].mismatches);\n              read.sequenceNew.splice(i, 1);\n            } else {\n              read.sequence[0] = mergeOrigin.get(read.sequence[0]);\n              read.sequenceNew[i].mismatches.forEach(mismatch => {\n                mismatch.pos += mergeOffset.get(read.sequenceNew[0].nodeName);\n              });\n              read.sequenceNew[0].nodeName = mergeOrigin.get(\n                read.sequenceNew[0].nodeName\n              );\n            }\n          }\n        }\n      }\n    });\n  }\n\n  // update node sequences + sequence lengths\n  for (let i = 0; i < nodes.length; i += 1) {\n    if (mergeableWithSucc(i, pred, succ) && !mergeableWithPred(i, pred, succ)) {\n      let donor = i;\n      while (mergeableWithSucc(donor, pred, succ)) {\n        donor = succ[donor][0];\n        if (donor.charAt(0) === '-') donor = donor.substr(1);\n        donor = nodeMap.get(donor);\n        if (nodes[i].hasOwnProperty('sequenceLength')) {\n          nodes[i].sequenceLength += nodes[donor].sequenceLength;\n        } else {\n          nodes[i].width += nodes[donor].width;\n        }\n        nodes[i].seq += nodes[donor].seq;\n      }\n    }\n  }\n\n  // actually merge the nodes by removing the corresponding nodes from track data\n  tracks.forEach(track => {\n    for (let i = track.sequence.length - 1; i >= 0; i -= 1) {\n      nodeName = track.sequence[i];\n      if (nodeName.charAt(0) === '-') nodeName = nodeName.substr(1);\n      const nodeIndex = nodeMap.get(nodeName);\n      if (mergeableWithPred(nodeIndex, pred, succ)) {\n        track.sequence.splice(i, 1);\n      }\n    }\n  });\n\n  // remove the nodes from node-array\n  for (let i = nodes.length - 1; i >= 0; i -= 1) {\n    if (mergeableWithPred(i, pred, succ)) {\n      nodes.splice(i, 1);\n    }\n  }\n}\n\nfunction mergeableWithPred(index, pred, succ) {\n  if (pred[index].length !== 1) return false;\n  if (pred[index][0] === 'None') return false;\n  let predecessor = pred[index][0];\n  if (predecessor.charAt(0) === '-') predecessor = predecessor.substr(1);\n  const predecessorIndex = nodeMap.get(predecessor);\n  if (succ[predecessorIndex].length !== 1) return false;\n  if (succ[predecessorIndex][0] === 'None') return false;\n  return predecessor;\n}\n\nfunction mergeableWithSucc(index, pred, succ) {\n  if (succ[index].length !== 1) return false;\n  if (succ[index][0] === 'None') return false;\n  let successor = succ[index][0];\n  if (successor.charAt(0) === '-') successor = successor.substr(1);\n  const successorIndex = nodeMap.get(successor);\n  if (pred[successorIndex].length !== 1) return false;\n  if (pred[successorIndex][0] === 'None') return false;\n  return true;\n}\n\nfunction drawMismatches() {\n  tracks.forEach((read, trackIdx) => {\n    if (read.type === 'read') {\n      read.sequenceNew.forEach((element, i) => {\n        element.mismatches.forEach(mm => {\n          const nodeName =\n            element.nodeName[0] === '-'\n              ? element.nodeName.substr(1)\n              : element.nodeName;\n          const nodeIndex = nodeMap.get(nodeName);\n          const node = nodes[nodeIndex];\n          const x = getXCoordinateOfBaseWithinNode(node, mm.pos);\n          let pathIndex = i;\n          while (read.path[pathIndex].node !== nodeIndex) pathIndex += 1;\n          const y = read.path[pathIndex].y;\n          if (mm.type === 'insertion') {\n            if (\n              config.showSoftClips ||\n              ((mm.pos !== read.firstNodeOffset || i !== 0) &&\n                (mm.pos !== read.finalNodeCoverLength ||\n                  i !== read.sequenceNew.length - 1))\n            ) {\n              drawInsertion(x - 3, y + 7, mm.seq, node.y);\n            }\n          } else if (mm.type === 'deletion') {\n            const x2 = getXCoordinateOfBaseWithinNode(node, mm.pos + mm.length);\n            drawDeletion(x, x2, y + 4, node.y);\n          } else if (mm.type === 'substitution') {\n            const x2 = getXCoordinateOfBaseWithinNode(\n              node,\n              mm.pos + mm.seq.length\n            );\n            drawSubstitution(x + 1, x2, y + 7, node.y, mm.seq);\n          }\n        });\n      });\n    }\n  });\n}\n\nfunction drawInsertion(x, y, seq, nodeY) {\n  svg\n    .append('text')\n    .attr('x', x)\n    .attr('y', y)\n    .text('*')\n    .attr('font-family', 'Courier, \"Lucida Console\", monospace')\n    .attr('font-size', '12px')\n    .attr('fill', 'black')\n    .attr('nodeY', nodeY)\n    .on('mouseover', insertionMouseOver)\n    .on('mouseout', insertionMouseOut)\n    .append('svg:title')\n    .text(seq);\n}\n\nfunction drawSubstitution(x1, x2, y, nodeY, seq) {\n  svg\n    .append('text')\n    .attr('x', x1)\n    .attr('y', y)\n    .text(seq)\n    .attr('font-family', 'Courier, \"Lucida Console\", monospace')\n    .attr('font-size', '12px')\n    .attr('fill', 'black')\n    .attr('nodeY', nodeY)\n    .attr('rightX', x2)\n    .on('mouseover', substitutionMouseOver)\n    .on('mouseout', substitutionMouseOut);\n}\n\nfunction drawDeletion(x1, x2, y, nodeY) {\n  // draw horizontal block\n  svg\n    .append('line')\n    .attr('x1', x1)\n    .attr('y1', y - 1)\n    .attr('x2', x2)\n    .attr('y2', y - 1)\n    .attr('stroke-width', 7)\n    .attr('stroke', 'grey')\n    .attr('nodeY', nodeY)\n    .on('mouseover', deletionMouseOver)\n    .on('mouseout', deletionMouseOut);\n}\n\nfunction insertionMouseOver() {\n  /* jshint validthis: true */\n  d3.select(this).attr('fill', 'red');\n  const x = Number(d3.select(this).attr('x'));\n  const y = Number(d3.select(this).attr('y'));\n  const yTop = Number(d3.select(this).attr('nodeY'));\n  svg\n    .append('line')\n    .attr('class', 'insertionHighlight')\n    .attr('x1', x + 4)\n    .attr('y1', y - 10)\n    .attr('x2', x + 4)\n    .attr('y2', yTop + 5)\n    .attr('stroke-width', 1)\n    .attr('stroke', 'black');\n}\n\nfunction deletionMouseOver() {\n  /* jshint validthis: true */\n  d3.select(this).attr('stroke', 'red');\n  const x1 = Number(d3.select(this).attr('x1'));\n  const x2 = Number(d3.select(this).attr('x2'));\n  const y = Number(d3.select(this).attr('y1'));\n  const yTop = Number(d3.select(this).attr('nodeY'));\n  svg\n    .append('line')\n    .attr('class', 'deletionHighlight')\n    .attr('x1', x1)\n    .attr('y1', y - 3)\n    .attr('x2', x1)\n    .attr('y2', yTop + 5)\n    .attr('stroke-width', 1)\n    .attr('stroke', 'black');\n  svg\n    .append('line')\n    .attr('class', 'deletionHighlight')\n    .attr('x1', x2)\n    .attr('y1', y - 3)\n    .attr('x2', x2)\n    .attr('y2', yTop + 5)\n    .attr('stroke-width', 1)\n    .attr('stroke', 'black');\n}\n\nfunction substitutionMouseOver() {\n  /* jshint validthis: true */\n  d3.select(this).attr('fill', 'red');\n  const x1 = Number(d3.select(this).attr('x'));\n  const x2 = Number(d3.select(this).attr('rightX'));\n  const y = Number(d3.select(this).attr('y'));\n  const yTop = Number(d3.select(this).attr('nodeY'));\n  svg\n    .append('line')\n    .attr('class', 'substitutionHighlight')\n    .attr('x1', x1 - 1)\n    .attr('y1', y - 7)\n    .attr('x2', x1 - 1)\n    .attr('y2', yTop + 5)\n    .attr('stroke-width', 1)\n    .attr('stroke', 'black');\n  svg\n    .append('line')\n    .attr('class', 'substitutionHighlight')\n    .attr('x1', x2 + 1)\n    .attr('y1', y - 7)\n    .attr('x2', x2 + 1)\n    .attr('y2', yTop + 5)\n    .attr('stroke-width', 1)\n    .attr('stroke', 'black');\n}\n\nfunction insertionMouseOut() {\n  /* jshint validthis: true */\n  d3.select(this).attr('fill', 'black');\n  d3.selectAll('.insertionHighlight').remove();\n}\n\nfunction deletionMouseOut() {\n  /* jshint validthis: true */\n  d3.select(this).attr('stroke', 'grey');\n  d3.selectAll('.deletionHighlight').remove();\n}\n\nfunction substitutionMouseOut() {\n  /* jshint validthis: true */\n  d3.select(this).attr('fill', 'black');\n  d3.selectAll('.substitutionHighlight').remove();\n}\n","export const dataOriginTypes = {\n  API: 'API',\n  EXAMPLE_1: 'example 1',\n  EXAMPLE_2: 'example 2',\n  EXAMPLE_3: 'example 3',\n  EXAMPLE_4: 'example 4',\n  EXAMPLE_5: 'example 5',\n  EXAMPLE_6: 'example 6'\n};\n","import React, { Component } from 'react';\nimport { Form, Label, Input, Button } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faStepBackward,\n  faStepForward,\n  faSearchPlus,\n  faSearchMinus\n} from '@fortawesome/free-solid-svg-icons';\nimport * as tubeMap from '../util/tubemap';\n\nconst ZOOM_FACTOR = 2.0;\n\nclass DataPositionFormRow extends Component {\n  handleZoomIn = () => {\n    tubeMap.zoomBy(ZOOM_FACTOR);\n  };\n\n  handleZoomOut = () => {\n    tubeMap.zoomBy(1.0 / ZOOM_FACTOR);\n  };\n\n  handleDownloadButton = () => {\n    const svgN = document.getElementById('svg');\n    const svgData = new XMLSerializer().serializeToString(svgN);\n    const svgBlob = new Blob([svgData], {\n      type: 'image/svg+xml;charset=utf-8'\n    });\n    const svgUrl = URL.createObjectURL(svgBlob);\n\n    const downloadLink = document.createElement('a');\n    downloadLink.href = svgUrl;\n    downloadLink.download = 'graph.svg';\n    document.body.appendChild(downloadLink);\n    downloadLink.click();\n    document.body.removeChild(downloadLink);\n  };\n\n  render() {\n    return (\n      <Form inline>\n        <Label className=\"tight-label mb-2 mr-sm-2 mb-sm-0 ml-2\" for=\"nodeID\">\n          Start:\n        </Label>\n        <Input\n          type=\"text\"\n          className=\"custom-input form-control mb-2 mr-sm-4 mb-sm-0\"\n          id=\"nodeID\"\n          size=\"12\"\n          value={this.props.nodeID}\n          onChange={this.props.handleInputChange}\n        />\n        <Label className=\"tight-label mb-2 mr-sm-2 mb-sm-0 ml-2\" for=\"distance\">\n          Length:\n        </Label>\n        <Input\n          type=\"text\"\n          className=\"custom-input form-control mb-2 mr-sm-2 mb-sm-0\"\n          id=\"distance\"\n          size=\"4\"\n          value={this.props.distance}\n          onChange={this.props.handleInputChange}\n        />\n        <Label\n          className=\"tight-label mb-2 mr-sm-2 mb-sm-0 ml-2\"\n          for=\"unitSelect\"\n        >\n          Unit:\n        </Label>\n        <Input\n          type=\"select\"\n          className=\"custom-select mb-2 mr-sm-2 mb-sm-0\"\n          id=\"byNode\"\n          value={this.props.byNode}\n          onChange={this.props.handleInputChange}\n        >\n          <option value=\"false\">Nucleotides</option>\n          <option value=\"true\">Nodes</option>\n        </Input>\n        &nbsp;\n        {this.props.uploadInProgress && (\n          <div className=\"smallLoader\" id=\"fileUploadSpinner\" />\n        )}\n        <Button\n          color=\"primary\"\n          id=\"goButton\"\n          onClick={this.props.handleGoButton}\n          disabled={this.props.uploadInProgress}\n        >\n          Go\n        </Button>\n        <Button\n          color=\"primary\"\n          id=\"goLeftButton\"\n          onClick={this.props.handleGoLeft}\n        >\n          <FontAwesomeIcon icon={faStepBackward} size=\"lg\" />\n        </Button>\n        <Button color=\"primary\" id=\"zoomInButton\" onClick={this.handleZoomIn}>\n          <FontAwesomeIcon icon={faSearchPlus} size=\"lg\" />\n        </Button>\n        <Button color=\"primary\" id=\"zoomOutButton\" onClick={this.handleZoomOut}>\n          <FontAwesomeIcon icon={faSearchMinus} size=\"lg\" />\n        </Button>\n        <Button\n          color=\"primary\"\n          id=\"goRightButton\"\n          onClick={this.props.handleGoRight}\n        >\n          <FontAwesomeIcon icon={faStepForward} size=\"lg\" />\n        </Button>\n        <Button\n          color=\"secondary\"\n          id=\"downloadButton\"\n          onClick={this.handleDownloadButton}\n        >\n          Download Image\n        </Button>\n      </Form>\n    );\n  }\n}\n\nexport default DataPositionFormRow;\n","import React, { Component } from 'react';\nimport { Label, Input } from 'reactstrap';\n\nclass MountedDataFormRow extends Component {\n  render() {\n    const xgFileDropdownOptions = this.props.xgSelectOptions.map(fileName => {\n      return (\n        <option value={fileName} key={fileName}>\n          {fileName}\n        </option>\n      );\n    });\n\n    const gbwtFileDropdownOptions = this.props.gbwtSelectOptions.map(\n      fileName => {\n        return (\n          <option value={fileName} key={fileName}>\n            {fileName}\n          </option>\n        );\n      }\n    );\n\n    const gamFileDropdownOptions = this.props.gamSelectOptions.map(fileName => {\n      return (\n        <option value={fileName} key={fileName}>\n          {fileName}\n        </option>\n      );\n    });\n\n    const pathDropdownOptions = this.props.pathSelectOptions.map(pathName => {\n      return (\n        <option value={pathName} key={pathName}>\n          {pathName}\n        </option>\n      );\n    });\n\n    return (\n      <React.Fragment>\n        <Label className=\"customData tight-label mb-2 mr-sm-2 mb-sm-0 ml-2\">\n          xg file:\n        </Label>\n        <Input\n          type=\"select\"\n          className=\"customDataMounted custom-select mb-2 mr-sm-4 mb-sm-0\"\n          id=\"xgSelect\"\n          value={this.props.xgSelect}\n          onChange={this.props.handleInputChange}\n        >\n          {xgFileDropdownOptions}\n        </Input>\n\n        <Label\n          for=\"gbwtFileSelect\"\n          className=\"customData tight-label mb-2 mr-sm-2 mb-sm-0 ml-2\"\n        >\n          gbwt file:\n        </Label>\n        <Input\n          type=\"select\"\n          className=\"customDataMounted custom-select mb-2 mr-sm-4 mb-sm-0\"\n          id=\"gbwtSelect\"\n          value={this.props.gbwtSelect}\n          onChange={this.props.handleInputChange}\n        >\n          {gbwtFileDropdownOptions}\n        </Input>\n\n        <Label\n          for=\"gamFileSelect\"\n          className=\"customData tight-label mb-2 mr-sm-2 mb-sm-0 ml-2\"\n        >\n          gam index:\n        </Label>\n        <Input\n          type=\"select\"\n          className=\"customDataMounted custom-select mb-2 mr-sm-4 mb-sm-0\"\n          id=\"gamSelect\"\n          value={this.props.gamSelect}\n          onChange={this.props.handleInputChange}\n        >\n          {gamFileDropdownOptions}\n        </Input>\n\n        <Label\n          for=\"pathName\"\n          className=\"customData tight-label mb-2 mr-sm-2 mb-sm-0 ml-2\"\n        >\n          Path name:\n        </Label>\n        <Input\n          type=\"select\"\n          className=\"customData custom-select mb-2 mr-sm-4 mb-sm-0\"\n          id=\"pathSelect\"\n          value={this.props.pathSelect}\n          onChange={this.props.handleInputChange}\n        >\n          {pathDropdownOptions}\n        </Input>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default MountedDataFormRow;\n","import React, { Component } from 'react';\nimport { Label, Input } from 'reactstrap';\nimport config from '../config.json';\n\nconst BACKEND_URL = config.BACKEND_URL || `http://${window.location.host}`;\nconst MAX_UPLOAD_SIZE = 5242880;\n\nclass FileUploadFormRow extends Component {\n  constructor(props) {\n    super(props);\n    this.xgFileInput = React.createRef();\n    this.gbwtFileInput = React.createRef();\n    this.gamFileInput = React.createRef();\n  }\n\n  onXgFileChange = () => {\n    const file = this.xgFileInput.current.files[0];\n    if (file === undefined) {\n      this.props.resetPathNames();\n      this.props.handleFileUpload('xgFile', 'none');\n    } else {\n      if (file.size > MAX_UPLOAD_SIZE) {\n        this.xgFileInput.current.value = '';\n        this.props.showFileSizeAlert();\n        return;\n      }\n      this.props.setUploadInProgress(true);\n      const formData = new FormData();\n      formData.append('xgFile', file);\n      const xhr = new XMLHttpRequest();\n      xhr.responseType = 'json';\n      xhr.onreadystatechange = () => {\n        if (xhr.readyState === 4 && xhr.status === 200) {\n          // Every thing ok, file uploaded\n          this.props.setUploadInProgress(false);\n          this.props.handleFileUpload('xgFile', xhr.response.path);\n          this.props.getPathNames(xhr.response.path, 'true');\n        }\n      };\n      xhr.open('POST', `${BACKEND_URL}/xgFileSubmission`, true);\n      xhr.send(formData);\n    }\n  };\n\n  onGbwtFileChange = () => {\n    const file = this.gbwtFileInput.current.files[0];\n    if (file === undefined) {\n      this.props.handleFileUpload('gbwtFile', 'none');\n    } else {\n      if (file.size > MAX_UPLOAD_SIZE) {\n        this.gbwtFileInput.current.value = '';\n        this.props.showFileSizeAlert();\n        return;\n      }\n      this.props.setUploadInProgress(true);\n      const formData = new FormData();\n      formData.append('gbwtFile', file);\n      const xhr = new XMLHttpRequest();\n      xhr.responseType = 'json';\n      xhr.onreadystatechange = () => {\n        if (xhr.readyState === 4 && xhr.status === 200) {\n          // Every thing ok, file uploaded\n          this.props.setUploadInProgress(false);\n          this.props.handleFileUpload('gbwtFile', xhr.response.path);\n        }\n      };\n      xhr.open('POST', `${BACKEND_URL}/gbwtFileSubmission`, true);\n      xhr.send(formData);\n    }\n  };\n\n  onGamFileChange = () => {\n    const file = this.gamFileInput.current.files[0];\n    if (file === undefined) {\n      this.props.handleFileUpload('gamFile', 'none');\n    } else {\n      if (file.size > MAX_UPLOAD_SIZE) {\n        this.gamFileInput.current.value = '';\n        this.props.showFileSizeAlert();\n        return;\n      }\n      this.props.setUploadInProgress(true);\n      const formData = new FormData();\n      formData.append('gamFile', file);\n      const xhr = new XMLHttpRequest();\n      xhr.responseType = 'json';\n      xhr.onreadystatechange = () => {\n        if (xhr.readyState === 4 && xhr.status === 200) {\n          // Every thing ok, file uploaded\n          this.props.setUploadInProgress(false);\n          this.props.handleFileUpload('gamFile', xhr.response.path);\n        }\n      };\n      xhr.open('POST', `${BACKEND_URL}/gamFileSubmission`, true);\n      xhr.send(formData);\n    }\n  };\n\n  render() {\n    const pathDropdownOptions = this.props.pathSelectOptions.map(pathName => {\n      return (\n        <option value={pathName} key={pathName}>\n          {pathName}\n        </option>\n      );\n    });\n\n    return (\n      <React.Fragment>\n        <Label className=\"customData tight-label mb-2 mr-sm-2 mb-sm-0 ml-2\">\n          xg file:\n        </Label>\n        <Input\n          type=\"file\"\n          className=\"customDataUpload form-control-file\"\n          id=\"xgFileUpload\"\n          accept=\".xg\"\n          innerRef={this.xgFileInput}\n          onChange={this.onXgFileChange}\n        />\n        <Label\n          for=\"gbwtFileSelect\"\n          className=\"customData tight-label mb-2 mr-sm-2 mb-sm-0 ml-2\"\n        >\n          gbwt file:\n        </Label>\n        <Input\n          type=\"file\"\n          className=\"customDataUpload form-control-file\"\n          id=\"gbwtFileUpload\"\n          accept=\".gbwt\"\n          innerRef={this.gbwtFileInput}\n          onChange={this.onGbwtFileChange}\n        />\n        <Label\n          for=\"gamFileSelect\"\n          className=\"customData tight-label mb-2 mr-sm-2 mb-sm-0 ml-2\"\n        >\n          gam index:\n        </Label>\n        <Input\n          type=\"file\"\n          className=\"customDataUpload form-control-file\"\n          id=\"gamFileUpload\"\n          accept=\".gam\"\n          innerRef={this.gamFileInput}\n          onChange={this.onGamFileChange}\n        />\n        <Label\n          for=\"pathName\"\n          className=\"customData tight-label mb-2 mr-sm-2 mb-sm-0 ml-2\"\n        >\n          Path name:\n        </Label>\n        <Input\n          type=\"select\"\n          className=\"customData custom-select mb-2 mr-sm-4 mb-sm-0\"\n          id=\"pathSelect\"\n          value={this.props.pathSelect}\n          onChange={this.props.handleInputChange}\n        >\n          {pathDropdownOptions}\n        </Input>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default FileUploadFormRow;\n","import React, { Component } from 'react';\nimport { Form, Button } from 'reactstrap';\nimport { dataOriginTypes } from '../enums';\n\nclass ExampleSelectButtons extends Component {\n  handleClick = (dataOrigin, haploColor, readColor) => {\n    this.props.setDataOrigin(dataOrigin);\n    this.props.setColorSetting('haplotypeColors', haploColor);\n    if (readColor) {\n      this.props.setColorSetting('forwardReadColors', readColor);\n    }\n  };\n\n  render() {\n    return (\n      <Form inline>\n        <Button\n          color=\"primary\"\n          id=\"example1\"\n          onClick={() =>\n            this.handleClick(dataOriginTypes.EXAMPLE_1, 'plainColors')\n          }\n        >\n          Indels and Polymorphisms only\n        </Button>\n        <Button\n          color=\"primary\"\n          id=\"example2\"\n          onClick={() =>\n            this.handleClick(dataOriginTypes.EXAMPLE_2, 'plainColors')\n          }\n        >\n          Inversions\n        </Button>\n        <Button\n          color=\"primary\"\n          id=\"example3\"\n          onClick={() =>\n            this.handleClick(dataOriginTypes.EXAMPLE_3, 'plainColors')\n          }\n        >\n          Nested Inversions\n        </Button>\n        <Button\n          color=\"primary\"\n          id=\"example4\"\n          onClick={() =>\n            this.handleClick(dataOriginTypes.EXAMPLE_4, 'plainColors')\n          }\n        >\n          Duplications\n        </Button>\n        <Button\n          color=\"primary\"\n          id=\"example5\"\n          onClick={() =>\n            this.handleClick(dataOriginTypes.EXAMPLE_5, 'plainColors')\n          }\n        >\n          Translocations\n        </Button>\n        <Button\n          color=\"primary\"\n          id=\"example6\"\n          onClick={() =>\n            this.handleClick(dataOriginTypes.EXAMPLE_6, 'greys', 'reds')\n          }\n        >\n          Aligned Reads\n        </Button>\n      </Form>\n    );\n  }\n}\n\nexport default ExampleSelectButtons;\n","import React, { Component } from 'react';\nimport { Container, Row, Col, Form, Label, Input, Alert } from 'reactstrap';\nimport { dataOriginTypes } from '../enums';\n// import defaultConfig from '../config.default.json';\nimport config from '../config.json';\nimport DataPositionFormRow from './DataPositionFormRow';\nimport MountedDataFormRow from './MountedDataFormRow';\nimport FileUploadFormRow from './FileUploadFormRow';\nimport ExampleSelectButtons from './ExampleSelectButtons';\n\nconst BACKEND_URL = config.BACKEND_URL || `http://${window.location.host}`;\nconst DATA_SOURCES = config.DATA_SOURCES;\nconst MAX_UPLOAD_SIZE_DESCRIPTION = '5 MB';\nconst dataTypes = {\n  BUILT_IN: 'built-in',\n  FILE_UPLOAD: 'file-upload',\n  MOUNTED_FILES: 'mounted files',\n  EXAMPLES: 'examples'\n};\n\nclass HeaderForm extends Component {\n  state = {\n    xgSelectOptions: ['none'],\n    xgSelect: 'none',\n\n    gbwtSelectOptions: ['none'],\n    gbwtSelect: 'none',\n\n    gamSelectOptions: ['none'],\n    gamSelect: 'none',\n\n    pathSelectOptions: ['none'],\n    pathSelect: 'none',\n\n    xgFile: 'snp1kg-BRCA1.vg.xg',\n    gbwtFile: '',\n    gamFile: 'NA12878-BRCA1.sorted.gam',\n    anchorTrackName: '17',\n    dataPath: 'default',\n\n    nodeID: '1',\n    distance: '100',\n    byNode: 'false',\n\n    dataType: dataTypes.BUILT_IN,\n    fileSizeAlert: false,\n    uploadInProgress: false\n  };\n\n  componentDidMount() {\n    this.getMountedFilenames();\n    this.setUpWebsocket();\n  }\n\n  getMountedFilenames = async () => {\n    try {\n      const response = await fetch(`${BACKEND_URL}/getFilenames`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const json = await response.json();\n      json.xgFiles.unshift('none');\n      json.gbwtFiles.unshift('none');\n      json.gamIndices.unshift('none');\n\n      this.setState(state => {\n        const xgSelect = json.xgFiles.includes(state.xgSelect)\n          ? state.xgSelect\n          : 'none';\n        const gbwtSelect = json.gbwtFiles.includes(state.gbwtSelect)\n          ? state.gbwtSelect\n          : 'none';\n        const gamSelect = json.gamIndices.includes(state.gamSelect)\n          ? state.gamSelect\n          : 'none';\n        return {\n          xgSelectOptions: json.xgFiles,\n          gbwtSelectOptions: json.gbwtFiles,\n          gamSelectOptions: json.gamIndices,\n          xgSelect,\n          gbwtSelect,\n          gamSelect\n        };\n      });\n    } catch (error) {\n      console.log('POST to /getFilenames failed');\n    }\n  };\n\n  getPathNames = async (xgFile, isUploadedFile) => {\n    try {\n      const response = await fetch(`${BACKEND_URL}/getPathNames`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ xgFile, isUploadedFile })\n      });\n      const json = await response.json();\n      this.setState(state => {\n        const pathSelect = json.pathNames.includes(state.pathSelect)\n          ? state.pathSelect\n          : json.pathNames[0];\n        return {\n          pathSelectOptions: json.pathNames,\n          pathSelect,\n          anchorTrackName: pathSelect\n        };\n      });\n    } catch (error) {\n      console.log('POST to /getPathNames failed');\n    }\n  };\n\n  resetPathNames = () => {\n    this.setState({\n      pathSelectOptions: ['none'],\n      pathSelect: 'none'\n    });\n  };\n\n  handleDataSourceChange = event => {\n    const value = event.target.value;\n    DATA_SOURCES.forEach(ds => {\n      if (ds.name === value) {\n        this.setState({\n          xgFile: ds.xgFile,\n          gbwtFile: ds.gbwtFile,\n          gamFile: ds.gamFile,\n          anchorTrackName: ds.anchorTrackName,\n          dataPath: ds.useMountedPath ? 'mounted' : 'default',\n          nodeID: ds.defaultPosition,\n          dataType: dataTypes.BUILT_IN\n        });\n        return;\n      }\n    });\n    if (value === 'customFileUpload') {\n      this.setState(state => {\n        return {\n          xgFile: state.xgSelect,\n          gbwtFile: state.gbwtSelect,\n          gamFile: state.gamSelect,\n          anchorTrackName: state.pathSelect,\n          dataPath: 'upload',\n          dataType: dataTypes.FILE_UPLOAD\n        };\n      });\n    } else if (value === 'customMounted') {\n      this.setState(state => {\n        return {\n          xgFile: state.xgSelect,\n          gbwtFile: state.gbwtSelect,\n          gamFile: state.gamSelect,\n          anchorTrackName: state.pathSelect,\n          dataPath: 'mounted',\n          dataType: dataTypes.MOUNTED_FILES\n        };\n      });\n    } else if (value === 'syntheticExamples') {\n      this.setState({ dataType: dataTypes.EXAMPLES });\n    }\n  };\n\n  handleGoButton = () => {\n    if (this.props.dataOrigin !== dataOriginTypes.API) {\n      this.props.setColorSetting('haplotypeColors', 'greys');\n      this.props.setColorSetting('forwardReadColors', 'reds');\n    }\n    const fetchParams = {\n      nodeID: this.state.nodeID,\n      distance: this.state.distance,\n      byNode: this.state.byNode,\n      xgFile: this.state.xgFile,\n      gbwtFile: this.state.gbwtFile,\n      gamFile: this.state.gamFile,\n      anchorTrackName: this.state.anchorTrackName,\n      dataPath: this.state.dataPath\n    };\n    this.props.setFetchParams(fetchParams);\n  };\n\n  handleInputChange = event => {\n    const id = event.target.id;\n    const value = event.target.value;\n    this.setState({ [id]: value });\n    if (id === 'xgSelect') {\n      this.getPathNames(value, false);\n      this.setState({ xgFile: value });\n    } else if (id === 'gbwtSelect') {\n      this.setState({ gbwtFile: value });\n    } else if (id === 'gamSelect') {\n      this.setState({ gamFile: value });\n    } else if (id === 'pathSelect') {\n      this.setState({ anchorTrackName: value });\n    }\n  };\n\n  handleGoRight = () => {\n    this.setState(\n      state => ({\n        nodeID: Number(this.state.nodeID) + Number(this.state.distance)\n      }),\n      () => this.handleGoButton()\n    );\n  };\n\n  handleGoLeft = () => {\n    this.setState(\n      state => ({\n        nodeID: Math.max(\n          0,\n          Number(this.state.nodeID) - Number(this.state.distance)\n        )\n      }),\n      () => this.handleGoButton()\n    );\n  };\n\n  handleFileUpload = (fileType, fileName) => {\n    this.setState({ [fileType]: fileName });\n  };\n\n  showFileSizeAlert = () => {\n    this.setState({ fileSizeAlert: true });\n  };\n\n  setUploadInProgress = val => {\n    this.setState({ uploadInProgress: val });\n  };\n\n  setUpWebsocket = () => {\n    this.ws = new WebSocket(BACKEND_URL.replace(/^http/, 'ws'));\n    this.ws.onmessage = message => {\n      this.getMountedFilenames();\n    };\n    this.ws.onclose = event => {\n      setTimeout(this.setUpWebsocket, 1000);\n    };\n    this.ws.onerror = event => {\n      this.ws.close();\n    };\n  };\n\n  render() {\n    let dataSourceDropdownOptions = DATA_SOURCES.map(ds => {\n      return (\n        <option value={ds.name} key={ds.name}>\n          {ds.name}\n        </option>\n      );\n    });\n    dataSourceDropdownOptions.push(\n      <option value=\"syntheticExamples\" key=\"syntheticExamples\">\n        synthetic data examples\n      </option>,\n      <option value=\"customFileUpload\" key=\"customFileUpload\">\n        custom (file upload)\n      </option>,\n      <option value=\"customMounted\" key=\"customMounted\">\n        custom (mounted files)\n      </option>\n    );\n\n    const mountedFilesFlag = this.state.dataType === dataTypes.MOUNTED_FILES;\n    const uploadFilesFlag = this.state.dataType === dataTypes.FILE_UPLOAD;\n    const examplesFlag = this.state.dataType === dataTypes.EXAMPLES;\n\n    return (\n      <div>\n        <Container fluid={true}>\n          <Row>\n            <Col md=\"auto\">\n              <img src=\"./logo.png\" alt=\"Logo\" />\n            </Col>\n            <Col>\n              <Form inline>\n                <Label\n                  className=\"tight-label mb-2 mr-sm-2 mb-sm-0 ml-2\"\n                  for=\"dataSourceSelect\"\n                >\n                  Data:\n                </Label>\n                <Input\n                  type=\"select\"\n                  id=\"dataSourceSelect\"\n                  className=\"custom-select mb-2 mr-sm-4 mb-sm-0\"\n                  onChange={this.handleDataSourceChange}\n                >\n                  {dataSourceDropdownOptions}\n                </Input>\n                {mountedFilesFlag && (\n                  <MountedDataFormRow\n                    xgSelect={this.state.xgSelect}\n                    xgSelectOptions={this.state.xgSelectOptions}\n                    gbwtSelect={this.state.gbwtSelect}\n                    gbwtSelectOptions={this.state.gbwtSelectOptions}\n                    gamSelect={this.state.gamSelect}\n                    gamSelectOptions={this.state.gamSelectOptions}\n                    pathSelect={this.state.pathSelect}\n                    pathSelectOptions={this.state.pathSelectOptions}\n                    handleInputChange={this.handleInputChange}\n                  />\n                )}\n                {uploadFilesFlag && (\n                  <FileUploadFormRow\n                    pathSelect={this.state.pathSelect}\n                    pathSelectOptions={this.state.pathSelectOptions}\n                    handleInputChange={this.handleInputChange}\n                    getPathNames={this.getPathNames}\n                    resetPathNames={this.resetPathNames}\n                    handleFileUpload={this.handleFileUpload}\n                    showFileSizeAlert={this.showFileSizeAlert}\n                    setUploadInProgress={this.setUploadInProgress}\n                  />\n                )}\n              </Form>\n              <Alert\n                color=\"danger\"\n                isOpen={this.state.fileSizeAlert}\n                toggle={() => {\n                  this.setState({ fileSizeAlert: false });\n                }}\n                className=\"mt-3\"\n              >\n                <strong>File size too big! </strong>\n                You may only upload files with a maximum size of{' '}\n                {MAX_UPLOAD_SIZE_DESCRIPTION}.\n              </Alert>\n              {examplesFlag ? (\n                <ExampleSelectButtons\n                  setDataOrigin={this.props.setDataOrigin}\n                  setColorSetting={this.props.setColorSetting}\n                />\n              ) : (\n                <DataPositionFormRow\n                  nodeID={this.state.nodeID}\n                  distance={this.state.distance}\n                  byNode={this.state.byNode}\n                  handleInputChange={this.handleInputChange}\n                  handleGoLeft={this.handleGoLeft}\n                  handleGoRight={this.handleGoRight}\n                  handleGoButton={this.handleGoButton}\n                  uploadInProgress={this.state.uploadInProgress}\n                />\n              )}\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default HeaderForm;\n","import React, { Component } from 'react';\nimport * as tubeMap from '../util/tubemap';\n\nclass TubeMap extends Component {\n  componentDidMount() {\n    this.createTubeMap();\n  }\n\n  componentDidUpdate() {\n    this.createTubeMap();\n  }\n\n  createTubeMap = () => {\n    tubeMap.create({\n      svgID: '#svg',\n      nodes: this.props.nodes,\n      tracks: this.props.tracks,\n      reads: this.props.reads\n    });\n  };\n\n  render() {\n    return <svg id=\"svg\" />;\n  }\n}\n\nexport default TubeMap;\n","import React, { Component } from 'react';\nimport TubeMap from './TubeMap';\nimport config from '../config.json';\nimport { Container, Row, Alert } from 'reactstrap';\nimport * as tubeMap from '../util/tubemap';\nimport { dataOriginTypes } from '../enums';\n\nconst BACKEND_URL = config.BACKEND_URL || `http://${window.location.host}`;\n\nclass TubeMapContainer extends Component {\n  state = {\n    isLoading: true,\n    error: null\n  };\n\n  componentDidMount() {\n    this.getRemoteTubeMapData();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.dataOrigin !== prevProps.dataOrigin) {\n      this.props.dataOrigin === dataOriginTypes.API\n        ? this.getRemoteTubeMapData()\n        : this.getExampleData();\n    } else if (this.props.fetchParams !== prevProps.fetchParams) {\n      this.getRemoteTubeMapData();\n    }\n  }\n\n  render() {\n    const { isLoading, error } = this.state;\n\n    if (error) {\n      console.log(error);\n      const message = error.message ? error.message : error;\n      return (\n        <Container>\n          <Row>\n            <Alert color=\"danger\">{message}</Alert>\n          </Row>\n        </Container>\n      );\n    }\n\n    if (isLoading) {\n      return (\n        <Container>\n          <Row>\n            <div id=\"loaderContainer\">\n              <div id=\"loader\" />\n            </div>\n          </Row>\n        </Container>\n      );\n    }\n\n    return (\n      <div id=\"tubeMapSVG\">\n        <TubeMap\n          nodes={this.state.nodes}\n          tracks={this.state.tracks}\n          reads={this.state.reads}\n        />\n      </div>\n    );\n  }\n\n  getRemoteTubeMapData = async () => {\n    this.setState({ isLoading: true, error: null });\n    try {\n      const response = await fetch(`${BACKEND_URL}/getChunkedData`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(this.props.fetchParams)\n      });\n      const json = await response.json();\n      if (json.graph === undefined) {\n        // We did not get back a graph, only (possibly) an error.\n        const error = json.error || 'Fetching remote data returned error';\n        this.setState({ error: error, isLoading: false });\n      } else {\n        const nodes = tubeMap.vgExtractNodes(json.graph);\n        const tracks = tubeMap.vgExtractTracks(json.graph);\n        const reads = tubeMap.vgExtractReads(nodes, tracks, json.gam);\n        this.setState({\n          isLoading: false,\n          nodes,\n          tracks,\n          reads\n        });\n      }\n    } catch (error) {\n      this.setState({ error: error, isLoading: false });\n    }\n  };\n\n  getExampleData = async () => {\n    this.setState({ isLoading: true, error: null });\n    let nodes, tracks, reads;\n    const data = await import('../util/demo-data');\n    nodes = data.inputNodes;\n    switch (this.props.dataOrigin) {\n      case dataOriginTypes.EXAMPLE_1:\n        tracks = data.inputTracks1;\n        break;\n      case dataOriginTypes.EXAMPLE_2:\n        tracks = data.inputTracks2;\n        break;\n      case dataOriginTypes.EXAMPLE_3:\n        tracks = data.inputTracks3;\n        break;\n      case dataOriginTypes.EXAMPLE_4:\n        tracks = data.inputTracks4;\n        break;\n      case dataOriginTypes.EXAMPLE_5:\n        tracks = data.inputTracks5;\n        break;\n      case dataOriginTypes.EXAMPLE_6:\n        const vg = JSON.parse(data.k3138);\n        nodes = tubeMap.vgExtractNodes(vg);\n        tracks = tubeMap.vgExtractTracks(vg);\n        reads = tubeMap.vgExtractReads(\n          nodes,\n          tracks,\n          this.readsFromStringToArray(data.demoReads)\n        );\n        break;\n      default:\n        console.log('invalid data origin type');\n    }\n\n    this.setState({ isLoading: false, nodes, tracks, reads });\n  };\n\n  readsFromStringToArray = readsString => {\n    const lines = readsString.split('\\n');\n    const result = [];\n    lines.forEach(line => {\n      if (line.length > 0) {\n        result.push(JSON.parse(line));\n      }\n    });\n    return result;\n  };\n}\n\nexport default TubeMapContainer;\n","import React, { Component } from 'react';\nimport { Col, Label, Input, FormGroup } from 'reactstrap';\n\nconst colorMap = new Map([\n  ['colorful', 'plainColors'],\n  ['greyscale', 'greys'],\n  ['reds', 'reds'],\n  ['blues', 'blues'],\n  ['pale colors', 'lightColors']\n]);\n\nclass RadioRow extends Component {\n  onChange = event => {\n    this.props.setColorSetting(\n      this.props.trackType,\n      colorMap.get(event.target.value)\n    );\n  };\n\n  render() {\n    const colorRadios = Array.from(colorMap).map(([keyColor, valueColor]) => {\n      return (\n        <Col xs=\"auto\" key={keyColor}>\n          <FormGroup check>\n            <Label check>\n              <Input\n                type=\"radio\"\n                value={keyColor}\n                checked={this.props.color === valueColor}\n                onChange={this.onChange}\n              />\n              {keyColor}\n            </Label>\n          </FormGroup>\n        </Col>\n      );\n    });\n    return (\n      <FormGroup row className=\"mb-1\">\n        <Col sm=\"2\">{this.props.rowHeading}:</Col>\n        {colorRadios}\n      </FormGroup>\n    );\n  }\n}\n\nexport default RadioRow;\n","import React, { Component } from 'react';\nimport {\n  Container,\n  Collapse,\n  CardBody,\n  Card,\n  CardHeader,\n  Form,\n  Label,\n  Input,\n  FormGroup\n} from 'reactstrap';\nimport RadioRow from './RadioRow';\n\nclass VisualizationOptions extends Component {\n  state = {\n    isOpenLegend: false,\n    isOpenVisualizationOptions: true\n  };\n\n  toggleLegend = e => {\n    this.setState({ isOpenLegend: !this.state.isOpenLegend });\n    e.preventDefault();\n  };\n\n  toggleVisOptions = e => {\n    this.setState({\n      isOpenVisualizationOptions: !this.state.isOpenVisualizationOptions\n    });\n    e.preventDefault();\n  };\n\n  render() {\n    const { visOptions, toggleFlag } = this.props;\n    return (\n      <Container>\n        <div id=\"accordion\">\n          <Card>\n            <CardHeader id=\"legendCard\">\n              <h5 className=\"mb-0\">\n                <a href=\"#collapse\" onClick={this.toggleLegend}>\n                  Legend\n                </a>\n              </h5>\n            </CardHeader>\n            <Collapse isOpen={this.state.isOpenLegend}>\n              <CardBody>\n                <div id=\"legendDiv\" />\n              </CardBody>\n            </Collapse>\n          </Card>\n\n          <Card>\n            <CardHeader id=\"visOptionsCard\">\n              <h5 className=\"mb-0\">\n                <a href=\"#collapse\" onClick={this.toggleVisOptions}>\n                  Visualization Options\n                </a>\n              </h5>\n            </CardHeader>\n            <Collapse isOpen={this.state.isOpenVisualizationOptions}>\n              <CardBody>\n                <FormGroup>\n                  <h5>General</h5>\n                  <FormGroup check>\n                    <Label check>\n                      <Input\n                        type=\"checkbox\"\n                        checked={visOptions.removeRedundantNodes}\n                        onChange={() => toggleFlag('removeRedundantNodes')}\n                      />\n                      Remove redundant nodes\n                    </Label>\n                  </FormGroup>\n                  <FormGroup check>\n                    <Label check>\n                      <Input\n                        type=\"checkbox\"\n                        checked={visOptions.compressedView}\n                        onChange={() => toggleFlag('compressedView')}\n                      />\n                      Compressed view\n                    </Label>\n                  </FormGroup>\n                </FormGroup>\n\n                <FormGroup>\n                  <h5>Sequence Reads</h5>\n                  <FormGroup check>\n                    <Label check>\n                      <Input\n                        type=\"checkbox\"\n                        checked={visOptions.showReads}\n                        onChange={() => toggleFlag('showReads')}\n                      />\n                      Show sequence reads\n                    </Label>\n                  </FormGroup>\n                  <FormGroup check>\n                    <Label check>\n                      <Input\n                        type=\"checkbox\"\n                        checked={visOptions.showSoftClips}\n                        onChange={() => toggleFlag('showSoftClips')}\n                      />\n                      Show soft clips\n                    </Label>\n                  </FormGroup>\n                </FormGroup>\n\n                <h5>Colors</h5>\n                <Form>\n                  <RadioRow\n                    rowHeading=\"Haplotypes\"\n                    color={visOptions.haplotypeColors}\n                    trackType=\"haplotypeColors\"\n                    setColorSetting={this.props.setColorSetting}\n                  />\n                  <RadioRow\n                    rowHeading=\"Reads (forward strand)\"\n                    color={visOptions.forwardReadColors}\n                    trackType=\"forwardReadColors\"\n                    setColorSetting={this.props.setColorSetting}\n                  />\n                  <RadioRow\n                    rowHeading=\"Reads (reverse strand)\"\n                    color={visOptions.reverseReadColors}\n                    trackType=\"reverseReadColors\"\n                    setColorSetting={this.props.setColorSetting}\n                  />\n                </Form>\n              </CardBody>\n            </Collapse>\n          </Card>\n        </div>\n      </Container>\n    );\n  }\n}\n\nexport default VisualizationOptions;\n","import React, { Component } from 'react';\nimport './App.css';\nimport HeaderForm from './components/HeaderForm';\nimport TubeMapContainer from './components/TubeMapContainer';\nimport CustomizationAccordion from './components/CustomizationAccordion';\nimport { dataOriginTypes } from './enums';\nimport * as tubeMap from './util/tubemap';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      fetchParams: {\n        nodeID: '1',\n        distance: '100',\n        byNode: 'false',\n        xgFile: 'snp1kg-BRCA1.vg.xg',\n        gbwtFile: '',\n        gamFile: 'NA12878-BRCA1.sorted.gam',\n        anchorTrackName: '17',\n        dataPath: 'default'\n      },\n      dataOrigin: dataOriginTypes.API,\n      visOptions: {\n        removeRedundantNodes: true,\n        compressedView: false,\n        showReads: true,\n        showSoftClips: true,\n        haplotypeColors: 'greys',\n        forwardReadColors: 'reds',\n        reverseReadColors: 'blues'\n      }\n    };\n  }\n\n  componentDidUpdate() {\n    const { visOptions } = this.state;\n    visOptions.compressedView\n      ? tubeMap.setNodeWidthOption(1)\n      : tubeMap.setNodeWidthOption(0);\n    tubeMap.setMergeNodesFlag(visOptions.removeRedundantNodes);\n    tubeMap.setShowReadsFlag(visOptions.showReads);\n    tubeMap.setSoftClipsFlag(visOptions.showSoftClips);\n    tubeMap.setColorSet('haplotypeColors', visOptions.haplotypeColors);\n    tubeMap.setColorSet('forwardReadColors', visOptions.forwardReadColors);\n    tubeMap.setColorSet('reverseReadColors', visOptions.reverseReadColors);\n  }\n\n  setFetchParams = fetchParams => {\n    this.setState({\n      fetchParams: fetchParams,\n      dataOrigin: dataOriginTypes.API\n    });\n  };\n\n  toggleVisOptionFlag = flagName => {\n    this.setState(state => ({\n      visOptions: {\n        ...state.visOptions,\n        [flagName]: !state.visOptions[flagName]\n      }\n    }));\n  };\n\n  setColorSetting = (key, value) => {\n    this.setState(state => ({\n      visOptions: {\n        ...state.visOptions,\n        [key]: value\n      }\n    }));\n  };\n\n  setDataOrigin = dataOrigin => {\n    this.setState({ dataOrigin });\n  };\n\n  render() {\n    return (\n      <div>\n        <HeaderForm\n          setFetchParams={this.setFetchParams}\n          setDataOrigin={this.setDataOrigin}\n          setColorSetting={this.setColorSetting}\n          dataOrigin={this.state.dataOrigin}\n        />\n        <TubeMapContainer\n          fetchParams={this.state.fetchParams}\n          dataOrigin={this.state.dataOrigin}\n        />\n        <CustomizationAccordion\n          visOptions={this.state.visOptions}\n          toggleFlag={this.toggleVisOptionFlag}\n          setColorSetting={this.setColorSetting}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}
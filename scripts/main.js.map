{"version":3,"sources":["../.tmp/scripts/node_modules/browser-pack/_prelude.js","../.tmp/scripts/app/scripts/main.js","../.tmp/scripts/app/scripts/tubemap.js","../.tmp/scripts/config.default.json","../.tmp/scripts/config.json","../.tmp/scripts/node_modules/merge-json/index.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","_interopRequireWildcard","obj","__esModule","newObj","key","Object","prototype","hasOwnProperty","default","getPathNames","xgFile","$","val","ajax","type","url","BACKEND_URL","crossDomain","data","dataType","success","response","optNone","document","getElementById","createElement","value","innerHTML","append","pathNames","forEach","fn","error","responseData","textStatus","errorThrown","console","log","prepareForTubeMap","d3","select","selectAll","remove","attr","w","width","html","setAttribute","getRemoteTubeMapData","nodeID","distance","byNode","selectedIndex","gbwtFile","gamIndex","anchorTrackName","useMountedPath","DATA_SOURCES","ds","name","undefined","graph","innerText","style","display","nodes","tubeMap","vgExtractNodes","tracks","vgExtractTracks","createTubeMap","vgExtractReads","gam","reads","create","svgID","endTime","performance","now","startTime","clearDropdownsWithFilenames","xgSelect","hasChildNodes","removeChild","lastChild","opt1","appendChild","gbwtSelect","opt2","gamIndexSelect","opt3","populateDropdownsWithFilenames","xgSelectValue","options","gbwtSelectValue","gamSelectValue","xgFiles","filename","opt","selected","gbwtFiles","gamIndices","setUpWebsocket","ws","WebSocket","replace","onmessage","message","onclose","event","setTimeout","onerror","close","_mergeJson","mergeJSON","_tubemap","CONFIG","merge","err","window","location","host","change","prop","defaultPosition","empty","onclick","position","Number","Math","max","Width","parent","selection","currentX","zoom","translate","currentY","scale","scaleExtent","translateX","translateY","node","getBBox","currentDistance","then","center","checked","setMergeNodesFlag","setNodeWidthOption","setShowReadsFlag","setSoftClipsFlag","radios","getElementsByClassName","trackType","colorSet","this","setColorSet","svgN","svgData","XMLSerializer","serializeToString","svgBlob","Blob","svgUrl","URL","createObjectURL","downloadLink","href","download","body","click","onload","dsSelect","panX","panY","panTop","panLeft","panDown","mousedown","preventDefault","pageX","pageY","container","scrollLeft","scrollTop","mousemove","newX","newY","mouseup","params","svg","inputNodes","JSON","parse","stringify","inputTracks","inputReads","bed","config","clickableNodesFlag","clickableNodes","hideLegendFlag","hideLegend","drawLegend","moveTrackToFirstPosition","index","unshift","splice","straightenTrack","j","nodesToInvert","currentSequence","nodeName","sequence","charAt","substr","indexOf","push","seq","split","reverse","join","changeTrackVisibility","trackID","id","hidden","changeExonVisibility","showExonsFlag","mergeNodesFlag","showSoftClips","showReads","nodeWidthOption","trackRectangles","trackCurves","trackCorners","trackVerticalRectangles","trackRectanglesStep3","assignments","extraLeft","extraRight","maxYCoordinate","minYCoordinate","maxXCoordinate","trackForRuler","assignColorSets","nodeMap","generateNodeMap","generateTrackIndexSequences","generateNodeWidth","generateNodeSuccessors","generateNodeOrder","reverseReversedReads","mergeNodes","numberOfNodes","numberOfTracks","generateNodeDegree","DEBUG","maxOrder","getMaxOrder","calculateTrackWidth","generateLaneAssignment","addTrackFeatures","generateNodeXCoords","generateReadOnlyNodeAttributes","placeReads","concat","generateSVGShapesFromPath","getImageDimensions","alignSVG","defineSVGPatterns","drawTrackRectangles","drawTrackCurves","drawReversalsByColor","dNodes","removeUnusedNodes","drawNodes","drawLabels","drawRuler","drawMismatches","nodesPerOrder","orderY","Map","has","order","set","y","contentHeight","get","assignReadsToNodes","incomingReads","outgoingReads","internalReads","read","idx","path","element","pathIdx","generateBasicPathsForReads","sortedNodes","slice","sort","compareNodesByOrder","compareReadIncomingSegmentsByComingFrom","occupiedUntil","readElement","setOccupiedUntil","maxY","compareReadOutgoingSegmentsByGoingTo","occupiedFrom","firstNodeOffset","incReadElementIndices","incRead","incReadPathElement","compareInternalReads","readIdx","currentRead","finalNodeCoverLength","heightIncrease","adjustVertically3","bottomY","calculateBottomY","elementsWithoutNode","readIndex","pathIndex","previousY","compareNoNodeReadsByPreviousY","segment","map","sequenceLength","b","segmentA","segmentB","pathIndexA","pathIndexB","nodeA","nodeB","beginDiff","pathA","pathB","idxA","idxB","track","currentNodeIndex","currentNodeIsForward","currentNode","previousNode","previousNodeIsForward","isPositive","abs","indexSequence","isForward","_j","pos","is_reverse","sequenceNew","_i","nodeWidth","mismatches","mm","getReverseComplement","temp","seqLength","s","result","tracksOrReads","allNodes","x","pixelWidth","min","behavior","on","svg2","current","follower","successors","predecessors","generateNodeOrderOfSingleTrack","forwardOrder","backwardOrder","minOrder","nodeIndex","increaseOrderForAllNodes","generateNodeOrderTrackBeginning","anchorIndex","currentOrder","increment","modifiedSequence","rightIndex","leftIndex","tracksAndReads","uninvert","increaseOrderForSuccessors","isSuccessor","degree","_j2","_j3","_j4","first","second","visited","Array","fill","stack","pop","childIndex","amount","startingNode","tabuNode","newOrder","increasedOrders","queue","shift","successor","predecessor","nextX","extra","calculateExtraSpace","leftSideEdges","rightSideEdges","_i2","_i3","segmentNumber","prevSegmentPerOrderPerTrack","trackNo","lane","addToAssignment","_i4","_j5","_j6","_i5","generateSingleLaneAssignment","segmentID","compareToFromSame","getIdealLanesAndCoords","assignment","idealLane","idealY","currentLane","potentialAdjustmentValues","Set","prevNameIsNull","prevTrack","compareByIdealLane","topLane","add","adjustVertically","verticalAdjustment","minAdjustmentCost","MAX_SAFE_INTEGER","moveBy","getVerticalAdjustmentCost","adjustBy","assignmentNode","aNode","nodeStart","nodeEnd","feature","line","start","end","continue","features","allAreFour","round","freq","useColorScheme","colorScheme","haplotypeColors","getColorSet","forwardReadColors","reverseReadColors","exonColors","colorSetName","plainColors","reds","blues","greys","lightColors","generateTrackColor","highlight","getReadXStart","getXCoordinateOfBaseWithinNode","getReadXEnd","base","nodeLeftX","nodeRightX","xStart","xEnd","yStart","yEnd","trackColor","dummy","reversalFlag","orderStartX","orderEndX","_i6","createFeatureRectangle","color","laneChange","generateForwardToReverse","generateReverseToForward","nodeXStart","nodeXEnd","rectXStart","currentHighlight","co","featureXStart","featureXEnd","trackWidth","yTop","yBottom","d","corners","rectangles","rect","filter","filterObjectByAttribute","drawTrackCorners","enter","nodeMouseOver","nodeMouseOut","nodeDoubleClick","text","rulerTrackIndex","rulerTrack","markingInterval","indexOfFirstBaseInNode","indexOfFirstBase","atLeastOneMarkingDrawn","xCoordOfPreviousMarking","firstNode","drawRulerMarking","nextMarking","ceil","xCoordOfMarking","sequencePosition","xCoordinate","attribute","item","trackMouseOver","trackMouseOut","trackDoubleClick","compareCurvesByLineChanges","pattern","height","patternUnits","patternTransform","myTrackCurves","curve","xMiddle","content","listeners","addEventListener","each","vg","getComputedTextLength","isCompletelyReverse","mapping","node_id","index2","myNodes","myTracks","myReads","extracted","nodeNames","parseInt","firstIndex","lastIndex","edit","offset","toString","posWithinNode","from_length","finalNodeEdit","nodeName2","pred","succ","_i7","_i8","from","mergeOffset","mergeOrigin","mergeableWithPred","_i9","mergeableWithSucc","mismatch","_i10","donor","_i11","_i12","predecessorIndex","successorIndex","trackIdx","drawInsertion","x2","drawDeletion","_x","drawSubstitution","nodeY","insertionMouseOver","insertionMouseOut","x1","substitutionMouseOver","substitutionMouseOut","deletionMouseOver","deletionMouseOut","defineProperty","jsonC","constructor","isJSON","json","json1","json2","isArray"],"mappings":"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CAxO,EAAAyJ,kBAAAA,EACAzJ,EAAA4J,iBAAAA,EACA5J,EAAA2J,iBAAAA,EACA3J,EAAAkK,YAAAA,EACAlK,EAAA0J,mBAAAA,EACA1J,EAAAud,eAAAA,GACAvd,EAAAwE,eAAAA,GACAxE,EAAA0E,gBAAAA,GACA1E,EAAA4E,eAAAA,EACA,IAAA0L,KAAA,EACA4N,IACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEAD,IACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEAD,IACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEAD,IACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEAI,IACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEAV,MACAE,MACAC,MACAC,MACA7Y,OAAA,GACAoH,OAAA,GACAxD,GAAA5I,EAAA4I,SAAA,GACAyD,MACAI,MACAC,MACApI,OAAA,GACAG,OAAA,GACAK,OAAA,GACAqL,OAAA,GACAC,OAAA,GACAT,OAAA,GACAkC,OAAA,GACA1C,MACAC,MACAC,MACAkB,OAAA,GACA3D,IACA8B,gBAAA,EACA7B,oBAAA,EACA4B,eAAA,EACA+O,YAAA,EACA3O,gBAAA,EACAD,WAAA,EACAD,eAAA,EACA8O,gBAAA,QACAE,kBAAA,OACAC,kBAAA,QACAC,WAAA,cACA9Q,gBAAA,GAEA+B,MACAC,MACAC,MACAC,MACAC,MACAI,GAAA,EACAC,GAAA,EACAC,GAAA,EACAC,OAAA,GACA9C,OAAA,2BC9GAvM,EAAAJ,SACAqB,aAAA,EACAyC,eAEAE,KAAA,eACAjD,OAAA,qBACA4C,SAAA,0BACAC,gBAAA,KACAC,gBAAA,EACAoE,gBAAA,MAGAjE,KAAA,SACAjD,OAAA,eACA4C,SAAA,2BACAC,gBAAA,MACAC,gBAAA,EACAoE,gBAAA,MAGAjE,KAAA,qBACAjD,OAAA,UACA2C,SAAA,YACAE,gBAAA,IACAC,gBAAA,EACAoE,gBAAA,+BCzBA7H,EAAAJ,SACAqB,YAAA,yBACAyC,eAEAE,KAAA,WACAjD,OAAA,iBACA4C,SAAA,8BACAC,gBAAA,KACAC,gBAAA,EACAoE,gBAAA,sCCRA,GAAAoe,MAAAC,YAEAC,EAAA,SAAAC,GACA,SAAAA,GAAAA,EAAAF,cAAAD,GAOArmB,GAAAumB,OAAAA,CAGA,IAAAhf,GAAA,SAAAkf,EAAAC,GACA,GAAAzP,GAAA,IACA,IAAAsP,EAAAG,GAAA,CAEA,GADAzP,KACAsP,EAAAE,GACA,IAAA,GAAAhmB,KAAAgmB,GACAxP,EAAAxW,GAAAgmB,EAAAhmB,EAIA,KAAA,GAAAA,KAAAimB,GACA,gBAAAzP,GAAAxW,IAAA,gBAAAimB,GACAzP,EAAAxW,GAAA8G,EAAA0P,EAAAxW,GAAAimB,EAAAjmB,IAEAwW,EAAAxW,GAAAimB,EAAAjmB,OAGA,IAAA6Y,MAAAqN,QAAAF,IAAAnN,MAAAqN,QAAAD,GAAA,CACAzP,EAAAwP,CAEA,KAAA,GAAAlnB,GAAA,EAAAA,EAAAmnB,EAAAxmB,OAAAX,KACA,IAAA0X,EAAAnJ,QAAA4Y,EAAAnnB,MACA0X,EAAAA,EAAA/W,QAAAwmB,EAAAnnB,QAIA0X,GAAAyP,CAGA,OAAAzP,GAGAjX,GAAA0H,MAAAH","file":"main.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","'use strict';\nvar _mergeJson = require('merge-json');\nvar mergeJSON = _interopRequireWildcard(_mergeJson);\nvar _tubemap = require('./tubemap');\nvar tubeMap = _interopRequireWildcard(_tubemap);\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    } else {\n        var newObj = {};\n        if (obj != null) {\n            for (var key in obj) {\n                if (Object.prototype.hasOwnProperty.call(obj, key))\n                    newObj[key] = obj[key];\n            }\n        }\n        newObj.default = obj;\n        return newObj;\n    }\n}\nvar CONFIG = require('../../config.default.json');\ntry {\n    CONFIG = mergeJSON.merge(CONFIG, require('../../config.json'));\n} catch (err) {\n}\nvar BACKEND_URL = CONFIG.BACKEND_URL || 'http://' + window.location.host;\nvar DATA_SOURCES = CONFIG.DATA_SOURCES;\nvar startTime = 0;\n$('#dataSourceSelect').change(function () {\n    $('#distance').prop('value', '100');\n    $('#unitSelect').prop('value', '1');\n    if ($('#dataSourceSelect').val() === 'custom') {\n        $('#reloadButton').prop('disabled', false);\n        $('#xgFileSelect').prop('disabled', false);\n        $('#gbwtFileSelect').prop('disabled', false);\n        $('#gamIndexSelect').prop('disabled', false);\n        $('#pathNameSelect').prop('disabled', false);\n        $('#position').prop('value', '1');\n    } else {\n        $('#reloadButton').prop('disabled', true);\n        $('#xgFileSelect').prop('disabled', true);\n        $('#gbwtFileSelect').prop('disabled', true);\n        $('#gamIndexSelect').prop('disabled', true);\n        $('#pathNameSelect').prop('disabled', true);\n        DATA_SOURCES.forEach(function (ds) {\n            if (ds.name === $('#dataSourceSelect').val()) {\n                $('#position').prop('value', ds.defaultPosition);\n            }\n        });\n    }\n});\n$('#xgFileSelect').change(function () {\n    $('#pathNameSelect').empty();\n    if ($('#xgFileSelect').val() === 'none') {\n        var opt = document.createElement('option');\n        opt.value = 'none';\n        opt.innerHTML = 'None';\n        $('#pathNameSelect').append(opt);\n    } else {\n        getPathNames();\n    }\n});\nfunction getPathNames() {\n    var xgFile = $('#xgFileSelect').val();\n    $.ajax({\n        type: 'POST',\n        url: BACKEND_URL + '/getPathNames',\n        crossDomain: true,\n        data: { xgFile: xgFile },\n        dataType: 'json',\n        success: function success(response) {\n            var pathNameSelect = document.getElementById('pathNameSelect');\n            var optNone = document.createElement('option');\n            optNone.value = 'none';\n            optNone.innerHTML = 'None';\n            $('#pathNameSelect').append(optNone);\n            response.pathNames.forEach(function (fn) {\n                var opt = document.createElement('option');\n                $('#pathNameSelect').append('<option value=\"' + fn + '\" selected>' + fn + '</option>');\n            });\n        },\n        error: function error(responseData, textStatus, errorThrown) {\n            console.log('POST failed.');\n        }\n    });\n}\ndocument.getElementById('reloadButton').onclick = function () {\n    populateDropdownsWithFilenames();\n};\ndocument.getElementById('goButton').onclick = function () {\n    startTime = performance.now();\n    prepareForTubeMap();\n};\ndocument.getElementById('goLeftButton').onclick = function () {\n    var position = Number(document.getElementById('position').value);\n    var distance = Number(document.getElementById('distance').value);\n    document.getElementById('position').value = Math.max(position - distance, 0);\n    prepareForTubeMap();\n};\nvar zoomFactor = 2;\ndocument.getElementById('zoomInButton').onclick = function () {\n    var Width = $('#svg').parent().width();\n    var selection = d3.select('#svg');\n    var currentX = -tubeMap.zoom.translate()[0];\n    var currentY = tubeMap.zoom.translate()[1];\n    if (tubeMap.zoom.scale() * zoomFactor <= tubeMap.zoom.scaleExtent()[1]) {\n        var translateX = (zoomFactor * Width - Width) / 2 + zoomFactor * currentX;\n        var translateY = zoomFactor * currentY;\n        tubeMap.zoom.translate([\n            -translateX,\n            translateY\n        ]);\n        tubeMap.zoom.event(selection);\n        tubeMap.zoom.scale(tubeMap.zoom.scale() * zoomFactor);\n        tubeMap.zoom.event(selection);\n    }\n};\ndocument.getElementById('zoomOutButton').onclick = function () {\n    var Width = $('#svg').parent().width();\n    var selection = d3.select('#svg');\n    var currentX = -tubeMap.zoom.translate()[0];\n    var currentY = tubeMap.zoom.translate()[1];\n    if (tubeMap.zoom.scale() / zoomFactor > tubeMap.zoom.scaleExtent()[0]) {\n        var translateX = (Width / zoomFactor - Width) / 2 + currentX / zoomFactor;\n        var translateY = currentY / zoomFactor;\n        tubeMap.zoom.translate([\n            -translateX,\n            translateY\n        ]);\n        tubeMap.zoom.event(selection);\n        tubeMap.zoom.scale(tubeMap.zoom.scale() / zoomFactor);\n        tubeMap.zoom.event(selection);\n    } else if (selection.node().getBBox().width < Width) {\n        var currentDistance = Number(document.getElementById('distance').value);\n        document.getElementById('distance').value = currentDistance * 2;\n        prepareForTubeMap().then(function () {\n            tubeMap.zoom.scale(tubeMap.zoom.scaleExtent()[0]);\n            tubeMap.zoom.event(selection);\n            var center = Width / 2;\n            var translateX = center - selection.node().getBBox().width / 2;\n            var translateY = currentY / zoomFactor;\n            tubeMap.zoom.translate([\n                translateX,\n                translateY\n            ]);\n            tubeMap.zoom.event(selection);\n        });\n    }\n};\ndocument.getElementById('goRightButton').onclick = function () {\n    var position = Number(document.getElementById('position').value);\n    var distance = Number(document.getElementById('distance').value);\n    document.getElementById('position').value = position + distance;\n    prepareForTubeMap();\n};\nfunction prepareForTubeMap() {\n    d3.select('#svg').selectAll('*').remove();\n    d3.select('#svg').attr('width', 100);\n    var w = $('#tubeMapSVG').width();\n    $('#legendDiv').html('');\n    document.getElementById('loader').setAttribute('style', 'left:' + (w / 2 - 25) + 'px');\n    return getRemoteTubeMapData();\n}\nfunction getRemoteTubeMapData() {\n    var nodeID = document.getElementById('position').value;\n    var distance = document.getElementById('distance').value;\n    var byNode = document.getElementById('unitSelect').selectedIndex !== 0;\n    var xgFile = $('#xgFileSelect').val();\n    var gbwtFile = $('#gbwtFileSelect').val();\n    var gamIndex = $('#gamIndexSelect').val();\n    var anchorTrackName = $('#pathNameSelect').val();\n    var useMountedPath = true;\n    DATA_SOURCES.forEach(function (ds) {\n        if (ds.name === $('#dataSourceSelect').val()) {\n            console.log('found');\n            xgFile = ds.xgFile;\n            gbwtFile = ds.gbwtFile;\n            gamIndex = ds.gamIndex;\n            anchorTrackName = ds.anchorTrackName;\n            useMountedPath = ds.useMountedPath;\n        }\n    });\n    console.log('useMountedPath = ' + useMountedPath);\n    console.log('anchorTrackName = ' + anchorTrackName);\n    return $.ajax({\n        type: 'POST',\n        url: BACKEND_URL + '/chr22_v4',\n        crossDomain: true,\n        data: {\n            nodeID: nodeID,\n            distance: distance,\n            byNode: byNode,\n            xgFile: xgFile,\n            gbwtFile: gbwtFile,\n            gamIndex: gamIndex,\n            anchorTrackName: anchorTrackName,\n            useMountedPath: useMountedPath\n        },\n        dataType: 'json',\n        success: function success(response) {\n            if (response.graph === undefined) {\n                document.getElementById('inputError').innerText = response.error;\n                document.getElementById('loader').style.display = 'none';\n            } else {\n                document.getElementById('inputError').innerText = '';\n                var nodes = tubeMap.vgExtractNodes(response.graph);\n                var tracks = tubeMap.vgExtractTracks(response.graph);\n                var reads = tubeMap.vgExtractReads(nodes, tracks, response.gam);\n                createTubeMap(nodes, tracks, reads);\n            }\n        },\n        error: function error(responseData, textStatus, errorThrown) {\n            console.log('POST failed.');\n        }\n    });\n}\nfunction createTubeMap(nodes, tracks, reads) {\n    tubeMap.create({\n        svgID: '#svg',\n        nodes: nodes,\n        tracks: tracks,\n        reads: reads\n    });\n    document.getElementById('loader').style.display = 'none';\n    var endTime = performance.now();\n    console.log('Took ' + (endTime - startTime) + ' milliseconds.');\n}\ndocument.getElementById('redundantNodesCheckbox').onclick = function () {\n    if (document.getElementById('redundantNodesCheckbox').checked === true)\n        tubeMap.setMergeNodesFlag(true);\n    else\n        tubeMap.setMergeNodesFlag(false);\n};\ndocument.getElementById('compressedViewCheckbox').onclick = function () {\n    if (document.getElementById('compressedViewCheckbox').checked === true)\n        tubeMap.setNodeWidthOption(1);\n    else\n        tubeMap.setNodeWidthOption(0);\n};\ndocument.getElementById('showReadsCheckbox').onclick = function () {\n    if (document.getElementById('showReadsCheckbox').checked === true)\n        tubeMap.setShowReadsFlag(true);\n    else\n        tubeMap.setShowReadsFlag(false);\n};\ndocument.getElementById('softClipsCheckbox').onclick = function () {\n    if (document.getElementById('softClipsCheckbox').checked === true)\n        tubeMap.setSoftClipsFlag(true);\n    else\n        tubeMap.setSoftClipsFlag(false);\n};\nvar radios = document.getElementsByClassName('colorRadio');\nvar _loop = function _loop(i) {\n    var trackType = void 0;\n    switch (radios[i].name) {\n    case 'colorsHaplo':\n        trackType = 'haplotypeColors';\n        break;\n    case 'colorsFwReads':\n        trackType = 'forwardReadColors';\n        break;\n    case 'colorsRevReads':\n        trackType = 'reverseReadColors';\n        break;\n    default:\n        console.log('Could not find track type in color set assignment');\n    }\n    var colorSet = void 0;\n    switch (radios[i].value) {\n    case 'option1':\n        colorSet = 'plainColors';\n        break;\n    case 'option2':\n        colorSet = 'greys';\n        break;\n    case 'option3':\n        colorSet = 'reds';\n        break;\n    case 'option4':\n        colorSet = 'blues';\n        break;\n    case 'option5':\n        colorSet = 'lightColors';\n        break;\n    default:\n        console.log('Could not find color type in color set assignment');\n    }\n    radios[i].onclick = function () {\n        console.log(this);\n        tubeMap.setColorSet(trackType, colorSet);\n    };\n};\nfor (var i = 0; i < radios.length; i += 1) {\n    _loop(i);\n}\ndocument.getElementById('downloadButton').onclick = function () {\n    var svgN = document.getElementById('svg');\n    var svgData = new XMLSerializer().serializeToString(svgN);\n    var svgBlob = new Blob([svgData], { type: 'image/svg+xml;charset=utf-8' });\n    var svgUrl = URL.createObjectURL(svgBlob);\n    var downloadLink = document.createElement('a');\n    downloadLink.href = svgUrl;\n    downloadLink.download = 'graph.svg';\n    document.body.appendChild(downloadLink);\n    downloadLink.click();\n    document.body.removeChild(downloadLink);\n};\nfunction clearDropdownsWithFilenames() {\n    var xgSelect = document.getElementById('xgFileSelect');\n    while (xgSelect.hasChildNodes()) {\n        xgSelect.removeChild(xgSelect.lastChild);\n    }\n    var opt1 = document.createElement('option');\n    opt1.value = 'none';\n    opt1.innerHTML = 'None';\n    xgSelect.appendChild(opt1);\n    var gbwtSelect = document.getElementById('gbwtFileSelect');\n    while (gbwtSelect.hasChildNodes()) {\n        gbwtSelect.removeChild(gbwtSelect.lastChild);\n    }\n    var opt2 = document.createElement('option');\n    opt2.value = 'none';\n    opt2.innerHTML = 'None';\n    gbwtSelect.appendChild(opt2);\n    var gamIndexSelect = document.getElementById('gamIndexSelect');\n    while (gamIndexSelect.hasChildNodes()) {\n        gamIndexSelect.removeChild(gamIndexSelect.lastChild);\n    }\n    var opt3 = document.createElement('option');\n    opt3.value = 'none';\n    opt3.innerHTML = 'None';\n    gamIndexSelect.appendChild(opt3);\n}\nfunction populateDropdownsWithFilenames() {\n    $.ajax({\n        type: 'POST',\n        url: BACKEND_URL + '/getFilenames',\n        crossDomain: true,\n        success: function success(response) {\n            var xgSelect = document.getElementById('xgFileSelect');\n            var xgSelectValue = xgSelect.options[xgSelect.selectedIndex].value;\n            var gbwtSelect = document.getElementById('gbwtFileSelect');\n            var gbwtSelectValue = gbwtSelect.options[gbwtSelect.selectedIndex].value;\n            var gamIndexSelect = document.getElementById('gamIndexSelect');\n            var gamSelectValue = gamIndexSelect.options[gamIndexSelect.selectedIndex].value;\n            clearDropdownsWithFilenames();\n            response.xgFiles.forEach(function (filename) {\n                var opt = document.createElement('option');\n                opt.value = filename;\n                opt.innerHTML = filename;\n                if (opt.value === xgSelectValue) {\n                    opt.selected = 'true';\n                }\n                xgSelect.appendChild(opt);\n            });\n            response.gbwtFiles.forEach(function (filename) {\n                var opt = document.createElement('option');\n                opt.value = filename;\n                opt.innerHTML = filename;\n                if (opt.value === gbwtSelectValue) {\n                    opt.selected = 'true';\n                }\n                gbwtSelect.appendChild(opt);\n            });\n            response.gamIndices.forEach(function (filename) {\n                var opt = document.createElement('option');\n                opt.value = filename;\n                opt.innerHTML = filename;\n                if (opt.value === gamSelectValue) {\n                    opt.selected = 'true';\n                }\n                gamIndexSelect.appendChild(opt);\n            });\n        },\n        error: function error(responseData, textStatus, errorThrown) {\n            console.log('POST failed.');\n        }\n    });\n}\nfunction setUpWebsocket() {\n    var ws = new WebSocket(BACKEND_URL.replace(/^http/, 'ws'));\n    ws.onmessage = function (message) {\n        console.log('Message received');\n        populateDropdownsWithFilenames();\n    };\n    ws.onclose = function (event) {\n        setTimeout(setUpWebsocket, 1000);\n    };\n    ws.onerror = function (event) {\n        ws.close();\n    };\n}\nwindow.onload = function () {\n    var dsSelect = document.getElementById('dataSourceSelect');\n    DATA_SOURCES.forEach(function (ds) {\n        var opt = document.createElement('option');\n        opt.value = ds.name;\n        opt.innerHTML = ds.name;\n        dsSelect.appendChild(opt);\n    });\n    var opt = document.createElement('option');\n    opt.value = 'custom';\n    opt.innerHTML = 'custom';\n    dsSelect.appendChild(opt);\n    document.getElementById('goButton').click();\n    populateDropdownsWithFilenames();\n    document.getElementById('redundantNodesCheckbox').checked = true;\n    document.getElementById('compressedViewCheckbox').checked = false;\n    document.getElementById('showReadsCheckbox').checked = true;\n    document.getElementById('softClipsCheckbox').checked = true;\n    document.getElementById('colorsHaplo2').checked = true;\n    document.getElementById('colorsFwReads3').checked = true;\n    document.getElementById('colorsRevReads4').checked = true;\n    setUpWebsocket();\n};\nvar panX = void 0;\nvar panY = void 0;\nvar panTop = void 0;\nvar panLeft = void 0;\nvar panDown = void 0;\n$('#tubeMapSVG').mousedown(function (e) {\n    e.preventDefault();\n    panDown = true;\n    panX = e.pageX;\n    panY = e.pageY;\n    var container = document.getElementById('tubeMapSVG');\n    panLeft = container.scrollLeft;\n    panTop = container.scrollTop;\n});\n$('body').mousemove(function (e) {\n    if (panDown) {\n        var newX = e.pageX;\n        var newY = e.pageY;\n        document.getElementById('tubeMapSVG').scrollTop = panTop - newY + panY;\n        document.getElementById('tubeMapSVG').scrollLeft = panLeft - newX + panX;\n    }\n});\n$('body').mouseup(function (e) {\n    panDown = false;\n});","'use strict';\nObject.defineProperty(exports, '__esModule', { value: true });\nexports.create = create;\nexports.changeTrackVisibility = changeTrackVisibility;\nexports.changeExonVisibility = changeExonVisibility;\nexports.setMergeNodesFlag = setMergeNodesFlag;\nexports.setSoftClipsFlag = setSoftClipsFlag;\nexports.setShowReadsFlag = setShowReadsFlag;\nexports.setColorSet = setColorSet;\nexports.setNodeWidthOption = setNodeWidthOption;\nexports.useColorScheme = useColorScheme;\nexports.vgExtractNodes = vgExtractNodes;\nexports.vgExtractTracks = vgExtractTracks;\nexports.vgExtractReads = vgExtractReads;\nvar DEBUG = false;\nvar greys = [\n        '#d9d9d9',\n        '#bdbdbd',\n        '#969696',\n        '#737373',\n        '#525252',\n        '#252525',\n        '#000000'\n    ];\nvar blues = [\n        '#c6dbef',\n        '#9ecae1',\n        '#6baed6',\n        '#4292c6',\n        '#2171b5',\n        '#08519c',\n        '#08306b'\n    ];\nvar reds = [\n        '#fcbba1',\n        '#fc9272',\n        '#fb6a4a',\n        '#ef3b2c',\n        '#cb181d',\n        '#a50f15',\n        '#67000d'\n    ];\nvar plainColors = [\n        '#1f77b4',\n        '#ff7f0e',\n        '#2ca02c',\n        '#d62728',\n        '#9467bd',\n        '#8c564b',\n        '#e377c2',\n        '#7f7f7f',\n        '#bcbd22',\n        '#17becf'\n    ];\nvar lightColors = [\n        '#ABCCE3',\n        '#FFCFA5',\n        '#B0DBB0',\n        '#F0AEAE',\n        '#D7C6E6',\n        '#C6ABA5',\n        '#F4CCE8',\n        '#CFCFCF',\n        '#E6E6AC',\n        '#A8E7ED'\n    ];\nvar haplotypeColors = [];\nvar forwardReadColors = [];\nvar reverseReadColors = [];\nvar exonColors = [];\nvar svgID = void 0;\nvar svg = void 0;\nvar zoom = exports.zoom = void 0;\nvar inputNodes = [];\nvar inputTracks = [];\nvar inputReads = [];\nvar nodes = void 0;\nvar tracks = void 0;\nvar reads = void 0;\nvar numberOfNodes = void 0;\nvar numberOfTracks = void 0;\nvar nodeMap = void 0;\nvar nodesPerOrder = void 0;\nvar assignments = [];\nvar extraLeft = [];\nvar extraRight = [];\nvar maxOrder = void 0;\nvar config = {\n        mergeNodesFlag: true,\n        clickableNodesFlag: false,\n        showExonsFlag: false,\n        colorScheme: 0,\n        nodeWidthOption: 0,\n        showReads: true,\n        showSoftClips: true,\n        haplotypeColors: 'greys',\n        forwardReadColors: 'reds',\n        reverseReadColors: 'blues',\n        exonColors: 'lightColors',\n        hideLegendFlag: false\n    };\nvar trackRectangles = [];\nvar trackCurves = [];\nvar trackCorners = [];\nvar trackVerticalRectangles = [];\nvar trackRectanglesStep3 = [];\nvar maxYCoordinate = 0;\nvar minYCoordinate = 0;\nvar maxXCoordinate = 0;\nvar trackForRuler = void 0;\nvar bed = void 0;\nfunction create(params) {\n    svgID = params.svgID;\n    svg = d3.select(params.svgID);\n    inputNodes = JSON.parse(JSON.stringify(params.nodes));\n    inputTracks = JSON.parse(JSON.stringify(params.tracks));\n    inputReads = params.reads || null;\n    bed = params.bed || null;\n    config.clickableNodesFlag = params.clickableNodes || false;\n    config.hideLegendFlag = params.hideLegend || false;\n    var tr = createTubeMap();\n    if (!config.hideLegendFlag)\n        drawLegend(tr);\n}\nfunction moveTrackToFirstPosition(index) {\n    inputTracks.unshift(inputTracks[index]);\n    inputTracks.splice(index + 1, 1);\n    straightenTrack(0);\n}\nfunction straightenTrack(index) {\n    var i = void 0;\n    var j = void 0;\n    var nodesToInvert = [];\n    var currentSequence = void 0;\n    var nodeName = void 0;\n    currentSequence = inputTracks[index].sequence;\n    for (i = 0; i < currentSequence.length; i += 1) {\n        if (currentSequence[i].charAt(0) === '-') {\n            nodeName = currentSequence[i].substr(1);\n            if (currentSequence.indexOf(nodeName) === -1 || currentSequence.indexOf(nodeName) > i) {\n                nodesToInvert.push(currentSequence[i].substr(1));\n            }\n        }\n    }\n    for (i = 0; i < inputTracks.length; i += 1) {\n        currentSequence = inputTracks[i].sequence;\n        for (j = 0; j < currentSequence.length; j += 1) {\n            if (currentSequence[j].charAt(0) !== '-') {\n                if (nodesToInvert.indexOf(currentSequence[j]) !== -1) {\n                    currentSequence[j] = '-' + currentSequence[j];\n                }\n            } else if (nodesToInvert.indexOf(currentSequence[j].substr(1)) !== -1) {\n                currentSequence[j] = currentSequence[j].substr(1);\n            }\n        }\n    }\n    inputNodes.forEach(function (node) {\n        if (nodesToInvert.indexOf(node.name) !== -1) {\n            node.seq = node.seq.split('').reverse().join('');\n        }\n    });\n}\nfunction changeTrackVisibility(trackID) {\n    var i = 0;\n    while (i < inputTracks.length && inputTracks[i].id !== trackID) {\n        i += 1;\n    }\n    if (i < inputTracks.length) {\n        if (inputTracks[i].hasOwnProperty('hidden')) {\n            inputTracks[i].hidden = !inputTracks[i].hidden;\n        } else {\n            inputTracks[i].hidden = true;\n        }\n    }\n    createTubeMap();\n}\nfunction changeExonVisibility() {\n    config.showExonsFlag = !config.showExonsFlag;\n    createTubeMap();\n}\nfunction setMergeNodesFlag(value) {\n    if (config.mergeNodesFlag !== value) {\n        config.mergeNodesFlag = value;\n        svg = d3.select(svgID);\n        createTubeMap();\n    }\n}\nfunction setSoftClipsFlag(value) {\n    if (config.showSoftClips !== value) {\n        config.showSoftClips = value;\n        svg = d3.select(svgID);\n        createTubeMap();\n    }\n}\nfunction setShowReadsFlag(value) {\n    if (config.showReads !== value) {\n        config.showReads = value;\n        svg = d3.select(svgID);\n        createTubeMap();\n    }\n}\nfunction setColorSet(trackType, colorSet) {\n    config[trackType] = colorSet;\n    var tr = createTubeMap();\n    if (!config.hideLegendFlag)\n        drawLegend(tr);\n}\nfunction setNodeWidthOption(value) {\n    if (value === 0 || value === 1 || value === 2) {\n        if (config.nodeWidthOption !== value) {\n            config.nodeWidthOption = value;\n            if (svg !== undefined) {\n                svg = d3.select(svgID);\n                createTubeMap();\n            }\n        }\n    }\n}\nfunction createTubeMap() {\n    trackRectangles = [];\n    trackCurves = [];\n    trackCorners = [];\n    trackVerticalRectangles = [];\n    trackRectanglesStep3 = [];\n    assignments = [];\n    extraLeft = [];\n    extraRight = [];\n    maxYCoordinate = 0;\n    minYCoordinate = 0;\n    maxXCoordinate = 0;\n    trackForRuler = undefined;\n    svg = d3.select(svgID);\n    svg.selectAll('*').remove();\n    nodes = JSON.parse(JSON.stringify(inputNodes));\n    tracks = JSON.parse(JSON.stringify(inputTracks));\n    reads = JSON.parse(JSON.stringify(inputReads));\n    assignColorSets();\n    for (var i = tracks.length - 1; i >= 0; i -= 1) {\n        if (!tracks[i].hasOwnProperty('type')) {\n            tracks[i].type = 'haplo';\n        }\n        if (tracks[i].hasOwnProperty('hidden')) {\n            if (tracks[i].hidden === true) {\n                tracks.splice(i, 1);\n            }\n        }\n        if (tracks[i].hasOwnProperty('indexOfFirstBase')) {\n            trackForRuler = tracks[i].name;\n        }\n    }\n    nodeMap = generateNodeMap(nodes);\n    generateTrackIndexSequences(tracks);\n    if (reads && config.showReads)\n        generateTrackIndexSequences(reads);\n    generateNodeWidth();\n    if (reads && config.mergeNodesFlag) {\n        generateNodeSuccessors();\n        generateNodeOrder();\n        if (reads && config.showReads)\n            reverseReversedReads();\n        mergeNodes();\n        nodeMap = generateNodeMap(nodes);\n        generateNodeWidth();\n        generateTrackIndexSequences(tracks);\n        if (reads && config.showReads)\n            generateTrackIndexSequences(reads);\n    }\n    numberOfNodes = nodes.length;\n    numberOfTracks = tracks.length;\n    generateNodeSuccessors();\n    generateNodeDegree();\n    if (DEBUG)\n        console.log(numberOfNodes + ' nodes.');\n    generateNodeOrder();\n    maxOrder = getMaxOrder();\n    calculateTrackWidth(tracks);\n    generateLaneAssignment();\n    if (config.showExonsFlag === true && bed !== null)\n        addTrackFeatures();\n    generateNodeXCoords();\n    if (reads && config.showReads) {\n        generateReadOnlyNodeAttributes();\n        reverseReversedReads();\n        generateTrackIndexSequences(reads);\n        placeReads();\n        tracks = tracks.concat(reads);\n    }\n    generateSVGShapesFromPath(nodes, tracks);\n    console.log('Tracks:');\n    console.log(tracks);\n    console.log('Nodes:');\n    console.log(nodes);\n    console.log('Lane assignment:');\n    console.log(assignments);\n    getImageDimensions();\n    alignSVG(nodes, tracks);\n    defineSVGPatterns();\n    drawTrackRectangles(trackRectangles);\n    drawTrackCurves();\n    drawReversalsByColor(trackCorners, trackVerticalRectangles);\n    drawTrackRectangles(trackRectanglesStep3);\n    drawTrackRectangles(trackRectangles, 'read');\n    drawTrackCurves('read');\n    var dNodes = removeUnusedNodes(nodes);\n    drawNodes(dNodes);\n    drawReversalsByColor(trackCorners, trackVerticalRectangles, 'read');\n    if (config.nodeWidthOption === 0)\n        drawLabels(dNodes);\n    if (trackForRuler !== undefined)\n        drawRuler();\n    if (config.nodeWidthOption === 0)\n        drawMismatches();\n    if (DEBUG) {\n        console.log('number of tracks: ' + numberOfTracks);\n        console.log('number of nodes: ' + numberOfNodes);\n    }\n    return tracks;\n}\nfunction generateReadOnlyNodeAttributes() {\n    nodesPerOrder = [];\n    for (var i = 0; i <= maxOrder; i += 1) {\n        nodesPerOrder[i] = [];\n    }\n    var orderY = new Map();\n    nodes.forEach(function (node) {\n        if (node.hasOwnProperty('order') && node.hasOwnProperty('y')) {\n            if (orderY.has(node.order)) {\n                orderY.set(node.order, Math.max(node.y + node.contentHeight, orderY.get(node.order)));\n            } else {\n                orderY.set(node.order, node.y + node.contentHeight);\n            }\n        }\n    });\n    nodes.forEach(function (node, i) {\n        if (node.hasOwnProperty('order') && !node.hasOwnProperty('y')) {\n            console.log('adding to ' + node.name);\n            node.y = orderY.get(node.order) + 25;\n            node.contentHeight = 0;\n            nodesPerOrder[node.order].push(i);\n        }\n    });\n}\nfunction assignReadsToNodes() {\n    nodes.forEach(function (node) {\n        node.incomingReads = [];\n        node.outgoingReads = [];\n        node.internalReads = [];\n    });\n    reads.forEach(function (read, idx) {\n        read.width = 7;\n        if (read.path.length === 1) {\n            nodes[read.path[0].node].internalReads.push(idx);\n        } else {\n            read.path.forEach(function (element, pathIdx) {\n                if (pathIdx === 0) {\n                    nodes[read.path[0].node].outgoingReads.push([\n                        idx,\n                        pathIdx\n                    ]);\n                } else if (read.path[pathIdx].node !== null) {\n                    nodes[read.path[pathIdx].node].incomingReads.push([\n                        idx,\n                        pathIdx\n                    ]);\n                }\n            });\n        }\n    });\n}\nfunction removeNonPathNodesFromReads() {\n    reads.forEach(function (read) {\n        for (var i = read.sequence.length - 1; i >= 0; i -= 1) {\n            var nodeName = read.sequence[i];\n            if (nodeName.charAt(0) === '-') {\n                nodeName = nodeName.substr(1);\n            }\n            if (!nodeMap.has(nodeName) || nodes[nodeMap.get(nodeName)].degree === 0) {\n                read.sequence.splice(i, 1);\n            }\n        }\n    });\n}\nfunction placeReads() {\n    generateBasicPathsForReads();\n    assignReadsToNodes();\n    var sortedNodes = nodes.slice();\n    sortedNodes.sort(compareNodesByOrder);\n    sortedNodes.forEach(function (node) {\n        node.incomingReads.sort(compareReadIncomingSegmentsByComingFrom);\n        var currentY = node.y + node.contentHeight;\n        var occupiedUntil = new Map();\n        node.incomingReads.forEach(function (readElement) {\n            reads[readElement[0]].path[readElement[1]].y = currentY;\n            setOccupiedUntil(occupiedUntil, reads[readElement[0]], readElement[1], currentY, node);\n            currentY += 7;\n        });\n        var maxY = currentY;\n        node.outgoingReads.sort(compareReadOutgoingSegmentsByGoingTo);\n        var occupiedFrom = new Map();\n        currentY = node.y + node.contentHeight;\n        node.outgoingReads.forEach(function (readElement) {\n            reads[readElement[0]].path[readElement[1]].y = currentY;\n            occupiedFrom.set(currentY, reads[readElement[0]].firstNodeOffset);\n            if (!occupiedUntil.has(currentY) || occupiedUntil.get(currentY) + 1 < reads[readElement[0]].firstNodeOffset) {\n                currentY += 7;\n                maxY = Math.max(maxY, currentY);\n            } else {\n                occupiedUntil.set(currentY, 0);\n                node.incomingReads.forEach(function (incReadElementIndices) {\n                    var incRead = reads[incReadElementIndices[0]];\n                    var incReadPathElement = incRead.path[incReadElementIndices[1]];\n                    if (incReadPathElement.y >= currentY) {\n                        incReadPathElement.y += 7;\n                        setOccupiedUntil(occupiedUntil, incRead, incReadElementIndices[1], incReadPathElement.y, node);\n                    }\n                });\n                currentY += 7;\n                maxY += 7;\n            }\n        });\n        node.internalReads.sort(compareInternalReads);\n        node.internalReads.forEach(function (readIdx) {\n            var currentRead = reads[readIdx];\n            currentY = node.y + node.contentHeight;\n            while (currentRead.firstNodeOffset < occupiedUntil.get(currentY) + 2 || currentRead.finalNodeCoverLength > occupiedFrom.get(currentY) - 3) {\n                currentY += 7;\n            }\n            currentRead.path[0].y = currentY;\n            occupiedUntil.set(currentY, currentRead.finalNodeCoverLength);\n            maxY = Math.max(maxY, currentY);\n        });\n        var heightIncrease = maxY - node.y - node.contentHeight;\n        node.contentHeight += heightIncrease;\n        adjustVertically3(node, heightIncrease);\n    });\n    var bottomY = calculateBottomY();\n    var elementsWithoutNode = [];\n    reads.forEach(function (read, idx) {\n        read.path.forEach(function (element, pathIdx) {\n            if (!element.hasOwnProperty('y')) {\n                elementsWithoutNode.push({\n                    readIndex: idx,\n                    pathIndex: pathIdx,\n                    previousY: reads[idx].path[pathIdx - 1].y\n                });\n            }\n        });\n    });\n    elementsWithoutNode.sort(compareNoNodeReadsByPreviousY);\n    elementsWithoutNode.forEach(function (element) {\n        var segment = reads[element.readIndex].path[element.pathIndex];\n        segment.y = bottomY[segment.order];\n        bottomY[segment.order] += reads[element.readIndex].width;\n    });\n    console.log('Reads:');\n    console.log(reads);\n}\nfunction setOccupiedUntil(map, read, pathIndex, y, node) {\n    if (pathIndex === read.path.length - 1) {\n        map.set(y, read.finalNodeCoverLength);\n    } else {\n        map.set(y, node.sequenceLength);\n    }\n}\nfunction compareNoNodeReadsByPreviousY(a, b) {\n    var segmentA = reads[a.readIndex].path[a.pathIndex];\n    var segmentB = reads[b.readIndex].path[b.pathIndex];\n    if (segmentA.order === segmentB.order) {\n        return a.previousY - b.previousY;\n    }\n    return segmentA.order - segmentB.order;\n}\nfunction compareReadOutgoingSegmentsByGoingTo(a, b) {\n    var pathIndexA = a[1];\n    var pathIndexB = b[1];\n    var nodeA = nodes[reads[a[0]].path[pathIndexA].node];\n    var nodeB = nodes[reads[b[0]].path[pathIndexB].node];\n    while (nodeA !== null && nodeB !== null && nodeA === nodeB) {\n        if (pathIndexA < reads[a[0]].path.length - 1) {\n            pathIndexA += 1;\n            while (reads[a[0]].path[pathIndexA].node === null) {\n                pathIndexA += 1;\n            }\n            nodeA = nodes[reads[a[0]].path[pathIndexA].node];\n        } else {\n            nodeA = null;\n        }\n        if (pathIndexB < reads[b[0]].path.length - 1) {\n            pathIndexB += 1;\n            while (reads[b[0]].path[pathIndexB].node === null) {\n                pathIndexB += 1;\n            }\n            nodeB = nodes[reads[b[0]].path[pathIndexB].node];\n        } else {\n            nodeB = null;\n        }\n    }\n    if (nodeA !== null) {\n        if (nodeB !== null)\n            return compareNodesByOrder(nodeA, nodeB);\n        return 1;\n    }\n    if (nodeB !== null)\n        return -1;\n    var beginDiff = reads[a[0]].firstNodeOffset - reads[b[0]].firstNodeOffset;\n    if (beginDiff !== 0)\n        return beginDiff;\n    return reads[a[0]].finalNodeCoverLength - reads[b[0]].finalNodeCoverLength;\n}\nfunction compareReadIncomingSegmentsByComingFrom(a, b) {\n    var pathA = reads[a[0]].path[a[1] - 1];\n    var pathB = reads[b[0]].path[b[1] - 1];\n    if (pathA.hasOwnProperty('y')) {\n        if (pathB.hasOwnProperty('y')) {\n            return pathA.y - pathB.y;\n        }\n        return -1;\n    }\n    if (pathB.hasOwnProperty('y')) {\n        return 1;\n    }\n    return compareReadIncomingSegmentsByComingFrom([\n        a[0],\n        a[1] - 1\n    ], [\n        b[0],\n        b[1] - 1\n    ]);\n}\nfunction compareInternalReads(idxA, idxB) {\n    var a = reads[idxA];\n    var b = reads[idxB];\n    if (a.firstNodeOffset < b.firstNodeOffset)\n        return -1;\n    else if (a.firstNodeOffset > b.firstNodeOffset)\n        return 1;\n    if (a.finalNodeCoverLength < b.finalNodeCoverLength)\n        return -1;\n    else if (a.finalNodeCoverLength > b.finalNodeCoverLength)\n        return 1;\n    return 0;\n}\nfunction calculateBottomY() {\n    var bottomY = [];\n    for (var i = 0; i <= maxOrder; i += 1) {\n        bottomY.push(0);\n    }\n    nodes.forEach(function (node) {\n        bottomY[node.order] = Math.max(bottomY[node.order], node.y + node.contentHeight + 20);\n    });\n    tracks.forEach(function (track) {\n        track.path.forEach(function (element) {\n            bottomY[element.order] = Math.max(bottomY[element.order], element.y + track.width);\n        });\n    });\n    return bottomY;\n}\nfunction generateBasicPathsForReads() {\n    var currentNodeIndex = void 0;\n    var currentNodeIsForward = void 0;\n    var currentNode = void 0;\n    var previousNode = void 0;\n    var previousNodeIsForward = void 0;\n    var isPositive = function isPositive(n) {\n        return ((n = +n) || 1 / n) >= 0;\n    };\n    reads.forEach(function (read) {\n        currentNodeIndex = Math.abs(read.indexSequence[0]);\n        currentNodeIsForward = isPositive(read.indexSequence[0]);\n        currentNode = nodes[currentNodeIndex];\n        read.path = [];\n        read.path.push({\n            order: currentNode.order,\n            isForward: currentNodeIsForward,\n            node: currentNodeIndex\n        });\n        for (var i = 1; i < read.sequence.length; i += 1) {\n            previousNode = currentNode;\n            previousNodeIsForward = currentNodeIsForward;\n            currentNodeIndex = Math.abs(read.indexSequence[i]);\n            currentNodeIsForward = isPositive(read.indexSequence[i]);\n            currentNode = nodes[currentNodeIndex];\n            if (currentNode.order > previousNode.order) {\n                if (!previousNodeIsForward) {\n                    read.path.push({\n                        order: previousNode.order,\n                        isForward: true,\n                        node: null\n                    });\n                }\n                for (var j = previousNode.order + 1; j < currentNode.order; j += 1) {\n                    read.path.push({\n                        order: j,\n                        isForward: true,\n                        node: null\n                    });\n                }\n                if (!currentNodeIsForward) {\n                    read.path.push({\n                        order: currentNode.order,\n                        isForward: true,\n                        node: null\n                    });\n                    read.path.push({\n                        order: currentNode.order,\n                        isForward: false,\n                        node: currentNodeIndex\n                    });\n                } else {\n                    read.path.push({\n                        order: currentNode.order,\n                        isForward: true,\n                        node: currentNodeIndex\n                    });\n                }\n            } else if (currentNode.order < previousNode.order) {\n                if (previousNodeIsForward) {\n                    read.path.push({\n                        order: previousNode.order,\n                        isForward: false,\n                        node: null\n                    });\n                }\n                for (var _j = previousNode.order - 1; _j > currentNode.order; _j -= 1) {\n                    read.path.push({\n                        order: _j,\n                        isForward: false,\n                        node: null\n                    });\n                }\n                if (currentNodeIsForward) {\n                    read.path.push({\n                        order: currentNode.order,\n                        isForward: false,\n                        node: null\n                    });\n                    read.path.push({\n                        order: currentNode.order,\n                        isForward: true,\n                        node: currentNodeIndex\n                    });\n                } else {\n                    read.path.push({\n                        order: currentNode.order,\n                        isForward: false,\n                        node: currentNodeIndex\n                    });\n                }\n            } else {\n                if (currentNodeIsForward !== previousNodeIsForward) {\n                    read.path.push({\n                        order: currentNode.order,\n                        isForward: currentNodeIsForward,\n                        node: currentNodeIndex\n                    });\n                } else {\n                    read.path.push({\n                        order: currentNode.order,\n                        isForward: !currentNodeIsForward,\n                        node: null\n                    });\n                    read.path.push({\n                        order: currentNode.order,\n                        isForward: currentNodeIsForward,\n                        node: currentNodeIndex\n                    });\n                }\n            }\n        }\n    });\n}\nfunction reverseReversedReads() {\n    reads.forEach(function (read) {\n        var pos = 0;\n        while (pos < read.sequence.length && read.sequence[pos].charAt(0) === '-') {\n            pos += 1;\n        }\n        if (pos === read.sequence.length) {\n            read.is_reverse = true;\n            read.sequence = read.sequence.reverse();\n            for (var i = 0; i < read.sequence.length; i += 1) {\n                read.sequence[i] = read.sequence[i].substr(1);\n            }\n            read.sequenceNew = read.sequenceNew.reverse();\n            var _loop = function _loop(_i) {\n                read.sequenceNew[_i].nodeName = read.sequenceNew[_i].nodeName.substr(1);\n                var nodeWidth = nodes[nodeMap.get(read.sequenceNew[_i].nodeName)].width;\n                read.sequenceNew[_i].mismatches.forEach(function (mm) {\n                    if (mm.type === 'insertion') {\n                        mm.pos = nodeWidth - mm.pos;\n                        mm.seq = getReverseComplement(mm.seq);\n                    } else if (mm.type === 'deletion') {\n                        mm.pos = nodeWidth - mm.pos - mm.length;\n                    } else if (mm.type === 'substitution') {\n                        mm.pos = nodeWidth - mm.pos - mm.seq.length;\n                        mm.seq = getReverseComplement(mm.seq);\n                    }\n                    if (mm.hasOwnProperty('seq')) {\n                        mm.seq = mm.seq.split('').reverse().join('');\n                    }\n                });\n            };\n            for (var _i = 0; _i < read.sequenceNew.length; _i += 1) {\n                _loop(_i);\n            }\n            var temp = read.firstNodeOffset;\n            var seqLength = nodes[nodeMap.get(read.sequence[0])].sequenceLength;\n            read.firstNodeOffset = seqLength - read.finalNodeCoverLength;\n            seqLength = nodes[nodeMap.get(read.sequence[read.sequence.length - 1])].sequenceLength;\n            read.finalNodeCoverLength = seqLength - temp;\n        }\n    });\n}\nfunction getReverseComplement(s) {\n    var result = '';\n    for (var i = s.length - 1; i >= 0; i -= 1) {\n        switch (s.charAt(i)) {\n        case 'A':\n            result += 'T';\n            break;\n        case 'T':\n            result += 'A';\n            break;\n        case 'C':\n            result += 'G';\n            break;\n        case 'G':\n            result += 'C';\n            break;\n        default:\n            result += 'N';\n        }\n    }\n    return result;\n}\nfunction generateTrackIndexSequencesNEW(tracksOrReads) {\n    tracksOrReads.forEach(function (track) {\n        track.indexSequence = [];\n        track.sequence.forEach(function (edit) {\n            if (edit.nodeName.charAt(0) === '-') {\n                track.indexSequence.push(-nodeMap.get(edit.nodeName.substr(1)));\n            } else {\n                track.indexSequence.push(nodeMap.get(edit.nodeName));\n            }\n        });\n    });\n}\nfunction generateTrackIndexSequences(tracksOrReads) {\n    tracksOrReads.forEach(function (track) {\n        track.indexSequence = [];\n        track.sequence.forEach(function (nodeName) {\n            if (nodeName.charAt(0) === '-') {\n                track.indexSequence.push(-nodeMap.get(nodeName.substr(1)));\n            } else {\n                track.indexSequence.push(nodeMap.get(nodeName));\n            }\n        });\n    });\n}\nfunction removeUnusedNodes(allNodes) {\n    var dNodes = allNodes.slice(0);\n    var i = void 0;\n    for (i = dNodes.length - 1; i >= 0; i -= 1) {\n        if (!dNodes[i].hasOwnProperty('x')) {\n            dNodes.splice(i, 1);\n        }\n    }\n    return dNodes;\n}\nfunction getImageDimensions() {\n    maxXCoordinate = -99;\n    minYCoordinate = 99;\n    maxYCoordinate = -99;\n    nodes.forEach(function (node) {\n        if (node.hasOwnProperty('x')) {\n            maxXCoordinate = Math.max(maxXCoordinate, node.x + 20 + node.pixelWidth);\n        }\n        if (node.hasOwnProperty('y')) {\n            minYCoordinate = Math.min(minYCoordinate, node.y - 10);\n            maxYCoordinate = Math.max(maxYCoordinate, node.y + node.contentHeight + 10);\n        }\n    });\n    tracks.forEach(function (track) {\n        track.path.forEach(function (segment) {\n            maxYCoordinate = Math.max(maxYCoordinate, segment.y + track.width);\n            minYCoordinate = Math.min(minYCoordinate, segment.y);\n        });\n    });\n}\nfunction alignSVG() {\n    exports.zoom = zoom = d3.behavior.zoom().scaleExtent([\n        0.1,\n        8\n    ]).on('zoom', function () {\n        svg.attr('transform', 'translate(' + [\n            0,\n            (-minYCoordinate + 25) * d3.event.scale\n        ] + ') scale(' + d3.event.scale + ')');\n        var svg2 = d3.select(svgID);\n        svg2.attr('width', Math.max(maxXCoordinate * d3.event.scale, $(svgID).parent().width()));\n        svg2.attr('height', (maxYCoordinate - minYCoordinate + 50) * d3.event.scale);\n    });\n    svg = svg.call(zoom).on('dblclick.zoom', null).append('g');\n    zoom.translate([\n        0,\n        -minYCoordinate + 25\n    ]);\n    zoom.event(svg);\n    var svg2 = d3.select(svgID);\n    svg2.attr('height', maxYCoordinate - minYCoordinate + 50);\n    svg2.attr('width', Math.max(maxXCoordinate, $(svgID).parent().width()));\n}\nfunction generateNodeMap() {\n    nodeMap = new Map();\n    nodes.forEach(function (node, index) {\n        nodeMap.set(node.name, index);\n    });\n    return nodeMap;\n}\nfunction generateNodeSuccessors() {\n    var current = void 0;\n    var follower = void 0;\n    nodes.forEach(function (node) {\n        node.successors = [];\n        node.predecessors = [];\n    });\n    tracks.forEach(function (track) {\n        for (var i = 0; i < track.indexSequence.length - 1; i += 1) {\n            current = Math.abs(track.indexSequence[i]);\n            follower = Math.abs(track.indexSequence[i + 1]);\n            if (nodes[current].successors.indexOf(follower) === -1) {\n                nodes[current].successors.push(follower);\n            }\n            if (nodes[follower].predecessors.indexOf(current) === -1) {\n                nodes[follower].predecessors.push(current);\n            }\n        }\n    });\n    if (reads && config.showReads) {\n        reads.forEach(function (track) {\n            for (var i = 0; i < track.indexSequence.length - 1; i += 1) {\n                current = Math.abs(track.indexSequence[i]);\n                follower = Math.abs(track.indexSequence[i + 1]);\n                if (nodes[current].successors.indexOf(follower) === -1) {\n                    nodes[current].successors.push(follower);\n                }\n                if (nodes[follower].predecessors.indexOf(current) === -1) {\n                    nodes[follower].predecessors.push(current);\n                }\n            }\n        });\n    }\n}\nfunction generateNodeOrderOfSingleTrack(sequence) {\n    var forwardOrder = 0;\n    var backwardOrder = 0;\n    var currentNode = void 0;\n    var minOrder = 0;\n    sequence.forEach(function (nodeIndex) {\n        if (nodeIndex < 0) {\n            currentNode = nodes[Math.abs(nodeIndex)];\n            if (!currentNode.hasOwnProperty('order')) {\n                currentNode.order = backwardOrder;\n            }\n            if (currentNode.order < minOrder)\n                minOrder = currentNode.order;\n            forwardOrder = currentNode.order;\n            backwardOrder = currentNode.order - 1;\n        } else {\n            currentNode = nodes[nodeIndex];\n            if (!currentNode.hasOwnProperty('order')) {\n                currentNode.order = forwardOrder;\n            }\n            forwardOrder = currentNode.order + 1;\n            backwardOrder = currentNode.order;\n        }\n    });\n    if (minOrder < 0) {\n        increaseOrderForAllNodes(-minOrder);\n    }\n}\nfunction generateNodeOrderTrackBeginning(sequence) {\n    var anchorIndex = 0;\n    var currentOrder = void 0;\n    var currentNode = void 0;\n    var minOrder = 0;\n    var increment = void 0;\n    while (anchorIndex < sequence.length && !nodes[Math.abs(sequence[anchorIndex])].hasOwnProperty('order')) {\n        anchorIndex += 1;\n    }\n    if (anchorIndex >= sequence.length) {\n        return null;\n    }\n    if (sequence[anchorIndex] >= 0) {\n        currentOrder = nodes[sequence[anchorIndex]].order - 1;\n        increment = -1;\n    } else {\n        currentOrder = nodes[-sequence[anchorIndex]].order + 1;\n        increment = 1;\n    }\n    for (var j = anchorIndex - 1; j >= 0; j -= 1) {\n        currentNode = nodes[Math.abs(sequence[j])];\n        if (!currentNode.hasOwnProperty('order')) {\n            currentNode.order = currentOrder;\n            minOrder = Math.min(minOrder, currentOrder);\n            currentOrder += increment;\n        }\n    }\n    if (minOrder < 0) {\n        increaseOrderForAllNodes(-minOrder);\n    }\n    return anchorIndex;\n}\nfunction generateNodeOrder() {\n    var modifiedSequence = void 0;\n    var currentOrder = void 0;\n    var currentNode = void 0;\n    var rightIndex = void 0;\n    var leftIndex = void 0;\n    var minOrder = 0;\n    var tracksAndReads = void 0;\n    if (reads && config.showReads)\n        tracksAndReads = tracks.concat(reads);\n    else\n        tracksAndReads = tracks;\n    nodes.forEach(function (node) {\n        delete node.order;\n    });\n    generateNodeOrderOfSingleTrack(tracks[0].indexSequence);\n    for (var i = 1; i < tracksAndReads.length; i += 1) {\n        if (DEBUG)\n            console.log('generating order for track ' + (i + 1));\n        rightIndex = generateNodeOrderTrackBeginning(tracksAndReads[i].indexSequence);\n        if (rightIndex === null) {\n            tracksAndReads.splice(i, 1);\n            reads.splice(i - tracks.length, 1);\n            i -= 1;\n            continue;\n        }\n        modifiedSequence = uninvert(tracksAndReads[i].indexSequence);\n        while (rightIndex < modifiedSequence.length) {\n            leftIndex = rightIndex;\n            rightIndex += 1;\n            while (rightIndex < modifiedSequence.length && !nodes[modifiedSequence[rightIndex]].hasOwnProperty('order')) {\n                rightIndex += 1;\n            }\n            if (rightIndex < modifiedSequence.length) {\n                currentOrder = nodes[modifiedSequence[leftIndex]].order + 1;\n                for (var j = leftIndex + 1; j < rightIndex; j += 1) {\n                    nodes[modifiedSequence[j]].order = currentOrder;\n                    currentOrder += 1;\n                }\n                if (nodes[modifiedSequence[rightIndex]].order > nodes[modifiedSequence[leftIndex]].order) {\n                    if (nodes[modifiedSequence[rightIndex]].order < currentOrder) {\n                        increaseOrderForSuccessors(modifiedSequence[rightIndex], modifiedSequence[rightIndex - 1], currentOrder);\n                    }\n                } else {\n                    if (tracksAndReads[i].indexSequence[rightIndex] >= 0 && !isSuccessor(modifiedSequence[rightIndex], modifiedSequence[leftIndex])) {\n                        increaseOrderForSuccessors(modifiedSequence[rightIndex], modifiedSequence[rightIndex - 1], currentOrder);\n                    } else {\n                        if (tracksAndReads[i].sequence[leftIndex] < 0 || nodes[modifiedSequence[leftIndex + 1]].degree < 2 && nodes[modifiedSequence[rightIndex]].order < nodes[modifiedSequence[leftIndex]].order) {\n                            currentOrder = nodes[modifiedSequence[leftIndex]].order - 1;\n                            for (var _j2 = leftIndex + 1; _j2 < rightIndex; _j2 += 1) {\n                                nodes[modifiedSequence[_j2]].order = currentOrder;\n                                currentOrder -= 1;\n                            }\n                        }\n                    }\n                }\n            } else {\n                if (tracksAndReads[i].sequence[leftIndex] >= 0) {\n                    currentOrder = nodes[modifiedSequence[leftIndex]].order + 1;\n                    for (var _j3 = leftIndex + 1; _j3 < modifiedSequence.length; _j3 += 1) {\n                        currentNode = nodes[modifiedSequence[_j3]];\n                        if (!currentNode.hasOwnProperty('order')) {\n                            currentNode.order = currentOrder;\n                            currentOrder += 1;\n                        }\n                    }\n                } else {\n                    currentOrder = nodes[modifiedSequence[leftIndex]].order - 1;\n                    for (var _j4 = leftIndex + 1; _j4 < modifiedSequence.length; _j4 += 1) {\n                        currentNode = nodes[modifiedSequence[_j4]];\n                        if (!currentNode.hasOwnProperty('order')) {\n                            currentNode.order = currentOrder;\n                            minOrder = Math.min(minOrder, currentOrder);\n                            currentOrder -= 1;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    if (minOrder < 0)\n        increaseOrderForAllNodes(-minOrder);\n}\nfunction isSuccessor(first, second) {\n    var visited = new Array(numberOfNodes).fill(false);\n    var stack = [];\n    stack.push(first);\n    visited[first] = true;\n    while (stack.length > 0) {\n        var current = stack.pop();\n        if (current === second)\n            return true;\n        for (var i = 0; i < nodes[current].successors.length; i += 1) {\n            var childIndex = nodes[current].successors[i];\n            if (!visited[childIndex]) {\n                visited[childIndex] = true;\n                stack.push(childIndex);\n            }\n        }\n    }\n    return false;\n}\nfunction getMaxOrder() {\n    var max = -1;\n    nodes.forEach(function (node) {\n        if (node.hasOwnProperty('order') && node.order > max)\n            max = node.order;\n    });\n    return max;\n}\nfunction uninvert(sequence) {\n    var result = [];\n    for (var i = 0; i < sequence.length; i += 1) {\n        if (sequence[i] >= 0) {\n            result.push(sequence[i]);\n        } else {\n            result.push(-sequence[i]);\n        }\n    }\n    return result;\n}\nfunction increaseOrderForAllNodes(amount) {\n    nodes.forEach(function (node) {\n        if (node.hasOwnProperty('order'))\n            node.order += amount;\n    });\n}\nfunction increaseOrderForSuccessors(startingNode, tabuNode, newOrder) {\n    var increasedOrders = new Map();\n    var queue = [];\n    queue.push([\n        startingNode,\n        newOrder\n    ]);\n    var _loop2 = function _loop2() {\n        var current = queue.shift();\n        var currentNode = current[0];\n        var currentOrder = current[1];\n        if (nodes[currentNode].hasOwnProperty('order') && nodes[currentNode].order < currentOrder) {\n            if (!increasedOrders.has(currentNode) || increasedOrders.get(currentNode) < currentOrder) {\n                increasedOrders.set(currentNode, currentOrder);\n                nodes[currentNode].successors.forEach(function (successor) {\n                    if (nodes[successor].order > nodes[currentNode].order && successor !== tabuNode) {\n                        queue.push([\n                            successor,\n                            currentOrder + 1\n                        ]);\n                    }\n                });\n                if (currentNode !== startingNode) {\n                    nodes[currentNode].predecessors.forEach(function (predecessor) {\n                        if (nodes[predecessor].order > currentNode.order && predecessor !== tabuNode) {\n                            queue.push([\n                                predecessor,\n                                currentOrder + 1\n                            ]);\n                        }\n                    });\n                }\n            }\n        }\n    };\n    while (queue.length > 0) {\n        _loop2();\n    }\n    increasedOrders.forEach(function (value, key) {\n        nodes[key].order = value;\n    });\n}\nfunction generateNodeDegree() {\n    nodes.forEach(function (node) {\n        node.tracks = [];\n    });\n    tracks.forEach(function (track) {\n        track.indexSequence.forEach(function (nodeIndex) {\n            nodes[Math.abs(nodeIndex)].tracks.push(track.id);\n        });\n    });\n    nodes.forEach(function (node) {\n        if (node.hasOwnProperty('tracks'))\n            node.degree = node.tracks.length;\n    });\n}\nfunction switchNodeOrientation() {\n    var toSwitch = new Map();\n    var nodeName = void 0;\n    var prevNode = void 0;\n    var nextNode = void 0;\n    var currentNode = void 0;\n    for (var i = 1; i < tracks.length; i += 1) {\n        for (var j = 0; j < tracks[i].sequence.length; j += 1) {\n            nodeName = tracks[i].sequence[j];\n            if (nodeName.charAt(0) === '-')\n                nodeName = nodeName.substr(1);\n            currentNode = nodes[nodeMap.get(nodeName)];\n            if (tracks[0].sequence.indexOf(nodeName) === -1) {\n                if (j > 0) {\n                    if (tracks[i].sequence[j - 1].charAt(0) !== '-')\n                        prevNode = nodes[nodeMap.get(tracks[i].sequence[j - 1])];\n                    else\n                        prevNode = nodes[nodeMap.get(tracks[i].sequence[j - 1].substr(1))];\n                }\n                if (j < tracks[i].sequence.length - 1) {\n                    if (tracks[i].sequence[j + 1].charAt(0) !== '-')\n                        nextNode = nodes[nodeMap.get(tracks[i].sequence[j + 1])];\n                    else\n                        nextNode = nodes[nodeMap.get(tracks[i].sequence[j + 1].substr(1))];\n                }\n                if ((j === 0 || prevNode.order < currentNode.order) && (j === tracks[i].sequence.length - 1 || currentNode.order < nextNode.order)) {\n                    if (!toSwitch.has(nodeName))\n                        toSwitch.set(nodeName, 0);\n                    if (tracks[i].sequence[j].charAt(0) === '-')\n                        toSwitch.set(nodeName, toSwitch.get(nodeName) + 1);\n                    else\n                        toSwitch.set(nodeName, toSwitch.get(nodeName) - 1);\n                }\n                if ((j === 0 || prevNode.order > currentNode.order) && (j === tracks[i].sequence.length - 1 || currentNode.order > nextNode.order)) {\n                    if (!toSwitch.has(nodeName))\n                        toSwitch.set(nodeName, 0);\n                    if (tracks[i].sequence[j].charAt(0) === '-')\n                        toSwitch.set(nodeName, toSwitch.get(nodeName) - 1);\n                    else\n                        toSwitch.set(nodeName, toSwitch.get(nodeName) + 1);\n                }\n            }\n        }\n    }\n    tracks.forEach(function (track, trackIndex) {\n        track.sequence.forEach(function (node, nodeIndex) {\n            nodeName = node;\n            if (nodeName.charAt(0) === '-')\n                nodeName = nodeName.substr(1);\n            if (toSwitch.has(nodeName) && toSwitch.get(nodeName) > 0) {\n                if (node.charAt(0) === '-')\n                    tracks[trackIndex].sequence[nodeIndex] = node.substr(1);\n                else\n                    tracks[trackIndex].sequence[nodeIndex] = '-' + node;\n            }\n        });\n    });\n    toSwitch.forEach(function (value, key) {\n        if (value > 0) {\n            currentNode = nodeMap.get(key);\n            nodes[currentNode].seq = nodes[currentNode].seq.split('').reverse().join('');\n        }\n    });\n}\nfunction generateNodeXCoords() {\n    var currentX = 0;\n    var nextX = 20;\n    var currentOrder = -1;\n    var sortedNodes = nodes.slice();\n    sortedNodes.sort(compareNodesByOrder);\n    var extra = calculateExtraSpace();\n    sortedNodes.forEach(function (node) {\n        if (node.hasOwnProperty('order')) {\n            if (node.order > currentOrder) {\n                currentOrder = node.order;\n                currentX = nextX + 10 * extra[node.order];\n            }\n            node.x = currentX;\n            nextX = Math.max(nextX, currentX + 40 + node.pixelWidth);\n        }\n    });\n}\nfunction calculateExtraSpace() {\n    var leftSideEdges = [];\n    var rightSideEdges = [];\n    var extra = [];\n    for (var i = 0; i <= maxOrder; i += 1) {\n        leftSideEdges.push(0);\n        rightSideEdges.push(0);\n    }\n    tracks.forEach(function (track) {\n        for (var _i2 = 1; _i2 < track.path.length; _i2 += 1) {\n            if (track.path[_i2].order === track.path[_i2 - 1].order) {\n                if (track.path[_i2].isForward === true)\n                    leftSideEdges[track.path[_i2].order] += 1;\n                else\n                    rightSideEdges[track.path[_i2].order] += 1;\n            }\n        }\n    });\n    extra.push(Math.max(0, leftSideEdges[0] - 1));\n    for (var _i3 = 1; _i3 <= maxOrder; _i3 += 1) {\n        extra.push(Math.max(0, leftSideEdges[_i3] - 1) + Math.max(0, rightSideEdges[_i3 - 1] - 1));\n    }\n    return extra;\n}\nfunction generateLaneAssignment() {\n    var segmentNumber = void 0;\n    var currentNodeIndex = void 0;\n    var currentNodeIsForward = void 0;\n    var currentNode = void 0;\n    var previousNode = void 0;\n    var previousNodeIsForward = void 0;\n    var prevSegmentPerOrderPerTrack = [];\n    var isPositive = function isPositive(n) {\n        return ((n = +n) || 1 / n) >= 0;\n    };\n    for (var i = 0; i <= maxOrder; i += 1) {\n        assignments[i] = [];\n        prevSegmentPerOrderPerTrack[i] = [];\n        for (var j = 0; j < numberOfTracks; j += 1) {\n            prevSegmentPerOrderPerTrack[i][j] = null;\n        }\n    }\n    tracks.forEach(function (track, trackNo) {\n        currentNodeIndex = Math.abs(track.indexSequence[0]);\n        currentNodeIsForward = isPositive(track.indexSequence[0]);\n        currentNode = nodes[currentNodeIndex];\n        track.path = [];\n        track.path.push({\n            order: currentNode.order,\n            lane: null,\n            isForward: currentNodeIsForward,\n            node: currentNodeIndex\n        });\n        addToAssignment(currentNode.order, currentNodeIndex, trackNo, 0, prevSegmentPerOrderPerTrack);\n        segmentNumber = 1;\n        for (var _i4 = 1; _i4 < track.sequence.length; _i4 += 1) {\n            previousNode = currentNode;\n            previousNodeIsForward = currentNodeIsForward;\n            currentNodeIndex = Math.abs(track.indexSequence[_i4]);\n            currentNodeIsForward = isPositive(track.indexSequence[_i4]);\n            currentNode = nodes[currentNodeIndex];\n            if (currentNode.order > previousNode.order) {\n                if (!previousNodeIsForward) {\n                    track.path.push({\n                        order: previousNode.order,\n                        lane: null,\n                        isForward: true,\n                        node: null\n                    });\n                    addToAssignment(previousNode.order, null, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                }\n                for (var _j5 = previousNode.order + 1; _j5 < currentNode.order; _j5 += 1) {\n                    track.path.push({\n                        order: _j5,\n                        lane: null,\n                        isForward: true,\n                        node: null\n                    });\n                    addToAssignment(_j5, null, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                }\n                if (!currentNodeIsForward) {\n                    track.path.push({\n                        order: currentNode.order,\n                        lane: null,\n                        isForward: true,\n                        node: null\n                    });\n                    addToAssignment(currentNode.order, null, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                    track.path.push({\n                        order: currentNode.order,\n                        lane: null,\n                        isForward: false,\n                        node: currentNodeIndex\n                    });\n                    addToAssignment(currentNode.order, currentNodeIndex, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                } else {\n                    track.path.push({\n                        order: currentNode.order,\n                        lane: null,\n                        isForward: true,\n                        node: currentNodeIndex\n                    });\n                    addToAssignment(currentNode.order, currentNodeIndex, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                }\n            } else if (currentNode.order < previousNode.order) {\n                if (previousNodeIsForward) {\n                    track.path.push({\n                        order: previousNode.order,\n                        lane: null,\n                        isForward: false,\n                        node: null\n                    });\n                    addToAssignment(previousNode.order, null, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                }\n                for (var _j6 = previousNode.order - 1; _j6 > currentNode.order; _j6 -= 1) {\n                    track.path.push({\n                        order: _j6,\n                        lane: null,\n                        isForward: false,\n                        node: null\n                    });\n                    addToAssignment(_j6, null, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                }\n                if (currentNodeIsForward) {\n                    track.path.push({\n                        order: currentNode.order,\n                        lane: null,\n                        isForward: false,\n                        node: null\n                    });\n                    addToAssignment(currentNode.order, null, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                    track.path.push({\n                        order: currentNode.order,\n                        lane: null,\n                        isForward: true,\n                        node: currentNodeIndex\n                    });\n                    addToAssignment(currentNode.order, currentNodeIndex, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                } else {\n                    track.path.push({\n                        order: currentNode.order,\n                        lane: null,\n                        isForward: false,\n                        node: currentNodeIndex\n                    });\n                    addToAssignment(currentNode.order, currentNodeIndex, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                }\n            } else {\n                if (currentNodeIsForward !== previousNodeIsForward) {\n                    track.path.push({\n                        order: currentNode.order,\n                        lane: null,\n                        isForward: currentNodeIsForward,\n                        node: currentNodeIndex\n                    });\n                    addToAssignment(currentNode.order, currentNodeIndex, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                } else {\n                    track.path.push({\n                        order: currentNode.order,\n                        lane: null,\n                        isForward: !currentNodeIsForward,\n                        node: null\n                    });\n                    addToAssignment(currentNode.order, null, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                    track.path.push({\n                        order: currentNode.order,\n                        lane: null,\n                        isForward: currentNodeIsForward,\n                        node: currentNodeIndex\n                    });\n                    addToAssignment(currentNode.order, currentNodeIndex, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                }\n            }\n        }\n    });\n    for (var _i5 = 0; _i5 <= maxOrder; _i5 += 1) {\n        generateSingleLaneAssignment(assignments[_i5], _i5);\n    }\n}\nfunction addToAssignment(order, nodeIndex, trackNo, segmentID, prevSegmentPerOrderPerTrack) {\n    var compareToFromSame = prevSegmentPerOrderPerTrack[order][trackNo];\n    if (nodeIndex === null) {\n        assignments[order].push({\n            type: 'single',\n            node: null,\n            tracks: [{\n                    trackID: trackNo,\n                    segmentID: segmentID,\n                    compareToFromSame: compareToFromSame\n                }]\n        });\n        prevSegmentPerOrderPerTrack[order][trackNo] = assignments[order][assignments[order].length - 1].tracks[0];\n    } else {\n        for (var i = 0; i < assignments[order].length; i += 1) {\n            if (assignments[order][i].node === nodeIndex) {\n                assignments[order][i].type = 'multiple';\n                assignments[order][i].tracks.push({\n                    trackID: trackNo,\n                    segmentID: segmentID,\n                    compareToFromSame: compareToFromSame\n                });\n                prevSegmentPerOrderPerTrack[order][trackNo] = assignments[order][i].tracks[assignments[order][i].tracks.length - 1];\n                return;\n            }\n        }\n        assignments[order].push({\n            type: 'single',\n            node: nodeIndex,\n            tracks: [{\n                    trackID: trackNo,\n                    segmentID: segmentID,\n                    compareToFromSame: compareToFromSame\n                }]\n        });\n        prevSegmentPerOrderPerTrack[order][trackNo] = assignments[order][assignments[order].length - 1].tracks[0];\n    }\n}\nfunction getIdealLanesAndCoords(assignment, order) {\n    var index = void 0;\n    assignment.forEach(function (node) {\n        node.idealLane = 0;\n        node.tracks.forEach(function (track) {\n            if (track.segmentID === 0) {\n                track.idealLane = track.trackID;\n                track.idealY = null;\n            } else {\n                if (tracks[track.trackID].path[track.segmentID - 1].order === order - 1) {\n                    track.idealLane = tracks[track.trackID].path[track.segmentID - 1].lane;\n                    track.idealY = tracks[track.trackID].path[track.segmentID - 1].y;\n                } else if (track.segmentID < tracks[track.trackID].path.length - 1 && tracks[track.trackID].path[track.segmentID + 1].order === order - 1) {\n                    track.idealLane = tracks[track.trackID].path[track.segmentID + 1].lane;\n                    track.idealY = tracks[track.trackID].path[track.segmentID + 1].y;\n                } else {\n                    index = track.segmentID - 1;\n                    while (index >= 0 && tracks[track.trackID].path[index].order !== order - 1) {\n                        index -= 1;\n                    }\n                    if (index < 0) {\n                        track.idealLane = track.trackID;\n                        track.idealY = null;\n                    } else {\n                        track.idealLane = tracks[track.trackID].path[index].lane;\n                        track.idealY = tracks[track.trackID].path[index].y;\n                    }\n                }\n            }\n            node.idealLane += track.idealLane;\n        });\n        node.idealLane /= node.tracks.length;\n    });\n}\nfunction generateSingleLaneAssignment(assignment, order) {\n    var currentLane = 0;\n    var potentialAdjustmentValues = new Set();\n    var currentY = 20;\n    var prevNameIsNull = false;\n    var prevTrack = -1;\n    getIdealLanesAndCoords(assignment, order);\n    assignment.sort(compareByIdealLane);\n    assignment.forEach(function (node) {\n        if (node.node !== null) {\n            nodes[node.node].topLane = currentLane;\n            if (prevNameIsNull)\n                currentY -= 10;\n            nodes[node.node].y = currentY;\n            nodes[node.node].contentHeight = 0;\n            prevNameIsNull = false;\n        } else {\n            if (prevNameIsNull)\n                currentY -= 25;\n            else if (currentY > 20)\n                currentY -= 10;\n            prevNameIsNull = true;\n        }\n        node.tracks.sort(compareByIdealLane);\n        node.tracks.forEach(function (track) {\n            track.lane = currentLane;\n            if (track.trackID === prevTrack && node.node === null && prevNameIsNull)\n                currentY += 10;\n            tracks[track.trackID].path[track.segmentID].lane = currentLane;\n            tracks[track.trackID].path[track.segmentID].y = currentY;\n            if (track.idealY !== null)\n                potentialAdjustmentValues.add(track.idealY - currentY);\n            currentLane += 1;\n            currentY += tracks[track.trackID].width;\n            if (node.node !== null) {\n                nodes[node.node].contentHeight += tracks[track.trackID].width;\n            }\n            prevTrack = track.trackID;\n        });\n        currentY += 25;\n    });\n    adjustVertically(assignment, potentialAdjustmentValues);\n}\nfunction adjustVertically(assignment, potentialAdjustmentValues) {\n    var verticalAdjustment = 0;\n    var minAdjustmentCost = Number.MAX_SAFE_INTEGER;\n    potentialAdjustmentValues.forEach(function (moveBy) {\n        if (getVerticalAdjustmentCost(assignment, moveBy) < minAdjustmentCost) {\n            minAdjustmentCost = getVerticalAdjustmentCost(assignment, moveBy);\n            verticalAdjustment = moveBy;\n        }\n    });\n    assignment.forEach(function (node) {\n        if (node.node !== null) {\n            nodes[node.node].y += verticalAdjustment;\n        }\n        node.tracks.forEach(function (track) {\n            tracks[track.trackID].path[track.segmentID].y += verticalAdjustment;\n        });\n    });\n}\nfunction adjustVertically3(node, adjustBy) {\n    if (node.hasOwnProperty('order')) {\n        assignments[node.order].forEach(function (assignmentNode) {\n            if (assignmentNode.node !== null) {\n                var aNode = nodes[assignmentNode.node];\n                if (aNode !== node && aNode.y > node.y) {\n                    aNode.y += adjustBy;\n                    assignmentNode.tracks.forEach(function (track) {\n                        tracks[track.trackID].path[track.segmentID].y += adjustBy;\n                    });\n                }\n            } else {\n                assignmentNode.tracks.forEach(function (track) {\n                    if (tracks[track.trackID].path[track.segmentID].y >= node.y) {\n                        tracks[track.trackID].path[track.segmentID].y += adjustBy;\n                    }\n                });\n            }\n        });\n        if (nodesPerOrder[node.order].length > 0) {\n            nodesPerOrder[node.order].forEach(function (nodeIndex) {\n                if (nodes[nodeIndex] !== node && nodes[nodeIndex].y > node.y) {\n                    nodes[nodeIndex].y += adjustBy;\n                }\n            });\n        }\n    }\n}\nfunction getVerticalAdjustmentCost(assignment, moveBy) {\n    var result = 0;\n    assignment.forEach(function (node) {\n        node.tracks.forEach(function (track) {\n            if (track.idealY !== null && tracks[track.trackID].type !== 'read') {\n                result += Math.abs(track.idealY - moveBy - tracks[track.trackID].path[track.segmentID].y) * tracks[track.trackID].width;\n            }\n        });\n    });\n    return result;\n}\nfunction compareByIdealLane(a, b) {\n    if (a.hasOwnProperty('idealLane')) {\n        if (b.hasOwnProperty('idealLane')) {\n            if (a.idealLane < b.idealLane)\n                return -1;\n            else if (a.idealLane > b.idealLane)\n                return 1;\n            return 0;\n        }\n        return -1;\n    }\n    if (b.hasOwnProperty('idealLane')) {\n        return 1;\n    }\n    return 0;\n}\nfunction compareNodesByOrder(a, b) {\n    if (a === null) {\n        if (b === null)\n            return 0;\n        return -1;\n    }\n    if (b === null)\n        return 1;\n    if (a.hasOwnProperty('order')) {\n        if (b.hasOwnProperty('order')) {\n            if (a.order < b.order)\n                return -1;\n            else if (a.order > b.order)\n                return 1;\n            if (a.hasOwnProperty('y') && b.hasOwnProperty('y')) {\n                if (a.y < b.y)\n                    return -1;\n                else if (a.y > b.y)\n                    return 1;\n            }\n            return 0;\n        }\n        return -1;\n    }\n    if (b.hasOwnProperty('order'))\n        return 1;\n    return 0;\n}\nfunction addTrackFeatures() {\n    var nodeStart = void 0;\n    var nodeEnd = void 0;\n    var feature = {};\n    bed.forEach(function (line) {\n        var i = 0;\n        while (i < numberOfTracks && tracks[i].name !== line.track) {\n            i += 1;\n        }\n        if (i < numberOfTracks) {\n            nodeStart = 0;\n            tracks[i].path.forEach(function (node) {\n                if (node.node !== null) {\n                    feature = {};\n                    if (nodes[node.node].hasOwnProperty('sequenceLength')) {\n                        nodeEnd = nodeStart + nodes[node.node].sequenceLength - 1;\n                    } else {\n                        nodeEnd = nodeStart + nodes[node.node].width - 1;\n                    }\n                    if (nodeStart >= line.start && nodeStart <= line.end)\n                        feature.start = 0;\n                    if (nodeStart < line.start && nodeEnd >= line.start)\n                        feature.start = line.start - nodeStart;\n                    if (nodeEnd <= line.end && nodeEnd >= line.start) {\n                        feature.end = nodeEnd - nodeStart;\n                        if (nodeEnd < line.end)\n                            feature.continue = true;\n                    }\n                    if (nodeEnd > line.end && nodeStart <= line.end)\n                        feature.end = line.end - nodeStart;\n                    if (feature.hasOwnProperty('start')) {\n                        feature.type = line.type;\n                        feature.name = line.name;\n                        if (!node.hasOwnProperty('features'))\n                            node.features = [];\n                        node.features.push(feature);\n                    }\n                    nodeStart = nodeEnd + 1;\n                }\n            });\n        } else {\n        }\n    });\n}\nfunction calculateTrackWidth() {\n    var allAreFour = true;\n    tracks.forEach(function (track) {\n        if (track.hasOwnProperty('freq')) {\n            track.width = Math.round((Math.log(track.freq) + 1) * 4);\n        } else {\n            track.width = 15;\n            if (track.hasOwnProperty('type') && track.type === 'read') {\n                track.width = 4;\n            }\n        }\n        if (track.width !== 4) {\n            allAreFour = false;\n        }\n    });\n    if (allAreFour) {\n        tracks.forEach(function (track) {\n            if (track.hasOwnProperty('freq')) {\n                track.width = 15;\n            }\n        });\n    }\n}\nfunction useColorScheme(x) {\n    config.colorScheme = x;\n    svg = d3.select(svgID);\n    var tr = createTubeMap();\n    if (!config.hideLegendFlag)\n        drawLegend(tr);\n}\nfunction assignColorSets() {\n    haplotypeColors = getColorSet(config.haplotypeColors);\n    forwardReadColors = getColorSet(config.forwardReadColors);\n    reverseReadColors = getColorSet(config.reverseReadColors);\n    exonColors = getColorSet(config.exonColors);\n}\nfunction getColorSet(colorSetName) {\n    switch (colorSetName) {\n    case 'plainColors':\n        return plainColors;\n    case 'reds':\n        return reds;\n    case 'blues':\n        return blues;\n    case 'greys':\n        return greys;\n    case 'lightColors':\n        return lightColors;\n    default:\n        return greys;\n    }\n}\nfunction generateTrackColor(track, highlight) {\n    if (typeof highlight === 'undefined')\n        highlight = 'plain';\n    var trackColor = void 0;\n    if (track.hasOwnProperty('type') && track.type === 'read') {\n        if (track.hasOwnProperty('is_reverse') && track.is_reverse === true) {\n            trackColor = reverseReadColors[track.id % reverseReadColors.length];\n        } else {\n            trackColor = forwardReadColors[track.id % forwardReadColors.length];\n        }\n    } else {\n        if (config.showExonsFlag === false || highlight !== 'plain') {\n            trackColor = haplotypeColors[track.id % haplotypeColors.length];\n        } else {\n            trackColor = exonColors[track.id % exonColors.length];\n        }\n    }\n    return trackColor;\n}\nfunction generateTrackColorOLD(track, highlight) {\n    if (typeof highlight === 'undefined')\n        highlight = 'plain';\n    var trackColor = void 0;\n    if (track.hasOwnProperty('type') && track.type === 'read') {\n        if (track.hasOwnProperty('is_reverse') && track.is_reverse === true) {\n            trackColor = blues[track.id % blues.length];\n        } else {\n            trackColor = reds[track.id % reds.length];\n        }\n    } else {\n        if (config.colorScheme === 0) {\n            if (config.showExonsFlag === false || highlight !== 'plain') {\n                trackColor = plainColors[track.id % plainColors.length];\n            } else {\n                trackColor = lightColors[track.id % lightColors.length];\n            }\n        } else if (config.colorScheme === 1) {\n            if (config.showExonsFlag === false || highlight === 'plain') {\n                trackColor = greys[track.id % greys.length];\n            } else {\n                trackColor = reds[track.id % reds.length];\n            }\n        }\n    }\n    return trackColor;\n}\nfunction getReadXStart(read) {\n    var node = nodes[read.path[0].node];\n    if (read.path[0].isForward) {\n        return getXCoordinateOfBaseWithinNode(node, read.firstNodeOffset);\n    }\n    return getXCoordinateOfBaseWithinNode(node, node.sequenceLength - read.firstNodeOffset);\n}\nfunction getReadXEnd(read) {\n    var node = nodes[read.path[read.path.length - 1].node];\n    if (read.path[read.path.length - 1].isForward) {\n        return getXCoordinateOfBaseWithinNode(node, read.finalNodeCoverLength);\n    }\n    return getXCoordinateOfBaseWithinNode(node, node.sequenceLength - read.finalNodeCoverLength);\n}\nfunction getXCoordinateOfBaseWithinNode(node, base) {\n    if (base > node.sequenceLength)\n        return null;\n    var nodeLeftX = node.x - 4;\n    var nodeRightX = node.x + node.pixelWidth + 4;\n    return nodeLeftX + base / node.sequenceLength * (nodeRightX - nodeLeftX);\n}\nfunction generateSVGShapesFromPath() {\n    var xStart = void 0;\n    var xEnd = void 0;\n    var yStart = void 0;\n    var yEnd = void 0;\n    var trackColor = void 0;\n    var highlight = void 0;\n    var dummy = void 0;\n    var reversalFlag = void 0;\n    for (var i = 0; i <= maxOrder; i += 1) {\n        extraLeft.push(0);\n        extraRight.push(0);\n    }\n    var orderStartX = [];\n    var orderEndX = [];\n    nodes.forEach(function (node) {\n        if (node.hasOwnProperty('order')) {\n            orderStartX[node.order] = node.x;\n            if (orderEndX[node.order] === undefined)\n                orderEndX[node.order] = node.x + node.pixelWidth;\n            else\n                orderEndX[node.order] = Math.max(orderEndX[node.order], node.x + node.pixelWidth);\n        }\n    });\n    tracks.forEach(function (track) {\n        highlight = 'plain';\n        trackColor = generateTrackColor(track, highlight);\n        yStart = track.path[0].y;\n        if (track.type !== 'read') {\n            if (track.sequence[0].charAt(0) === '-') {\n                xStart = orderEndX[track.path[0].order] + 20;\n            } else {\n                xStart = orderStartX[track.path[0].order] - 20;\n            }\n        } else {\n            xStart = getReadXStart(track);\n        }\n        for (var _i6 = 0; _i6 < track.path.length; _i6 += 1) {\n            if (track.path[_i6].y === yStart) {\n                if (track.path[_i6].hasOwnProperty('features')) {\n                    if (_i6 > 0 && track.path[_i6 - 1].order === track.path[_i6].order)\n                        reversalFlag = true;\n                    else\n                        reversalFlag = false;\n                    dummy = createFeatureRectangle(track.path[_i6], orderStartX[track.path[_i6].order], orderEndX[track.path[_i6].order], highlight, track, xStart, yStart, trackColor, reversalFlag);\n                    highlight = dummy.highlight;\n                    xStart = dummy.xStart;\n                }\n            } else {\n                if (track.path[_i6 - 1].isForward) {\n                    xEnd = orderEndX[track.path[_i6 - 1].order];\n                } else {\n                    xEnd = orderStartX[track.path[_i6 - 1].order];\n                }\n                if (xEnd !== xStart) {\n                    trackColor = generateTrackColor(track, highlight);\n                    trackRectangles.push({\n                        xStart: Math.min(xStart, xEnd),\n                        yStart: yStart,\n                        xEnd: Math.max(xStart, xEnd),\n                        yEnd: yStart + track.width - 1,\n                        color: trackColor,\n                        id: track.id,\n                        type: track.type\n                    });\n                }\n                if (track.path[_i6].order - 1 === track.path[_i6 - 1].order) {\n                    xStart = xEnd;\n                    xEnd = orderStartX[track.path[_i6].order];\n                    yEnd = track.path[_i6].y;\n                    trackColor = generateTrackColor(track, highlight);\n                    trackCurves.push({\n                        xStart: xStart,\n                        yStart: yStart,\n                        xEnd: xEnd + 1,\n                        yEnd: yEnd,\n                        width: track.width,\n                        color: trackColor,\n                        laneChange: Math.abs(track.path[_i6].lane - track.path[_i6 - 1].lane),\n                        id: track.id,\n                        type: track.type\n                    });\n                    xStart = xEnd;\n                    yStart = yEnd;\n                } else if (track.path[_i6].order + 1 === track.path[_i6 - 1].order) {\n                    xStart = xEnd;\n                    xEnd = orderEndX[track.path[_i6].order];\n                    yEnd = track.path[_i6].y;\n                    trackColor = generateTrackColor(track, highlight);\n                    trackCurves.push({\n                        xStart: xStart + 1,\n                        yStart: yStart,\n                        xEnd: xEnd,\n                        yEnd: yEnd,\n                        width: track.width,\n                        color: trackColor,\n                        laneChange: Math.abs(track.path[_i6].lane - track.path[_i6 - 1].lane),\n                        id: track.id,\n                        type: track.type\n                    });\n                    xStart = xEnd;\n                    yStart = yEnd;\n                } else {\n                    if (track.path[_i6 - 1].isForward) {\n                        yEnd = track.path[_i6].y;\n                        generateForwardToReverse(xEnd, yStart, yEnd, track.width, trackColor, track.id, track.path[_i6].order, track.type);\n                        xStart = orderEndX[track.path[_i6].order];\n                        yStart = track.path[_i6].y;\n                    } else {\n                        yEnd = track.path[_i6].y;\n                        generateReverseToForward(xEnd, yStart, yEnd, track.width, trackColor, track.id, track.path[_i6].order, track.type);\n                        xStart = orderStartX[track.path[_i6].order];\n                        yStart = track.path[_i6].y;\n                    }\n                }\n                if (track.path[_i6].hasOwnProperty('features')) {\n                    if (track.path[_i6 - 1].order === track.path[_i6].order)\n                        reversalFlag = true;\n                    else\n                        reversalFlag = false;\n                    dummy = createFeatureRectangle(track.path[_i6], orderStartX[track.path[_i6].order], orderEndX[track.path[_i6].order], highlight, track, xStart, yStart, trackColor, reversalFlag);\n                    highlight = dummy.highlight;\n                    xStart = dummy.xStart;\n                }\n            }\n        }\n        if (track.type !== 'read') {\n            if (!track.path[track.path.length - 1].isForward) {\n                xEnd = orderStartX[track.path[track.path.length - 1].order] - 20;\n            } else {\n                xEnd = orderEndX[track.path[track.path.length - 1].order] + 20;\n            }\n        } else {\n            xEnd = getReadXEnd(track);\n        }\n        trackRectangles.push({\n            xStart: Math.min(xStart, xEnd),\n            yStart: yStart,\n            xEnd: Math.max(xStart, xEnd),\n            yEnd: yStart + track.width - 1,\n            color: trackColor,\n            id: track.id,\n            type: track.type\n        });\n    });\n}\nfunction createFeatureRectangle(node, nodeXStart, nodeXEnd, highlight, track, rectXStart, yStart, trackColor, reversalFlag) {\n    var nodeWidth = void 0;\n    var currentHighlight = highlight;\n    var c = void 0;\n    var co = void 0;\n    var featureXStart = void 0;\n    var featureXEnd = void 0;\n    nodeXStart -= 8;\n    nodeXEnd += 8;\n    if (nodes[node.node].hasOwnProperty('sequenceLength')) {\n        nodeWidth = nodes[node.node].sequenceLength;\n    } else {\n        nodeWidth = nodes[node.node].width;\n    }\n    node.features.sort(function (a, b) {\n        return a.start - b.start;\n    });\n    node.features.forEach(function (feature) {\n        if (currentHighlight !== feature.type) {\n            c = generateTrackColor(track, currentHighlight);\n            if (node.isForward === true) {\n                featureXStart = nodeXStart + Math.round(feature.start * (nodeXEnd - nodeXStart + 1) / nodeWidth);\n                if (reversalFlag && featureXStart < nodeXStart + 8) {\n                    featureXEnd = nodeXStart + Math.round((feature.end + 1) * (nodeXEnd - nodeXStart + 1) / nodeWidth) - 1;\n                    co = generateTrackColor(track, feature.type);\n                    trackRectanglesStep3.push({\n                        xStart: featureXStart,\n                        yStart: yStart,\n                        xEnd: featureXEnd,\n                        yEnd: yStart + track.width - 1,\n                        color: co,\n                        id: track.id,\n                        type: track.type\n                    });\n                }\n                if (featureXStart > rectXStart + 1) {\n                    trackRectanglesStep3.push({\n                        xStart: rectXStart,\n                        yStart: yStart,\n                        xEnd: featureXStart - 1,\n                        yEnd: yStart + track.width - 1,\n                        color: c,\n                        id: track.id,\n                        type: track.type\n                    });\n                }\n            } else {\n                featureXStart = nodeXEnd - Math.round(feature.start * (nodeXEnd - nodeXStart + 1) / nodeWidth);\n                if (reversalFlag && featureXStart > nodeXEnd - 8) {\n                    featureXEnd = nodeXEnd - Math.round((feature.end + 1) * (nodeXEnd - nodeXStart + 1) / nodeWidth) - 1;\n                    co = generateTrackColor(track, feature.type);\n                    trackRectanglesStep3.push({\n                        xStart: featureXEnd,\n                        yStart: yStart,\n                        xEnd: featureXStart,\n                        yEnd: yStart + track.width - 1,\n                        color: co,\n                        id: track.id,\n                        type: track.type\n                    });\n                }\n                if (rectXStart > featureXStart + 1) {\n                    trackRectanglesStep3.push({\n                        xStart: featureXStart + 1,\n                        yStart: yStart,\n                        xEnd: rectXStart,\n                        yEnd: yStart + track.width - 1,\n                        color: c,\n                        id: track.id,\n                        type: track.type\n                    });\n                }\n            }\n            rectXStart = featureXStart;\n            currentHighlight = feature.type;\n        }\n        if (feature.end < nodeWidth - 1 || !feature.hasOwnProperty('continue')) {\n            c = generateTrackColor(track, currentHighlight);\n            if (node.isForward === true) {\n                featureXEnd = nodeXStart + Math.round((feature.end + 1) * (nodeXEnd - nodeXStart + 1) / nodeWidth) - 1;\n                trackRectanglesStep3.push({\n                    xStart: rectXStart,\n                    yStart: yStart,\n                    xEnd: featureXEnd,\n                    yEnd: yStart + track.width - 1,\n                    color: c,\n                    id: track.id,\n                    type: track.type\n                });\n            } else {\n                featureXEnd = nodeXEnd - Math.round((feature.end + 1) * (nodeXEnd - nodeXStart + 1) / nodeWidth) - 1;\n                trackRectanglesStep3.push({\n                    xStart: featureXEnd,\n                    yStart: yStart,\n                    xEnd: rectXStart,\n                    yEnd: yStart + track.width - 1,\n                    color: c,\n                    id: track.id,\n                    type: track.type\n                });\n            }\n            rectXStart = featureXEnd + 1;\n            currentHighlight = 'plain';\n        }\n    });\n    return {\n        xStart: rectXStart,\n        highlight: currentHighlight\n    };\n}\nfunction generateForwardToReverse(x, yStart, yEnd, trackWidth, trackColor, trackID, order, type) {\n    x += 10 * extraRight[order];\n    var yTop = Math.min(yStart, yEnd);\n    var yBottom = Math.max(yStart, yEnd);\n    var radius = 7;\n    trackVerticalRectangles.push({\n        xStart: x - 10 * extraRight[order],\n        yStart: yStart,\n        xEnd: x + 5,\n        yEnd: yStart + trackWidth - 1,\n        color: trackColor,\n        id: trackID,\n        type: type\n    });\n    trackVerticalRectangles.push({\n        xStart: x + 5 + radius,\n        yStart: yTop + trackWidth + radius - 1,\n        xEnd: x + 5 + radius + Math.min(7, trackWidth) - 1,\n        yEnd: yBottom - radius + 1,\n        color: trackColor,\n        id: trackID,\n        type: type\n    });\n    trackVerticalRectangles.push({\n        xStart: x - 10 * extraRight[order],\n        yStart: yEnd,\n        xEnd: x + 5,\n        yEnd: yEnd + trackWidth - 1,\n        color: trackColor,\n        id: trackID,\n        type: type\n    });\n    var d = 'M ' + (x + 5) + ' ' + yBottom;\n    d += ' Q ' + (x + 5 + radius) + ' ' + yBottom + ' ' + (x + 5 + radius) + ' ' + (yBottom - radius);\n    d += ' H ' + (x + 5 + radius + Math.min(7, trackWidth));\n    d += ' Q ' + (x + 5 + radius + Math.min(7, trackWidth)) + ' ' + (yBottom + trackWidth) + ' ' + (x + 5) + ' ' + (yBottom + trackWidth);\n    d += ' Z ';\n    trackCorners.push({\n        path: d,\n        color: trackColor,\n        id: trackID,\n        type: type\n    });\n    d = 'M ' + (x + 5) + ' ' + yTop;\n    d += ' Q ' + (x + 5 + radius + Math.min(7, trackWidth)) + ' ' + yTop + ' ' + (x + 5 + radius + Math.min(7, trackWidth)) + ' ' + (yTop + trackWidth + radius);\n    d += ' H ' + (x + 5 + radius);\n    d += ' Q ' + (x + 5 + radius) + ' ' + (yTop + trackWidth) + ' ' + (x + 5) + ' ' + (yTop + trackWidth);\n    d += ' Z ';\n    trackCorners.push({\n        path: d,\n        color: trackColor,\n        id: trackID,\n        type: type\n    });\n    extraRight[order] += 1;\n}\nfunction generateReverseToForward(x, yStart, yEnd, trackWidth, trackColor, trackID, order, type) {\n    var yTop = Math.min(yStart, yEnd);\n    var yBottom = Math.max(yStart, yEnd);\n    var radius = 7;\n    x -= 10 * extraLeft[order];\n    trackVerticalRectangles.push({\n        xStart: x - 6,\n        yStart: yStart,\n        xEnd: x + 10 * extraLeft[order],\n        yEnd: yStart + trackWidth - 1,\n        color: trackColor,\n        id: trackID,\n        type: type\n    });\n    trackVerticalRectangles.push({\n        xStart: x - 5 - radius - Math.min(7, trackWidth),\n        yStart: yTop + trackWidth + radius - 1,\n        xEnd: x - 5 - radius - 1,\n        yEnd: yBottom - radius + 1,\n        color: trackColor,\n        id: trackID,\n        type: type\n    });\n    trackVerticalRectangles.push({\n        xStart: x - 6,\n        yStart: yEnd,\n        xEnd: x + 10 * extraLeft[order],\n        yEnd: yEnd + trackWidth - 1,\n        color: trackColor,\n        id: trackID,\n        type: type\n    });\n    var d = 'M ' + (x - 5) + ' ' + yBottom;\n    d += ' Q ' + (x - 5 - radius) + ' ' + yBottom + ' ' + (x - 5 - radius) + ' ' + (yBottom - radius);\n    d += ' H ' + (x - 5 - radius - Math.min(7, trackWidth));\n    d += ' Q ' + (x - 5 - radius - Math.min(7, trackWidth)) + ' ' + (yBottom + trackWidth) + ' ' + (x - 5) + ' ' + (yBottom + trackWidth);\n    d += ' Z ';\n    trackCorners.push({\n        path: d,\n        color: trackColor,\n        id: trackID,\n        type: type\n    });\n    d = 'M ' + (x - 5) + ' ' + yTop;\n    d += ' Q ' + (x - 5 - radius - Math.min(7, trackWidth)) + ' ' + yTop + ' ' + (x - 5 - radius - Math.min(7, trackWidth)) + ' ' + (yTop + trackWidth + radius);\n    d += ' H ' + (x - 5 - radius);\n    d += ' Q ' + (x - 5 - radius) + ' ' + (yTop + trackWidth) + ' ' + (x - 5) + ' ' + (yTop + trackWidth);\n    d += ' Z ';\n    trackCorners.push({\n        path: d,\n        color: trackColor,\n        id: trackID,\n        type: type\n    });\n    extraLeft[order] += 1;\n}\nfunction drawReversalsByColor(corners, rectangles, type) {\n    if (typeof type === 'undefined')\n        type = 'haplo';\n    var co = new Set();\n    rectangles.forEach(function (rect) {\n        co.add(rect.color);\n    });\n    co.forEach(function (c) {\n        drawTrackRectangles(rectangles.filter(filterObjectByAttribute('color', c)), type);\n        drawTrackCorners(corners.filter(filterObjectByAttribute('color', c)), type);\n    });\n}\nfunction drawNodes(dNodes) {\n    var x = void 0;\n    var y = void 0;\n    dNodes.forEach(function (node) {\n        node.d = 'M ' + (node.x - 9) + ' ' + node.y + ' Q ' + (node.x - 9) + ' ' + (node.y - 9) + ' ' + node.x + ' ' + (node.y - 9);\n        x = node.x;\n        y = node.y - 9;\n        if (node.width > 1) {\n            x += node.pixelWidth;\n            node.d += ' L ' + x + ' ' + y;\n        }\n        node.d += ' Q ' + (x + 9) + ' ' + y + ' ' + (x + 9) + ' ' + (y + 9);\n        x += 9;\n        y += 9;\n        if (node.contentHeight > 0) {\n            y += node.contentHeight - 0;\n            node.d += ' L ' + x + ' ' + y;\n        }\n        node.d += ' Q ' + x + ' ' + (y + 9) + ' ' + (x - 9) + ' ' + (y + 9);\n        x -= 9;\n        y += 9;\n        if (node.width > 1) {\n            x -= node.pixelWidth;\n            node.d += ' L ' + x + ' ' + y;\n        }\n        node.d += ' Q ' + (x - 9) + ' ' + y + ' ' + (x - 9) + ' ' + (y - 9);\n        x -= 9;\n        y -= 9;\n        if (node.contentHeight > 0) {\n            y -= node.contentHeight - 0;\n            node.d += ' L ' + x + ' ' + y;\n        }\n    });\n    svg.selectAll('.node').data(dNodes).enter().append('path').attr('id', function (d) {\n        return d.name;\n    }).attr('d', function (d) {\n        return d.d;\n    }).on('mouseover', nodeMouseOver).on('mouseout', nodeMouseOut).on('dblclick', nodeDoubleClick).style('fill', '#fff').style('fill-opacity', config.showExonsFlag ? '0.4' : '0.6').style('stroke', 'black').style('stroke-width', '2px').append('svg:title').text(function (d) {\n        return d.name;\n    });\n}\nfunction drawLabels(dNodes) {\n    if (config.nodeWidthOption === 0) {\n        svg.selectAll('text').data(dNodes).enter().append('text').attr('x', function (d) {\n            return d.x - 4;\n        }).attr('y', function (d) {\n            return d.y + 4;\n        }).text(function (d) {\n            return d.seq;\n        }).attr('font-family', 'Courier, \"Lucida Console\", monospace').attr('font-size', '14px').attr('fill', 'black').style('pointer-events', 'none');\n    }\n}\nfunction drawRuler() {\n    var rulerTrackIndex = 0;\n    while (tracks[rulerTrackIndex].name !== trackForRuler) {\n        rulerTrackIndex += 1;\n    }\n    var rulerTrack = tracks[rulerTrackIndex];\n    svg.append('line').attr('x1', 0).attr('y1', minYCoordinate - 10).attr('x2', maxXCoordinate).attr('y2', minYCoordinate - 10).attr('stroke-width', 1).attr('stroke', 'black');\n    var markingInterval = 100;\n    if (config.nodeWidthOption === 0)\n        markingInterval = 20;\n    var indexOfFirstBaseInNode = rulerTrack.indexOfFirstBase;\n    var atLeastOneMarkingDrawn = false;\n    var xCoordOfPreviousMarking = -100;\n    if (config.nodeWidthOption !== 0) {\n        var firstNode = nodes[rulerTrack.indexSequence[0]];\n        xCoordOfPreviousMarking = getXCoordinateOfBaseWithinNode(firstNode, 0);\n        drawRulerMarking(indexOfFirstBaseInNode, xCoordOfPreviousMarking);\n        atLeastOneMarkingDrawn = true;\n    }\n    rulerTrack.indexSequence.forEach(function (nodeIndex) {\n        var currentNode = nodes[nodeIndex];\n        var nextMarking = Math.ceil(indexOfFirstBaseInNode / markingInterval) * markingInterval;\n        while (nextMarking < indexOfFirstBaseInNode + currentNode.sequenceLength) {\n            var xCoordOfMarking = getXCoordinateOfBaseWithinNode(currentNode, nextMarking - indexOfFirstBaseInNode);\n            if (xCoordOfPreviousMarking + 80 <= xCoordOfMarking) {\n                drawRulerMarking(nextMarking, xCoordOfMarking);\n                atLeastOneMarkingDrawn = true;\n                xCoordOfPreviousMarking = xCoordOfMarking;\n            }\n            nextMarking += markingInterval;\n        }\n        indexOfFirstBaseInNode += nodes[nodeIndex].sequenceLength;\n    });\n    if (!atLeastOneMarkingDrawn) {\n        drawRulerMarking(rulerTrack.indexOfFirstBase, nodes[rulerTrack.indexSequence[0]].x - 4);\n    }\n}\nfunction drawRulerMarking(sequencePosition, xCoordinate) {\n    svg.append('text').attr('x', xCoordinate).attr('y', minYCoordinate - 13).text('|' + sequencePosition).attr('font-family', 'Courier, \"Lucida Console\", monospace').attr('font-size', '12px').attr('fill', 'black').style('pointer-events', 'none');\n}\nfunction filterObjectByAttribute(attribute, value) {\n    return function (item) {\n        return item[attribute] === value;\n    };\n}\nfunction drawTrackRectangles(rectangles, type) {\n    if (typeof type === 'undefined')\n        type = 'haplo';\n    rectangles = rectangles.filter(filterObjectByAttribute('type', type));\n    svg.selectAll('trackRectangles').data(rectangles).enter().append('rect').attr('x', function (d) {\n        return d.xStart;\n    }).attr('y', function (d) {\n        return d.yStart;\n    }).attr('width', function (d) {\n        return d.xEnd - d.xStart + 1;\n    }).attr('height', function (d) {\n        return d.yEnd - d.yStart + 1;\n    }).style('fill', function (d) {\n        return d.color;\n    }).attr('trackID', function (d) {\n        return d.id;\n    }).attr('class', function (d) {\n        return 'track' + d.id;\n    }).attr('color', function (d) {\n        return d.color;\n    }).on('mouseover', trackMouseOver).on('mouseout', trackMouseOut).on('dblclick', trackDoubleClick);\n}\nfunction compareCurvesByLineChanges(a, b) {\n    if (a[6] < b[6])\n        return -1;\n    else if (a[6] > b[6])\n        return 1;\n    return 0;\n}\nfunction defineSVGPatterns() {\n    var pattern = svg.append('defs').append('pattern').attr({\n            id: 'patternA',\n            width: '7',\n            height: '7',\n            patternUnits: 'userSpaceOnUse',\n            patternTransform: 'rotate(45)'\n        });\n    pattern.append('rect').attr({\n        x: '0',\n        y: '0',\n        width: '7',\n        height: '7',\n        fill: '#FFFFFF'\n    });\n    pattern.append('rect').attr({\n        x: '0',\n        y: '0',\n        width: '3',\n        height: '3',\n        fill: '#505050'\n    });\n    pattern.append('rect').attr({\n        x: '0',\n        y: '4',\n        width: '3',\n        height: '3',\n        fill: '#505050'\n    });\n    pattern.append('rect').attr({\n        x: '4',\n        y: '0',\n        width: '3',\n        height: '3',\n        fill: '#505050'\n    });\n    pattern.append('rect').attr({\n        x: '4',\n        y: '4',\n        width: '3',\n        height: '3',\n        fill: '#505050'\n    });\n    pattern = svg.append('defs').append('pattern').attr({\n        id: 'patternB',\n        width: '8',\n        height: '8',\n        patternUnits: 'userSpaceOnUse',\n        patternTransform: 'rotate(45)'\n    });\n    pattern.append('rect').attr({\n        x: '0',\n        y: '0',\n        width: '8',\n        height: '8',\n        fill: '#FFFFFF'\n    });\n    pattern.append('rect').attr({\n        x: '0',\n        y: '0',\n        width: '3',\n        height: '3',\n        fill: '#1f77b4'\n    });\n    pattern.append('rect').attr({\n        x: '0',\n        y: '5',\n        width: '3',\n        height: '3',\n        fill: '#1f77b4'\n    });\n    pattern.append('rect').attr({\n        x: '5',\n        y: '0',\n        width: '3',\n        height: '3',\n        fill: '#1f77b4'\n    });\n    pattern.append('rect').attr({\n        x: '5',\n        y: '5',\n        width: '3',\n        height: '3',\n        fill: '#1f77b4'\n    });\n    pattern = svg.append('defs').append('pattern').attr({\n        id: 'plaid0',\n        width: '6',\n        height: '6',\n        patternUnits: 'userSpaceOnUse',\n        patternTransform: 'rotate(45)'\n    });\n    pattern.append('rect').attr({\n        x: '0',\n        y: '0',\n        width: '6',\n        height: '6',\n        fill: '#FFFFFF'\n    });\n    pattern.append('rect').attr({\n        x: '0',\n        y: '0',\n        width: '2',\n        height: '2',\n        fill: '#1f77b4'\n    });\n    pattern.append('rect').attr({\n        x: '0',\n        y: '4',\n        width: '2',\n        height: '2',\n        fill: '#1f77b4'\n    });\n    pattern.append('rect').attr({\n        x: '4',\n        y: '0',\n        width: '2',\n        height: '2',\n        fill: '#1f77b4'\n    });\n    pattern.append('rect').attr({\n        x: '4',\n        y: '4',\n        width: '2',\n        height: '2',\n        fill: '#1f77b4'\n    });\n    pattern = svg.append('defs').append('pattern').attr({\n        id: 'plaid1',\n        width: '6',\n        height: '6',\n        patternUnits: 'userSpaceOnUse',\n        patternTransform: 'rotate(45)'\n    });\n    pattern.append('rect').attr({\n        x: '0',\n        y: '0',\n        width: '6',\n        height: '6',\n        fill: '#FFFFFF'\n    });\n    pattern.append('rect').attr({\n        x: '0',\n        y: '0',\n        width: '2',\n        height: '2',\n        fill: '#ff7f0e'\n    });\n    pattern.append('rect').attr({\n        x: '0',\n        y: '4',\n        width: '2',\n        height: '2',\n        fill: '#ff7f0e'\n    });\n    pattern.append('rect').attr({\n        x: '4',\n        y: '0',\n        width: '2',\n        height: '2',\n        fill: '#ff7f0e'\n    });\n    pattern.append('rect').attr({\n        x: '4',\n        y: '4',\n        width: '2',\n        height: '2',\n        fill: '#ff7f0e'\n    });\n    pattern = svg.append('defs').append('pattern').attr({\n        id: 'plaid2',\n        width: '6',\n        height: '6',\n        patternUnits: 'userSpaceOnUse',\n        patternTransform: 'rotate(45)'\n    });\n    pattern.append('rect').attr({\n        x: '0',\n        y: '0',\n        width: '6',\n        height: '6',\n        fill: '#FFFFFF'\n    });\n    pattern.append('rect').attr({\n        x: '0',\n        y: '0',\n        width: '2',\n        height: '2',\n        fill: '#2ca02c'\n    });\n    pattern.append('rect').attr({\n        x: '0',\n        y: '4',\n        width: '2',\n        height: '2',\n        fill: '#2ca02c'\n    });\n    pattern.append('rect').attr({\n        x: '4',\n        y: '0',\n        width: '2',\n        height: '2',\n        fill: '#2ca02c'\n    });\n    pattern.append('rect').attr({\n        x: '4',\n        y: '4',\n        width: '2',\n        height: '2',\n        fill: '#2ca02c'\n    });\n    pattern = svg.append('defs').append('pattern').attr({\n        id: 'plaid3',\n        width: '6',\n        height: '6',\n        patternUnits: 'userSpaceOnUse',\n        patternTransform: 'rotate(45)'\n    });\n    pattern.append('rect').attr({\n        x: '0',\n        y: '0',\n        width: '6',\n        height: '6',\n        fill: '#FFFFFF'\n    });\n    pattern.append('rect').attr({\n        x: '0',\n        y: '0',\n        width: '2',\n        height: '2',\n        fill: '#d62728'\n    });\n    pattern.append('rect').attr({\n        x: '0',\n        y: '4',\n        width: '2',\n        height: '2',\n        fill: '#d62728'\n    });\n    pattern.append('rect').attr({\n        x: '4',\n        y: '0',\n        width: '2',\n        height: '2',\n        fill: '#d62728'\n    });\n    pattern.append('rect').attr({\n        x: '4',\n        y: '4',\n        width: '2',\n        height: '2',\n        fill: '#d62728'\n    });\n    pattern = svg.append('defs').append('pattern').attr({\n        id: 'plaid4',\n        width: '6',\n        height: '6',\n        patternUnits: 'userSpaceOnUse',\n        patternTransform: 'rotate(45)'\n    });\n    pattern.append('rect').attr({\n        x: '0',\n        y: '0',\n        width: '6',\n        height: '6',\n        fill: '#FFFFFF'\n    });\n    pattern.append('rect').attr({\n        x: '0',\n        y: '0',\n        width: '2',\n        height: '2',\n        fill: '#9467bd'\n    });\n    pattern.append('rect').attr({\n        x: '0',\n        y: '4',\n        width: '2',\n        height: '2',\n        fill: '#9467bd'\n    });\n    pattern.append('rect').attr({\n        x: '4',\n        y: '0',\n        width: '2',\n        height: '2',\n        fill: '#9467bd'\n    });\n    pattern.append('rect').attr({\n        x: '4',\n        y: '4',\n        width: '2',\n        height: '2',\n        fill: '#9467bd'\n    });\n    pattern = svg.append('defs').append('pattern').attr({\n        id: 'plaid5',\n        width: '6',\n        height: '6',\n        patternUnits: 'userSpaceOnUse',\n        patternTransform: 'rotate(45)'\n    });\n    pattern.append('rect').attr({\n        x: '0',\n        y: '0',\n        width: '6',\n        height: '6',\n        fill: '#FFFFFF'\n    });\n    pattern.append('rect').attr({\n        x: '0',\n        y: '0',\n        width: '2',\n        height: '2',\n        fill: '#8c564b'\n    });\n    pattern.append('rect').attr({\n        x: '0',\n        y: '4',\n        width: '2',\n        height: '2',\n        fill: '#8c564b'\n    });\n    pattern.append('rect').attr({\n        x: '4',\n        y: '0',\n        width: '2',\n        height: '2',\n        fill: '#8c564b'\n    });\n    pattern.append('rect').attr({\n        x: '4',\n        y: '4',\n        width: '2',\n        height: '2',\n        fill: '#8c564b'\n    });\n}\nfunction drawTrackCurves(type) {\n    if (typeof type === 'undefined')\n        type = 'haplo';\n    var myTrackCurves = trackCurves.filter(filterObjectByAttribute('type', type));\n    myTrackCurves.sort(compareCurvesByLineChanges);\n    myTrackCurves.forEach(function (curve) {\n        var xMiddle = (curve.xStart + curve.xEnd) / 2;\n        var d = 'M ' + curve.xStart + ' ' + curve.yStart;\n        d += ' C ' + xMiddle + ' ' + curve.yStart + ' ' + xMiddle + ' ' + curve.yEnd + ' ' + curve.xEnd + ' ' + curve.yEnd;\n        d += ' V ' + (curve.yEnd + curve.width);\n        d += ' C ' + xMiddle + ' ' + (curve.yEnd + curve.width) + ' ' + xMiddle + ' ' + (curve.yStart + curve.width) + ' ' + curve.xStart + ' ' + (curve.yStart + curve.width);\n        d += ' Z';\n        curve.path = d;\n    });\n    svg.selectAll('trackCurves').data(trackCurves).enter().append('path').attr('d', function (d) {\n        return d.path;\n    }).style('fill', function (d) {\n        return d.color;\n    }).attr('trackID', function (d) {\n        return d.id;\n    }).attr('class', function (d) {\n        return 'track' + d.id;\n    }).attr('color', function (d) {\n        return d.color;\n    }).on('mouseover', trackMouseOver).on('mouseout', trackMouseOut).on('dblclick', trackDoubleClick);\n}\nfunction drawTrackCorners(corners, type) {\n    if (typeof type === 'undefined')\n        type = 'haplo';\n    corners = corners.filter(filterObjectByAttribute('type', type));\n    svg.selectAll('trackCorners').data(corners).enter().append('path').attr('d', function (d) {\n        return d.path;\n    }).style('fill', function (d) {\n        return d.color;\n    }).attr('trackID', function (d) {\n        return d.id;\n    }).attr('class', function (d) {\n        return 'track' + d.id;\n    }).attr('color', function (d) {\n        return d.color;\n    }).on('mouseover', trackMouseOver).on('mouseout', trackMouseOut).on('dblclick', trackDoubleClick);\n}\nfunction drawLegend() {\n    var content = '<table class=\"table-sm table-condensed table-nonfluid\"><thead><tr><th>Color</th><th>Trackname</th><th>Show Track</th></tr></thead>';\n    var listeners = [];\n    for (var i = 0; i < tracks.length; i += 1) {\n        if (tracks[i].type === 'haplo') {\n            content += '<tr><td style=\"text-align:right\"><div class=\"color-box\" style=\"background-color: ' + generateTrackColor(tracks[i], 'exon') + ';\"></div></td>';\n            if (tracks[i].hasOwnProperty('name')) {\n                content += '<td>' + tracks[i].name + '</td>';\n            } else {\n                content += '<td>' + tracks[i].id + '</td>';\n            }\n            content += '<td><input type=\"checkbox\" checked=true id=\"showTrack' + i + '\"></td>';\n            listeners.push(i);\n        }\n    }\n    content += '</table';\n    $('#legendDiv').html(content);\n    listeners.forEach(function (i) {\n        document.getElementById('showTrack' + i).addEventListener('click', function () {\n            return changeTrackVisibility(i);\n        }, false);\n    });\n}\nfunction trackMouseOver() {\n    var trackID = d3.select(this).attr('trackID');\n    d3.selectAll('.track' + trackID).style('fill', 'url(#patternA)');\n}\nfunction nodeMouseOver() {\n    d3.select(this).style('stroke-width', '4px');\n}\nfunction trackMouseOut() {\n    var trackID = d3.select(this).attr('trackID');\n    d3.selectAll('.track' + trackID).each(function clearTrackHighlight() {\n        var c = d3.select(this).attr('color');\n        d3.select(this).style('fill', c);\n    });\n}\nfunction nodeMouseOut() {\n    d3.select(this).style('stroke-width', '2px');\n}\nfunction trackDoubleClick() {\n    var trackID = d3.select(this).attr('trackID');\n    var index = 0;\n    while (index < inputTracks.length && inputTracks[index].id !== Number(trackID)) {\n        index += 1;\n    }\n    if (index >= inputTracks.length)\n        return;\n    console.log('moving index: ' + index);\n    moveTrackToFirstPosition(index);\n    createTubeMap();\n}\nfunction nodeDoubleClick() {\n    var nodeID = d3.select(this).attr('id');\n    if (config.clickableNodesFlag) {\n        if (reads && config.showReads) {\n            document.getElementById('hgvmNodeID').value = nodeID;\n            document.getElementById('hgvmPostButton').click();\n        } else {\n            document.getElementById('nodeID').value = nodeID;\n            document.getElementById('postButton').click();\n        }\n    }\n}\nfunction vgExtractNodes(vg) {\n    var result = [];\n    vg.node.forEach(function (node) {\n        result.push({\n            name: '' + node.id,\n            sequenceLength: node.sequence.length,\n            seq: node.sequence\n        });\n    });\n    return result;\n}\nfunction generateNodeWidth() {\n    nodes.forEach(function (node) {\n        if (!node.hasOwnProperty('sequenceLength')) {\n            node.sequenceLength = node.seq.length;\n        }\n    });\n    switch (config.nodeWidthOption) {\n    case 1:\n        nodes.forEach(function (node) {\n            node.width = 1 + Math.log(node.sequenceLength) / Math.log(2);\n            node.pixelWidth = Math.round((node.width - 1) * 8.401);\n        });\n        break;\n    case 2:\n        nodes.forEach(function (node) {\n            node.width = node.sequenceLength / 100;\n            node.pixelWidth = Math.round((node.width - 1) * 8.401);\n        });\n        break;\n    default:\n        nodes.forEach(function (node) {\n            node.width = node.sequenceLength;\n            svg.append('text').attr('x', 0).attr('y', 100).attr('id', 'dummytext').text(node.seq.substr(1)).attr('font-family', 'Courier, \"Lucida Console\", monospace').attr('font-size', '14px').attr('fill', 'black').style('pointer-events', 'none');\n            node.pixelWidth = Math.round(document.getElementById('dummytext').getComputedTextLength());\n            $('#dummytext').remove();\n        });\n    }\n}\nfunction vgExtractTracks(vg) {\n    var result = [];\n    vg.path.forEach(function (path, index) {\n        var sequence = [];\n        var isCompletelyReverse = true;\n        path.mapping.forEach(function (pos) {\n            if (pos.position.hasOwnProperty('is_reverse') && pos.position.is_reverse === true) {\n                sequence.push('-' + pos.position.node_id);\n            } else {\n                sequence.push('' + pos.position.node_id);\n                isCompletelyReverse = false;\n            }\n        });\n        if (isCompletelyReverse) {\n            sequence.reverse();\n            sequence.forEach(function (node, index2) {\n                sequence[index2] = node.substr(1);\n            });\n        }\n        var track = {};\n        track.id = index;\n        track.sequence = sequence;\n        if (path.hasOwnProperty('freq'))\n            track.freq = path.freq;\n        if (path.hasOwnProperty('name'))\n            track.name = path.name;\n        if (path.hasOwnProperty('indexOfFirstBase'))\n            track.indexOfFirstBase = Number(path.indexOfFirstBase);\n        result.push(track);\n    });\n    return result;\n}\nfunction compareReadsByLeftEnd(a, b) {\n    var leftNodeA = void 0;\n    var leftNodeB = void 0;\n    var leftIndexA = void 0;\n    var leftIndexB = void 0;\n    if (a.sequence[0].charAt(0) === '-') {\n        if (a.sequence[a.sequence.length - 1].charAt(0) === '-') {\n            leftNodeA = a.sequence[a.sequence.length - 1].substr(1);\n            leftIndexA = nodes[nodeMap.get(leftNodeA)].sequenceLength - a.finalNodeCoverLength;\n        } else {\n            leftNodeA = a.sequence[a.sequence.length - 1];\n            leftIndexA = 0;\n        }\n    } else {\n        leftNodeA = a.sequence[0];\n        leftIndexA = a.firstNodeOffset;\n    }\n    if (b.sequence[0].charAt(0) === '-') {\n        if (b.sequence[b.sequence.length - 1].charAt(0) === '-') {\n            leftNodeB = b.sequence[b.sequence.length - 1].substr(1);\n            leftIndexB = nodes[nodeMap.get(leftNodeB)].sequenceLength - b.finalNodeCoverLength;\n        } else {\n            leftNodeB = b.sequence[b.sequence.length - 1];\n            leftIndexB = 0;\n        }\n    } else {\n        leftNodeB = b.sequence[0];\n        leftIndexB = b.firstNodeOffset;\n    }\n    if (leftNodeA < leftNodeB)\n        return -1;\n    else if (leftNodeA > leftNodeB)\n        return 1;\n    if (leftIndexA < leftIndexB)\n        return -1;\n    else if (leftIndexA > leftIndexB)\n        return 1;\n    return 0;\n}\nfunction compareReadsByLeftEnd2(a, b) {\n    if (nodes[a.indexSequence[0]].order < nodes[b.indexSequence[0]].order)\n        return -1;\n    else if (nodes[a.indexSequence[0]].order > nodes[b.indexSequence[0]].order)\n        return 1;\n    if (a.firstNodeOffset < b.firstNodeOffset)\n        return -1;\n    else if (a.firstNodeOffset > b.firstNodeOffset)\n        return 1;\n    if (nodes[a.indexSequence[a.indexSequence.length - 1]].order < nodes[b.indexSequence[b.indexSequence.length - 1]].order)\n        return -1;\n    else if (nodes[a.indexSequence[a.indexSequence.length - 1]].order > nodes[b.indexSequence[b.indexSequence.length - 1]].order)\n        return 1;\n    if (a.finalNodeCoverLength < b.finalNodeCoverLength)\n        return -1;\n    else if (a.finalNodeCoverLength > b.finalNodeCoverLength)\n        return 1;\n    return 0;\n}\nfunction vgExtractReads(myNodes, myTracks, myReads) {\n    console.log(myReads);\n    var extracted = [];\n    var nodeNames = [];\n    myNodes.forEach(function (node) {\n        nodeNames.push(parseInt(node.name, 10));\n    });\n    var _loop3 = function _loop3(i) {\n        var read = myReads[i];\n        var sequence = [];\n        var sequenceNew = [];\n        var firstIndex = -1;\n        var lastIndex = -1;\n        read.path.mapping.forEach(function (pos, j) {\n            if (nodeNames.indexOf(pos.position.node_id) > -1) {\n                var edit = {};\n                var offset = 0;\n                if (pos.position.hasOwnProperty('is_reverse') && pos.position.is_reverse === true) {\n                    sequence.push('-' + pos.position.node_id);\n                    edit.nodeName = '-' + pos.position.node_id;\n                } else {\n                    sequence.push('' + pos.position.node_id);\n                    edit.nodeName = pos.position.node_id.toString();\n                }\n                if (firstIndex < 0) {\n                    firstIndex = j;\n                    if (pos.position.hasOwnProperty('offset')) {\n                        pos.position.offset = parseInt(pos.position.offset, 10);\n                        offset = pos.position.offset;\n                    }\n                }\n                lastIndex = j;\n                var mismatches = [];\n                var posWithinNode = offset;\n                pos.edit.forEach(function (element) {\n                    if (element.hasOwnProperty('to_length') && !element.hasOwnProperty('from_length')) {\n                        mismatches.push({\n                            type: 'insertion',\n                            pos: posWithinNode,\n                            seq: element.sequence\n                        });\n                    } else if (!element.hasOwnProperty('to_length') && element.hasOwnProperty('from_length')) {\n                        mismatches.push({\n                            type: 'deletion',\n                            pos: posWithinNode,\n                            length: element.from_length\n                        });\n                    } else if (element.hasOwnProperty('sequence')) {\n                        if (element.sequence.length > 1) {\n                            console.log('found substitution at read ' + i + ', node ' + j + ' = ' + pos.position.node_id + ', seq = ' + element.sequence);\n                        }\n                        mismatches.push({\n                            type: 'substitution',\n                            pos: posWithinNode,\n                            seq: element.sequence\n                        });\n                    }\n                    if (element.hasOwnProperty('from_length')) {\n                        posWithinNode += element.from_length;\n                    }\n                });\n                edit.mismatches = mismatches;\n                sequenceNew.push(edit);\n            }\n        });\n        if (sequence.length === 0) {\n            console.log('read ' + i + ' is empty');\n        } else {\n            var track = {};\n            track.id = myTracks.length + extracted.length;\n            track.sequence = sequence;\n            track.sequenceNew = sequenceNew;\n            track.type = 'read';\n            if (read.path.hasOwnProperty('freq'))\n                track.freq = read.path.freq;\n            if (read.path.hasOwnProperty('name'))\n                track.name = read.path.name;\n            track.firstNodeOffset = 0;\n            if (read.path.mapping[firstIndex].position.hasOwnProperty('offset')) {\n                track.firstNodeOffset = read.path.mapping[firstIndex].position.offset;\n            }\n            var finalNodeEdit = read.path.mapping[lastIndex].edit;\n            track.finalNodeCoverLength = 0;\n            if (read.path.mapping[lastIndex].position.hasOwnProperty('offset')) {\n                track.finalNodeCoverLength += read.path.mapping[lastIndex].position.offset;\n            }\n            finalNodeEdit.forEach(function (edit) {\n                if (edit.hasOwnProperty('from_length')) {\n                    track.finalNodeCoverLength += edit.from_length;\n                }\n            });\n            extracted.push(track);\n        }\n    };\n    for (var i = 0; i < myReads.length; i += 1) {\n        _loop3(i);\n    }\n    return extracted;\n}\nfunction mergeNodes() {\n    var nodeName = void 0;\n    var nodeName2 = void 0;\n    var pred = [];\n    var succ = [];\n    for (var i = 0; i < nodes.length; i += 1) {\n        pred.push(new Set());\n        succ.push(new Set());\n    }\n    var tracksAndReads = void 0;\n    if (reads && config.showReads)\n        tracksAndReads = tracks.concat(reads);\n    else\n        tracksAndReads = tracks;\n    tracksAndReads.forEach(function (track) {\n        for (var _i7 = 0; _i7 < track.sequence.length; _i7 += 1) {\n            if (track.sequence[_i7].charAt(0) !== '-') {\n                if (_i7 > 0) {\n                    nodeName = track.sequence[_i7 - 1];\n                    pred[nodeMap.get(track.sequence[_i7])].add(nodeName);\n                    if (nodeName.charAt(0) === '-') {\n                        pred[nodeMap.get(track.sequence[_i7])].add(nodeName.substr(1));\n                    }\n                } else if (track.type === 'haplo') {\n                    pred[nodeMap.get(track.sequence[_i7])].add('None');\n                }\n                if (_i7 < track.sequence.length - 1) {\n                    nodeName = track.sequence[_i7 + 1];\n                    succ[nodeMap.get(track.sequence[_i7])].add(nodeName);\n                    if (nodeName.charAt(0) === '-') {\n                        succ[nodeMap.get(track.sequence[_i7])].add(nodeName.substr(1));\n                    }\n                } else if (track.type === 'haplo') {\n                    succ[nodeMap.get(track.sequence[_i7])].add('None');\n                }\n            } else {\n                nodeName = track.sequence[_i7].substr(1);\n                if (_i7 > 0) {\n                    nodeName2 = track.sequence[_i7 - 1];\n                    if (nodeName2.charAt(0) === '-') {\n                        succ[nodeMap.get(nodeName)].add(nodeName2.substr(1));\n                    } else {\n                        succ[nodeMap.get(nodeName)].add(nodeName2);\n                        succ[nodeMap.get(nodeName)].add('-' + nodeName2);\n                    }\n                } else if (track.type === 'haplo') {\n                    succ[nodeMap.get(nodeName)].add('None');\n                }\n                if (_i7 < track.sequence.length - 1) {\n                    nodeName2 = track.sequence[_i7 + 1];\n                    if (nodeName2.charAt(0) === '-') {\n                        pred[nodeMap.get(nodeName)].add(nodeName2.substr(1));\n                    } else {\n                        pred[nodeMap.get(nodeName)].add(nodeName2);\n                        pred[nodeMap.get(nodeName)].add('-' + nodeName2);\n                    }\n                } else if (track.type === 'haplo') {\n                    pred[nodeMap.get(nodeName)].add('None');\n                }\n            }\n        }\n    });\n    for (var _i8 = 0; _i8 < nodes.length; _i8 += 1) {\n        succ[_i8] = Array.from(succ[_i8]);\n        pred[_i8] = Array.from(pred[_i8]);\n    }\n    if (reads && config.showReads) {\n        var sortedNodes = nodes.slice();\n        sortedNodes.sort(compareNodesByOrder);\n        var mergeOffset = new Map();\n        var mergeOrigin = new Map();\n        sortedNodes.forEach(function (node) {\n            var predecessor = mergeableWithPred(nodeMap.get(node.name), pred, succ);\n            if (predecessor) {\n                mergeOffset.set(node.name, mergeOffset.get(predecessor) + nodes[nodeMap.get(predecessor)].sequenceLength);\n                mergeOrigin.set(node.name, mergeOrigin.get(predecessor));\n            } else {\n                mergeOffset.set(node.name, 0);\n                mergeOrigin.set(node.name, node.name);\n            }\n        });\n        reads.forEach(function (read) {\n            read.firstNodeOffset += mergeOffset.get(read.sequence[0]);\n            read.finalNodeCoverLength += mergeOffset.get(read.sequence[read.sequence.length - 1]);\n            for (var _i9 = read.sequence.length - 1; _i9 >= 0; _i9 -= 1) {\n                if (mergeableWithPred(nodeMap.get(read.sequence[_i9]), pred, succ)) {\n                    (function () {\n                        var predecessor = mergeableWithPred(nodeMap.get(read.sequence[_i9]), pred, succ);\n                        if (mergeableWithSucc(nodeMap.get(predecessor), pred, succ)) {\n                            if (_i9 > 0) {\n                                read.sequence.splice(_i9, 1);\n                                read.sequenceNew[_i9].mismatches.forEach(function (mismatch) {\n                                    mismatch.pos += nodes[nodeMap.get(predecessor)].sequenceLength;\n                                });\n                                read.sequenceNew[_i9 - 1].mismatches = read.sequenceNew[_i9 - 1].mismatches.concat(read.sequenceNew[_i9].mismatches);\n                                read.sequenceNew.splice(_i9, 1);\n                            } else {\n                                read.sequence[0] = mergeOrigin.get(read.sequence[0]);\n                                read.sequenceNew[_i9].mismatches.forEach(function (mismatch) {\n                                    mismatch.pos += mergeOffset.get(read.sequenceNew[0].nodeName);\n                                });\n                                read.sequenceNew[0].nodeName = mergeOrigin.get(read.sequenceNew[0].nodeName);\n                            }\n                        }\n                    }());\n                }\n            }\n        });\n    }\n    for (var _i10 = 0; _i10 < nodes.length; _i10 += 1) {\n        if (mergeableWithSucc(_i10, pred, succ) && !mergeableWithPred(_i10, pred, succ)) {\n            var donor = _i10;\n            while (mergeableWithSucc(donor, pred, succ)) {\n                donor = succ[donor][0];\n                if (donor.charAt(0) === '-')\n                    donor = donor.substr(1);\n                donor = nodeMap.get(donor);\n                if (nodes[_i10].hasOwnProperty('sequenceLength')) {\n                    nodes[_i10].sequenceLength += nodes[donor].sequenceLength;\n                } else {\n                    nodes[_i10].width += nodes[donor].width;\n                }\n                nodes[_i10].seq += nodes[donor].seq;\n            }\n        }\n    }\n    tracks.forEach(function (track) {\n        for (var _i11 = track.sequence.length - 1; _i11 >= 0; _i11 -= 1) {\n            nodeName = track.sequence[_i11];\n            if (nodeName.charAt(0) === '-')\n                nodeName = nodeName.substr(1);\n            var nodeIndex = nodeMap.get(nodeName);\n            if (mergeableWithPred(nodeIndex, pred, succ)) {\n                track.sequence.splice(_i11, 1);\n            }\n        }\n    });\n    for (var _i12 = nodes.length - 1; _i12 >= 0; _i12 -= 1) {\n        if (mergeableWithPred(_i12, pred, succ)) {\n            nodes.splice(_i12, 1);\n        }\n    }\n}\nfunction mergeableWithPred(index, pred, succ) {\n    if (pred[index].length !== 1)\n        return false;\n    if (pred[index][0] === 'None')\n        return false;\n    var predecessor = pred[index][0];\n    if (predecessor.charAt(0) === '-')\n        predecessor = predecessor.substr(1);\n    var predecessorIndex = nodeMap.get(predecessor);\n    if (succ[predecessorIndex].length !== 1)\n        return false;\n    if (succ[predecessorIndex][0] === 'None')\n        return false;\n    return predecessor;\n}\nfunction mergeableWithSucc(index, pred, succ) {\n    if (succ[index].length !== 1)\n        return false;\n    if (succ[index][0] === 'None')\n        return false;\n    var successor = succ[index][0];\n    if (successor.charAt(0) === '-')\n        successor = successor.substr(1);\n    var successorIndex = nodeMap.get(successor);\n    if (pred[successorIndex].length !== 1)\n        return false;\n    if (pred[successorIndex][0] === 'None')\n        return false;\n    return true;\n}\nfunction drawMismatches() {\n    tracks.forEach(function (read, trackIdx) {\n        if (read.type === 'read') {\n            read.sequenceNew.forEach(function (element, i) {\n                element.mismatches.forEach(function (mm) {\n                    var nodeIndex = nodeMap.get(element.nodeName);\n                    var node = nodes[nodeIndex];\n                    var x = getXCoordinateOfBaseWithinNode(node, mm.pos);\n                    var pathIndex = i;\n                    while (read.path[pathIndex].node !== nodeIndex) {\n                        pathIndex += 1;\n                    }\n                    var y = read.path[pathIndex].y;\n                    if (mm.type === 'insertion') {\n                        if (config.showSoftClips || (mm.pos !== read.firstNodeOffset || i !== 0) && (mm.pos !== read.finalNodeCoverLength || i !== read.sequenceNew.length - 1)) {\n                            drawInsertion(x - 3, y + 7, mm.seq, node.y);\n                        }\n                    } else if (mm.type === 'deletion') {\n                        var x2 = getXCoordinateOfBaseWithinNode(node, mm.pos + mm.length);\n                        drawDeletion(x, x2, y + 4, node.y);\n                    } else if (mm.type === 'substitution') {\n                        var _x = getXCoordinateOfBaseWithinNode(node, mm.pos + mm.seq.length);\n                        drawSubstitution(x + 1, _x, y + 7, node.y, mm.seq);\n                    }\n                });\n            });\n        }\n    });\n}\nfunction drawInsertion(x, y, seq, nodeY) {\n    svg.append('text').attr('x', x).attr('y', y).text('*').attr('font-family', 'Courier, \"Lucida Console\", monospace').attr('font-size', '12px').attr('fill', 'black').attr('nodeY', nodeY).on('mouseover', insertionMouseOver).on('mouseout', insertionMouseOut).append('svg:title').text(seq);\n}\nfunction drawSubstitution(x1, x2, y, nodeY, seq) {\n    svg.append('text').attr('x', x1).attr('y', y).text(seq).attr('font-family', 'Courier, \"Lucida Console\", monospace').attr('font-size', '12px').attr('fill', 'black').attr('nodeY', nodeY).attr('rightX', x2).on('mouseover', substitutionMouseOver).on('mouseout', substitutionMouseOut);\n}\nfunction drawDeletion(x1, x2, y, nodeY) {\n    svg.append('line').attr('x1', x1).attr('y1', y - 1).attr('x2', x2).attr('y2', y - 1).attr('stroke-width', 7).attr('stroke', 'grey').attr('nodeY', nodeY).on('mouseover', deletionMouseOver).on('mouseout', deletionMouseOut);\n}\nfunction insertionMouseOver() {\n    d3.select(this).attr('fill', 'red');\n    var x = Number(d3.select(this).attr('x'));\n    var y = Number(d3.select(this).attr('y'));\n    var yTop = Number(d3.select(this).attr('nodeY'));\n    svg.append('line').attr('class', 'insertionHighlight').attr('x1', x + 4).attr('y1', y - 10).attr('x2', x + 4).attr('y2', yTop + 5).attr('stroke-width', 1).attr('stroke', 'black');\n}\nfunction deletionMouseOver() {\n    d3.select(this).attr('stroke', 'red');\n    var x1 = Number(d3.select(this).attr('x1'));\n    var x2 = Number(d3.select(this).attr('x2'));\n    var y = Number(d3.select(this).attr('y1'));\n    var yTop = Number(d3.select(this).attr('nodeY'));\n    svg.append('line').attr('class', 'deletionHighlight').attr('x1', x1).attr('y1', y - 3).attr('x2', x1).attr('y2', yTop + 5).attr('stroke-width', 1).attr('stroke', 'black');\n    svg.append('line').attr('class', 'deletionHighlight').attr('x1', x2).attr('y1', y - 3).attr('x2', x2).attr('y2', yTop + 5).attr('stroke-width', 1).attr('stroke', 'black');\n}\nfunction substitutionMouseOver() {\n    d3.select(this).attr('fill', 'red');\n    var x1 = Number(d3.select(this).attr('x'));\n    var x2 = Number(d3.select(this).attr('rightX'));\n    var y = Number(d3.select(this).attr('y'));\n    var yTop = Number(d3.select(this).attr('nodeY'));\n    svg.append('line').attr('class', 'substitutionHighlight').attr('x1', x1 - 1).attr('y1', y - 7).attr('x2', x1 - 1).attr('y2', yTop + 5).attr('stroke-width', 1).attr('stroke', 'black');\n    svg.append('line').attr('class', 'substitutionHighlight').attr('x1', x2 + 1).attr('y1', y - 7).attr('x2', x2 + 1).attr('y2', yTop + 5).attr('stroke-width', 1).attr('stroke', 'black');\n}\nfunction insertionMouseOut() {\n    d3.select(this).attr('fill', 'black');\n    d3.selectAll('.insertionHighlight').remove();\n}\nfunction deletionMouseOut() {\n    d3.select(this).attr('stroke', 'grey');\n    d3.selectAll('.deletionHighlight').remove();\n}\nfunction substitutionMouseOut() {\n    d3.select(this).attr('fill', 'black');\n    d3.selectAll('.substitutionHighlight').remove();\n}","module.exports={\n  \"BACKEND_URL\": false,\n  \"DATA_SOURCES\": [\n    {\n      \"name\": \"snp1kg-BRCA1\",\n      \"xgFile\": \"snp1kg-BRCA1.vg.xg\",\n      \"gamIndex\": \"NA12878-BRCA1.gam.index\",\n      \"anchorTrackName\": \"17\",\n      \"useMountedPath\": false,\n      \"defaultPosition\": \"1\"\n    },\n    {\n      \"name\": \"cactus\",\n      \"xgFile\": \"cactus.vg.xg\",\n      \"gamIndex\": \"cactus-NA12879.gam.index\",\n      \"anchorTrackName\": \"ref\",\n      \"useMountedPath\": false,\n      \"defaultPosition\": \"1\"\n    },\n    {\n      \"name\": \"vg \\\"small\\\" example\",\n      \"xgFile\": \"x.vg.xg\",\n      \"gbwtFile\": \"x.vg.gbwt\",\n      \"anchorTrackName\": \"x\",\n      \"useMountedPath\": false,\n      \"defaultPosition\": \"1\"\n    }\n  ]\n}\n","module.exports={\n  \"BACKEND_URL\": \"https://api.wbeyer.com\",\n  \"DATA_SOURCES\": [\n    {\n      \"name\": \"chr22_v4\",\n      \"xgFile\": \"chr22_v4.vg.xg\",\n      \"gamIndex\": \"NA12878_mapped_v4.gam.index\",\n      \"anchorTrackName\": \"22\",\n      \"useMountedPath\": false,\n      \"defaultPosition\": \"17697661\"\n    }\n  ]\n}\n","// JSON Konstruktor für die Überprüfung ob ein Objekt JSON ist\r\nvar jsonC = {}.constructor ;\r\n\r\nvar isJSON = function(json){\r\n\tif(json && json.constructor === jsonC){\r\n\t\treturn true ;\r\n\t}else{\r\n\t\treturn false ;\r\n\t}\r\n}\r\n\r\nexports.isJSON = isJSON ;\r\n\r\n\r\nvar mergeJSON = function(json1, json2){\r\n\tvar result = null ;\r\n\tif(isJSON(json2)){\r\n\t\tresult = {} ;\r\n\t\tif(isJSON(json1)){\r\n\t\t\tfor(var key in json1){\r\n\t\t\t\tresult[key] = json1[key] ;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor(var key in json2){\r\n\t\t\tif(typeof result[key] === \"object\" && typeof json2 === \"object\"){\r\n\t\t\t\tresult[key] = mergeJSON(result[key], json2[key]) ;\r\n\t\t\t}else{\r\n\t\t\t\tresult[key] = json2[key] ;\r\n\t\t\t}\r\n\t\t}\r\n\t}else if(Array.isArray(json1) && Array.isArray(json2)){\r\n\t\tresult = json1 ;\r\n\r\n\t\tfor(var i = 0; i < json2.length; i++){\r\n\t\t\tif(result.indexOf(json2[i]) === -1){\r\n\t\t\t\tresult[result.length] = json2[i] ;\r\n\t\t\t}\r\n\t\t}\r\n\t}else{\r\n\t\tresult = json2 ;\r\n\t}\r\n\r\n\treturn result ;\r\n}\r\n\r\nexports.merge = mergeJSON ;\r\n"]}
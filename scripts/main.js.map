{"version":3,"sources":["../.tmp/scripts/node_modules/browser-pack/_prelude.js","../.tmp/scripts/app/scripts/main.js","../.tmp/scripts/app/scripts/tubemap.js","../.tmp/scripts/config.default.json","../.tmp/scripts/config.json","../.tmp/scripts/node_modules/merge-json/index.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","_interopRequireWildcard","obj","__esModule","newObj","key","Object","prototype","hasOwnProperty","default","getPathNames","xgFile","$","val","ajax","type","url","BACKEND_URL","crossDomain","data","dataType","success","response","optNone","document","getElementById","createElement","value","innerHTML","append","pathNames","forEach","fn","error","responseData","textStatus","errorThrown","console","log","prepareForTubeMap","d3","select","selectAll","remove","attr","w","width","html","setAttribute","getRemoteTubeMapData","nodeID","distance","byNode","selectedIndex","gbwtFile","gamIndex","anchorTrackName","useMountedPath","DATA_SOURCES","ds","name","undefined","graph","innerText","style","display","nodes","tubeMap","vgExtractNodes","tracks","vgExtractTracks","createTubeMap","vgExtractReads","gam","reads","create","svgID","endTime","performance","now","startTime","clearDropdownsWithFilenames","xgSelect","hasChildNodes","removeChild","lastChild","opt1","appendChild","gbwtSelect","opt2","gamIndexSelect","opt3","populateDropdownsWithFilenames","xgSelectValue","options","gbwtSelectValue","gamSelectValue","xgFiles","filename","opt","selected","gbwtFiles","gamIndices","setUpWebsocket","ws","WebSocket","replace","onmessage","message","onclose","event","setTimeout","onerror","close","_mergeJson","mergeJSON","_tubemap","CONFIG","merge","err","window","location","host","change","prop","defaultPosition","empty","onclick","position","Number","Math","max","zoomBy","checked","setMergeNodesFlag","setNodeWidthOption","setShowReadsFlag","setSoftClipsFlag","radios","getElementsByClassName","trackType","colorSet","this","setColorSet","svgN","svgData","XMLSerializer","serializeToString","svgBlob","Blob","svgUrl","URL","createObjectURL","downloadLink","href","download","body","click","onload","dsSelect","params","svg","inputNodes","JSON","parse","stringify","inputTracks","inputReads","bed","config","clickableNodesFlag","clickableNodes","hideLegendFlag","hideLegend","drawLegend","moveTrackToFirstPosition","index","unshift","splice","straightenTrack","j","nodesToInvert","currentSequence","nodeName","sequence","charAt","substr","indexOf","push","node","seq","split","reverse","join","changeTrackVisibility","trackID","id","hidden","changeExonVisibility","showExonsFlag","mergeNodesFlag","showSoftClips","showReads","nodeWidthOption","trackRectangles","trackCurves","trackCorners","trackVerticalRectangles","trackRectanglesStep3","assignments","extraLeft","extraRight","maxYCoordinate","minYCoordinate","maxXCoordinate","trackForRuler","assignColorSets","nodeMap","generateNodeMap","generateTrackIndexSequences","generateNodeWidth","generateNodeSuccessors","generateNodeOrder","reverseReversedReads","mergeNodes","numberOfNodes","numberOfTracks","generateNodeDegree","DEBUG","maxOrder","getMaxOrder","calculateTrackWidth","generateLaneAssignment","addTrackFeatures","generateNodeXCoords","generateReadOnlyNodeAttributes","placeReads","concat","generateSVGShapesFromPath","getImageDimensions","alignSVG","defineSVGPatterns","drawTrackRectangles","drawTrackCurves","drawReversalsByColor","dNodes","removeUnusedNodes","drawNodes","drawLabels","drawRuler","drawMismatches","nodesPerOrder","orderY","Map","has","order","set","y","contentHeight","get","assignReadsToNodes","incomingReads","outgoingReads","internalReads","read","idx","path","element","pathIdx","generateBasicPathsForReads","sortedNodes","slice","sort","compareNodesByOrder","compareReadIncomingSegmentsByComingFrom","currentY","occupiedUntil","readElement","setOccupiedUntil","maxY","compareReadOutgoingSegmentsByGoingTo","occupiedFrom","firstNodeOffset","incReadElementIndices","incRead","incReadPathElement","compareInternalReads","readIdx","currentRead","finalNodeCoverLength","heightIncrease","adjustVertically3","bottomY","calculateBottomY","elementsWithoutNode","readIndex","pathIndex","previousY","compareNoNodeReadsByPreviousY","segment","map","sequenceLength","b","segmentA","segmentB","pathIndexA","pathIndexB","nodeA","nodeB","beginDiff","pathA","pathB","idxA","idxB","track","currentNodeIndex","currentNodeIsForward","currentNode","previousNode","previousNodeIsForward","isPositive","abs","indexSequence","isForward","_j","pos","is_reverse","sequenceNew","_i","nodeWidth","mismatches","mm","getReverseComplement","temp","seqLength","s","result","tracksOrReads","allNodes","x","pixelWidth","min","zoomed","transform","k","svg2","clientWidth","parent","zoom","scaleExtent","translateExtent","on","zoomIdentity","translate","zoomFactor","minZoom","substring","parentElement","zoomTransform","translateK","translateX","translateY","transition","duration","scale","current","follower","successors","predecessors","generateNodeOrderOfSingleTrack","forwardOrder","backwardOrder","minOrder","nodeIndex","increaseOrderForAllNodes","generateNodeOrderTrackBeginning","anchorIndex","currentOrder","increment","modifiedSequence","rightIndex","leftIndex","tracksAndReads","uninvert","increaseOrderForSuccessors","isSuccessor","degree","_j2","_j3","_j4","first","second","visited","Array","fill","stack","pop","childIndex","amount","startingNode","tabuNode","newOrder","increasedOrders","queue","shift","successor","predecessor","currentX","nextX","extra","calculateExtraSpace","leftSideEdges","rightSideEdges","_i2","_i3","segmentNumber","prevSegmentPerOrderPerTrack","trackNo","lane","addToAssignment","_i4","_j5","_j6","_i5","generateSingleLaneAssignment","segmentID","compareToFromSame","getIdealLanesAndCoords","assignment","idealLane","idealY","currentLane","potentialAdjustmentValues","Set","prevNameIsNull","prevTrack","compareByIdealLane","topLane","add","adjustVertically","verticalAdjustment","minAdjustmentCost","MAX_SAFE_INTEGER","moveBy","getVerticalAdjustmentCost","adjustBy","assignmentNode","aNode","nodeStart","nodeEnd","feature","line","start","end","continue","features","allAreFour","round","freq","useColorScheme","colorScheme","haplotypeColors","getColorSet","forwardReadColors","reverseReadColors","exonColors","colorSetName","plainColors","reds","blues","greys","lightColors","generateTrackColor","highlight","getReadXStart","getXCoordinateOfBaseWithinNode","getReadXEnd","base","nodeLeftX","nodeRightX","xStart","xEnd","yStart","yEnd","trackColor","dummy","reversalFlag","orderStartX","orderEndX","_i6","createFeatureRectangle","color","laneChange","generateForwardToReverse","generateReverseToForward","nodeXStart","nodeXEnd","rectXStart","currentHighlight","co","featureXStart","featureXEnd","trackWidth","yTop","yBottom","d","corners","rectangles","rect","filter","filterObjectByAttribute","drawTrackCorners","enter","nodeMouseOver","nodeMouseOut","nodeDoubleClick","text","rulerTrackIndex","rulerTrack","markingInterval","indexOfFirstBaseInNode","indexOfFirstBase","atLeastOneMarkingDrawn","xCoordOfPreviousMarking","firstNode","drawRulerMarking","nextMarking","ceil","xCoordOfMarking","sequencePosition","xCoordinate","attribute","item","trackMouseOver","trackMouseOut","trackDoubleClick","compareCurvesByLineChanges","defs","pattern","attrs","height","patternUnits","patternTransform","myTrackCurves","curve","xMiddle","content","listeners","addEventListener","each","vg","getComputedTextLength","isCompletelyReverse","mapping","node_id","index2","myNodes","myTracks","myReads","extracted","nodeNames","parseInt","firstIndex","lastIndex","edit","offset","toString","posWithinNode","from_length","finalNodeEdit","nodeName2","pred","succ","_i7","_i8","from","mergeOffset","mergeOrigin","mergeableWithPred","_i9","mergeableWithSucc","mismatch","_i10","donor","_i11","_i12","predecessorIndex","successorIndex","trackIdx","drawInsertion","x2","drawDeletion","_x","drawSubstitution","nodeY","insertionMouseOver","insertionMouseOut","x1","substitutionMouseOver","substitutionMouseOut","deletionMouseOver","deletionMouseOut","defineProperty","jsonC","constructor","isJSON","json","json1","json2","isArray"],"mappings":"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","file":"main.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","'use strict';\nvar _mergeJson = require('merge-json');\nvar mergeJSON = _interopRequireWildcard(_mergeJson);\nvar _tubemap = require('./tubemap');\nvar tubeMap = _interopRequireWildcard(_tubemap);\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    } else {\n        var newObj = {};\n        if (obj != null) {\n            for (var key in obj) {\n                if (Object.prototype.hasOwnProperty.call(obj, key))\n                    newObj[key] = obj[key];\n            }\n        }\n        newObj.default = obj;\n        return newObj;\n    }\n}\nvar CONFIG = require('../../config.default.json');\ntry {\n    CONFIG = mergeJSON.merge(CONFIG, require('../../config.json'));\n} catch (err) {\n}\nvar BACKEND_URL = CONFIG.BACKEND_URL || 'http://' + window.location.host;\nvar DATA_SOURCES = CONFIG.DATA_SOURCES;\nvar startTime = 0;\n$('#dataSourceSelect').change(function () {\n    $('#distance').prop('value', '100');\n    $('#unitSelect').prop('value', '1');\n    if ($('#dataSourceSelect').val() === 'custom') {\n        $('#reloadButton').prop('disabled', false);\n        $('#xgFileSelect').prop('disabled', false);\n        $('#gbwtFileSelect').prop('disabled', false);\n        $('#gamIndexSelect').prop('disabled', false);\n        $('#pathNameSelect').prop('disabled', false);\n        $('#position').prop('value', '1');\n    } else {\n        $('#reloadButton').prop('disabled', true);\n        $('#xgFileSelect').prop('disabled', true);\n        $('#gbwtFileSelect').prop('disabled', true);\n        $('#gamIndexSelect').prop('disabled', true);\n        $('#pathNameSelect').prop('disabled', true);\n        DATA_SOURCES.forEach(function (ds) {\n            if (ds.name === $('#dataSourceSelect').val()) {\n                $('#position').prop('value', ds.defaultPosition);\n            }\n        });\n    }\n});\n$('#xgFileSelect').change(function () {\n    $('#pathNameSelect').empty();\n    if ($('#xgFileSelect').val() === 'none') {\n        var opt = document.createElement('option');\n        opt.value = 'none';\n        opt.innerHTML = 'None';\n        $('#pathNameSelect').append(opt);\n    } else {\n        getPathNames();\n    }\n});\nfunction getPathNames() {\n    var xgFile = $('#xgFileSelect').val();\n    $.ajax({\n        type: 'POST',\n        url: BACKEND_URL + '/getPathNames',\n        crossDomain: true,\n        data: { xgFile: xgFile },\n        dataType: 'json',\n        success: function success(response) {\n            var pathNameSelect = document.getElementById('pathNameSelect');\n            var optNone = document.createElement('option');\n            optNone.value = 'none';\n            optNone.innerHTML = 'None';\n            $('#pathNameSelect').append(optNone);\n            response.pathNames.forEach(function (fn) {\n                var opt = document.createElement('option');\n                $('#pathNameSelect').append('<option value=\"' + fn + '\" selected>' + fn + '</option>');\n            });\n        },\n        error: function error(responseData, textStatus, errorThrown) {\n            console.log('POST failed.');\n        }\n    });\n}\ndocument.getElementById('reloadButton').onclick = function () {\n    populateDropdownsWithFilenames();\n};\ndocument.getElementById('goButton').onclick = function () {\n    startTime = performance.now();\n    prepareForTubeMap();\n};\ndocument.getElementById('goLeftButton').onclick = function () {\n    var position = Number(document.getElementById('position').value);\n    var distance = Number(document.getElementById('distance').value);\n    document.getElementById('position').value = Math.max(position - distance, 0);\n    prepareForTubeMap();\n};\nvar zoomFactor = 2;\ndocument.getElementById('zoomInButton').onclick = function () {\n    tubeMap.zoomBy(zoomFactor);\n};\ndocument.getElementById('zoomOutButton').onclick = function () {\n    tubeMap.zoomBy(1 / zoomFactor);\n};\ndocument.getElementById('goRightButton').onclick = function () {\n    var position = Number(document.getElementById('position').value);\n    var distance = Number(document.getElementById('distance').value);\n    document.getElementById('position').value = position + distance;\n    prepareForTubeMap();\n};\nfunction prepareForTubeMap() {\n    d3.select('#svg').selectAll('*').remove();\n    d3.select('#svg').attr('width', 100);\n    var w = $('#tubeMapSVG').width();\n    $('#legendDiv').html('');\n    document.getElementById('loader').setAttribute('style', 'left:' + (w / 2 - 25) + 'px');\n    return getRemoteTubeMapData();\n}\nfunction getRemoteTubeMapData() {\n    var nodeID = document.getElementById('position').value;\n    var distance = document.getElementById('distance').value;\n    var byNode = document.getElementById('unitSelect').selectedIndex !== 0;\n    var xgFile = $('#xgFileSelect').val();\n    var gbwtFile = $('#gbwtFileSelect').val();\n    var gamIndex = $('#gamIndexSelect').val();\n    var anchorTrackName = $('#pathNameSelect').val();\n    var useMountedPath = true;\n    DATA_SOURCES.forEach(function (ds) {\n        if (ds.name === $('#dataSourceSelect').val()) {\n            console.log('found');\n            xgFile = ds.xgFile;\n            gbwtFile = ds.gbwtFile;\n            gamIndex = ds.gamIndex;\n            anchorTrackName = ds.anchorTrackName;\n            useMountedPath = ds.useMountedPath;\n        }\n    });\n    console.log('useMountedPath = ' + useMountedPath);\n    console.log('anchorTrackName = ' + anchorTrackName);\n    return $.ajax({\n        type: 'POST',\n        url: BACKEND_URL + '/chr22_v4',\n        crossDomain: true,\n        data: {\n            nodeID: nodeID,\n            distance: distance,\n            byNode: byNode,\n            xgFile: xgFile,\n            gbwtFile: gbwtFile,\n            gamIndex: gamIndex,\n            anchorTrackName: anchorTrackName,\n            useMountedPath: useMountedPath\n        },\n        dataType: 'json',\n        success: function success(response) {\n            if (response.graph === undefined) {\n                document.getElementById('inputError').innerText = response.error;\n                document.getElementById('loader').style.display = 'none';\n            } else {\n                document.getElementById('inputError').innerText = '';\n                var nodes = tubeMap.vgExtractNodes(response.graph);\n                var tracks = tubeMap.vgExtractTracks(response.graph);\n                var reads = tubeMap.vgExtractReads(nodes, tracks, response.gam);\n                createTubeMap(nodes, tracks, reads);\n            }\n        },\n        error: function error(responseData, textStatus, errorThrown) {\n            console.log('POST failed.');\n        }\n    });\n}\nfunction createTubeMap(nodes, tracks, reads) {\n    tubeMap.create({\n        svgID: '#svg',\n        nodes: nodes,\n        tracks: tracks,\n        reads: reads\n    });\n    document.getElementById('loader').style.display = 'none';\n    var endTime = performance.now();\n    console.log('Took ' + (endTime - startTime) + ' milliseconds.');\n}\ndocument.getElementById('redundantNodesCheckbox').onclick = function () {\n    if (document.getElementById('redundantNodesCheckbox').checked === true)\n        tubeMap.setMergeNodesFlag(true);\n    else\n        tubeMap.setMergeNodesFlag(false);\n};\ndocument.getElementById('compressedViewCheckbox').onclick = function () {\n    if (document.getElementById('compressedViewCheckbox').checked === true)\n        tubeMap.setNodeWidthOption(1);\n    else\n        tubeMap.setNodeWidthOption(0);\n};\ndocument.getElementById('showReadsCheckbox').onclick = function () {\n    if (document.getElementById('showReadsCheckbox').checked === true)\n        tubeMap.setShowReadsFlag(true);\n    else\n        tubeMap.setShowReadsFlag(false);\n};\ndocument.getElementById('softClipsCheckbox').onclick = function () {\n    if (document.getElementById('softClipsCheckbox').checked === true)\n        tubeMap.setSoftClipsFlag(true);\n    else\n        tubeMap.setSoftClipsFlag(false);\n};\nvar radios = document.getElementsByClassName('colorRadio');\nvar _loop = function _loop(i) {\n    var trackType = void 0;\n    switch (radios[i].name) {\n    case 'colorsHaplo':\n        trackType = 'haplotypeColors';\n        break;\n    case 'colorsFwReads':\n        trackType = 'forwardReadColors';\n        break;\n    case 'colorsRevReads':\n        trackType = 'reverseReadColors';\n        break;\n    default:\n        console.log('Could not find track type in color set assignment');\n    }\n    var colorSet = void 0;\n    switch (radios[i].value) {\n    case 'option1':\n        colorSet = 'plainColors';\n        break;\n    case 'option2':\n        colorSet = 'greys';\n        break;\n    case 'option3':\n        colorSet = 'reds';\n        break;\n    case 'option4':\n        colorSet = 'blues';\n        break;\n    case 'option5':\n        colorSet = 'lightColors';\n        break;\n    default:\n        console.log('Could not find color type in color set assignment');\n    }\n    radios[i].onclick = function () {\n        console.log(this);\n        tubeMap.setColorSet(trackType, colorSet);\n    };\n};\nfor (var i = 0; i < radios.length; i += 1) {\n    _loop(i);\n}\ndocument.getElementById('downloadButton').onclick = function () {\n    var svgN = document.getElementById('svg');\n    var svgData = new XMLSerializer().serializeToString(svgN);\n    var svgBlob = new Blob([svgData], { type: 'image/svg+xml;charset=utf-8' });\n    var svgUrl = URL.createObjectURL(svgBlob);\n    var downloadLink = document.createElement('a');\n    downloadLink.href = svgUrl;\n    downloadLink.download = 'graph.svg';\n    document.body.appendChild(downloadLink);\n    downloadLink.click();\n    document.body.removeChild(downloadLink);\n};\nfunction clearDropdownsWithFilenames() {\n    var xgSelect = document.getElementById('xgFileSelect');\n    while (xgSelect.hasChildNodes()) {\n        xgSelect.removeChild(xgSelect.lastChild);\n    }\n    var opt1 = document.createElement('option');\n    opt1.value = 'none';\n    opt1.innerHTML = 'None';\n    xgSelect.appendChild(opt1);\n    var gbwtSelect = document.getElementById('gbwtFileSelect');\n    while (gbwtSelect.hasChildNodes()) {\n        gbwtSelect.removeChild(gbwtSelect.lastChild);\n    }\n    var opt2 = document.createElement('option');\n    opt2.value = 'none';\n    opt2.innerHTML = 'None';\n    gbwtSelect.appendChild(opt2);\n    var gamIndexSelect = document.getElementById('gamIndexSelect');\n    while (gamIndexSelect.hasChildNodes()) {\n        gamIndexSelect.removeChild(gamIndexSelect.lastChild);\n    }\n    var opt3 = document.createElement('option');\n    opt3.value = 'none';\n    opt3.innerHTML = 'None';\n    gamIndexSelect.appendChild(opt3);\n}\nfunction populateDropdownsWithFilenames() {\n    $.ajax({\n        type: 'POST',\n        url: BACKEND_URL + '/getFilenames',\n        crossDomain: true,\n        success: function success(response) {\n            var xgSelect = document.getElementById('xgFileSelect');\n            var xgSelectValue = xgSelect.options[xgSelect.selectedIndex].value;\n            var gbwtSelect = document.getElementById('gbwtFileSelect');\n            var gbwtSelectValue = gbwtSelect.options[gbwtSelect.selectedIndex].value;\n            var gamIndexSelect = document.getElementById('gamIndexSelect');\n            var gamSelectValue = gamIndexSelect.options[gamIndexSelect.selectedIndex].value;\n            clearDropdownsWithFilenames();\n            response.xgFiles.forEach(function (filename) {\n                var opt = document.createElement('option');\n                opt.value = filename;\n                opt.innerHTML = filename;\n                if (opt.value === xgSelectValue) {\n                    opt.selected = 'true';\n                }\n                xgSelect.appendChild(opt);\n            });\n            response.gbwtFiles.forEach(function (filename) {\n                var opt = document.createElement('option');\n                opt.value = filename;\n                opt.innerHTML = filename;\n                if (opt.value === gbwtSelectValue) {\n                    opt.selected = 'true';\n                }\n                gbwtSelect.appendChild(opt);\n            });\n            response.gamIndices.forEach(function (filename) {\n                var opt = document.createElement('option');\n                opt.value = filename;\n                opt.innerHTML = filename;\n                if (opt.value === gamSelectValue) {\n                    opt.selected = 'true';\n                }\n                gamIndexSelect.appendChild(opt);\n            });\n        },\n        error: function error(responseData, textStatus, errorThrown) {\n            console.log('POST failed.');\n        }\n    });\n}\nfunction setUpWebsocket() {\n    var ws = new WebSocket(BACKEND_URL.replace(/^http/, 'ws'));\n    ws.onmessage = function (message) {\n        console.log('Message received');\n        populateDropdownsWithFilenames();\n    };\n    ws.onclose = function (event) {\n        setTimeout(setUpWebsocket, 1000);\n    };\n    ws.onerror = function (event) {\n        ws.close();\n    };\n}\nwindow.onload = function () {\n    var dsSelect = document.getElementById('dataSourceSelect');\n    DATA_SOURCES.forEach(function (ds) {\n        var opt = document.createElement('option');\n        opt.value = ds.name;\n        opt.innerHTML = ds.name;\n        dsSelect.appendChild(opt);\n    });\n    var opt = document.createElement('option');\n    opt.value = 'custom';\n    opt.innerHTML = 'custom';\n    dsSelect.appendChild(opt);\n    document.getElementById('goButton').click();\n    populateDropdownsWithFilenames();\n    document.getElementById('redundantNodesCheckbox').checked = true;\n    document.getElementById('compressedViewCheckbox').checked = false;\n    document.getElementById('showReadsCheckbox').checked = true;\n    document.getElementById('softClipsCheckbox').checked = true;\n    document.getElementById('colorsHaplo2').checked = true;\n    document.getElementById('colorsFwReads3').checked = true;\n    document.getElementById('colorsRevReads4').checked = true;\n    setUpWebsocket();\n};","'use strict';\nObject.defineProperty(exports, '__esModule', { value: true });\nexports.create = create;\nexports.changeTrackVisibility = changeTrackVisibility;\nexports.changeExonVisibility = changeExonVisibility;\nexports.setMergeNodesFlag = setMergeNodesFlag;\nexports.setSoftClipsFlag = setSoftClipsFlag;\nexports.setShowReadsFlag = setShowReadsFlag;\nexports.setColorSet = setColorSet;\nexports.setNodeWidthOption = setNodeWidthOption;\nexports.zoomBy = zoomBy;\nexports.useColorScheme = useColorScheme;\nexports.vgExtractNodes = vgExtractNodes;\nexports.vgExtractTracks = vgExtractTracks;\nexports.vgExtractReads = vgExtractReads;\nvar DEBUG = false;\nvar greys = [\n        '#d9d9d9',\n        '#bdbdbd',\n        '#969696',\n        '#737373',\n        '#525252',\n        '#252525',\n        '#000000'\n    ];\nvar blues = [\n        '#c6dbef',\n        '#9ecae1',\n        '#6baed6',\n        '#4292c6',\n        '#2171b5',\n        '#08519c',\n        '#08306b'\n    ];\nvar reds = [\n        '#fcbba1',\n        '#fc9272',\n        '#fb6a4a',\n        '#ef3b2c',\n        '#cb181d',\n        '#a50f15',\n        '#67000d'\n    ];\nvar plainColors = [\n        '#1f77b4',\n        '#ff7f0e',\n        '#2ca02c',\n        '#d62728',\n        '#9467bd',\n        '#8c564b',\n        '#e377c2',\n        '#7f7f7f',\n        '#bcbd22',\n        '#17becf'\n    ];\nvar lightColors = [\n        '#ABCCE3',\n        '#FFCFA5',\n        '#B0DBB0',\n        '#F0AEAE',\n        '#D7C6E6',\n        '#C6ABA5',\n        '#F4CCE8',\n        '#CFCFCF',\n        '#E6E6AC',\n        '#A8E7ED'\n    ];\nvar haplotypeColors = [];\nvar forwardReadColors = [];\nvar reverseReadColors = [];\nvar exonColors = [];\nvar svgID = void 0;\nvar svg = void 0;\nvar zoom = exports.zoom = void 0;\nvar inputNodes = [];\nvar inputTracks = [];\nvar inputReads = [];\nvar nodes = void 0;\nvar tracks = void 0;\nvar reads = void 0;\nvar numberOfNodes = void 0;\nvar numberOfTracks = void 0;\nvar nodeMap = void 0;\nvar nodesPerOrder = void 0;\nvar assignments = [];\nvar extraLeft = [];\nvar extraRight = [];\nvar maxOrder = void 0;\nvar config = {\n        mergeNodesFlag: true,\n        clickableNodesFlag: false,\n        showExonsFlag: false,\n        colorScheme: 0,\n        nodeWidthOption: 0,\n        showReads: true,\n        showSoftClips: true,\n        haplotypeColors: 'greys',\n        forwardReadColors: 'reds',\n        reverseReadColors: 'blues',\n        exonColors: 'lightColors',\n        hideLegendFlag: false\n    };\nvar trackRectangles = [];\nvar trackCurves = [];\nvar trackCorners = [];\nvar trackVerticalRectangles = [];\nvar trackRectanglesStep3 = [];\nvar maxYCoordinate = 0;\nvar minYCoordinate = 0;\nvar maxXCoordinate = 0;\nvar trackForRuler = void 0;\nvar bed = void 0;\nfunction create(params) {\n    svgID = params.svgID;\n    svg = d3.select(params.svgID);\n    inputNodes = JSON.parse(JSON.stringify(params.nodes));\n    inputTracks = JSON.parse(JSON.stringify(params.tracks));\n    inputReads = params.reads || null;\n    bed = params.bed || null;\n    config.clickableNodesFlag = params.clickableNodes || false;\n    config.hideLegendFlag = params.hideLegend || false;\n    var tr = createTubeMap();\n    if (!config.hideLegendFlag)\n        drawLegend(tr);\n}\nfunction moveTrackToFirstPosition(index) {\n    inputTracks.unshift(inputTracks[index]);\n    inputTracks.splice(index + 1, 1);\n    straightenTrack(0);\n}\nfunction straightenTrack(index) {\n    var i = void 0;\n    var j = void 0;\n    var nodesToInvert = [];\n    var currentSequence = void 0;\n    var nodeName = void 0;\n    currentSequence = inputTracks[index].sequence;\n    for (i = 0; i < currentSequence.length; i += 1) {\n        if (currentSequence[i].charAt(0) === '-') {\n            nodeName = currentSequence[i].substr(1);\n            if (currentSequence.indexOf(nodeName) === -1 || currentSequence.indexOf(nodeName) > i) {\n                nodesToInvert.push(currentSequence[i].substr(1));\n            }\n        }\n    }\n    for (i = 0; i < inputTracks.length; i += 1) {\n        currentSequence = inputTracks[i].sequence;\n        for (j = 0; j < currentSequence.length; j += 1) {\n            if (currentSequence[j].charAt(0) !== '-') {\n                if (nodesToInvert.indexOf(currentSequence[j]) !== -1) {\n                    currentSequence[j] = '-' + currentSequence[j];\n                }\n            } else if (nodesToInvert.indexOf(currentSequence[j].substr(1)) !== -1) {\n                currentSequence[j] = currentSequence[j].substr(1);\n            }\n        }\n    }\n    inputNodes.forEach(function (node) {\n        if (nodesToInvert.indexOf(node.name) !== -1) {\n            node.seq = node.seq.split('').reverse().join('');\n        }\n    });\n}\nfunction changeTrackVisibility(trackID) {\n    var i = 0;\n    while (i < inputTracks.length && inputTracks[i].id !== trackID) {\n        i += 1;\n    }\n    if (i < inputTracks.length) {\n        if (inputTracks[i].hasOwnProperty('hidden')) {\n            inputTracks[i].hidden = !inputTracks[i].hidden;\n        } else {\n            inputTracks[i].hidden = true;\n        }\n    }\n    createTubeMap();\n}\nfunction changeExonVisibility() {\n    config.showExonsFlag = !config.showExonsFlag;\n    createTubeMap();\n}\nfunction setMergeNodesFlag(value) {\n    if (config.mergeNodesFlag !== value) {\n        config.mergeNodesFlag = value;\n        svg = d3.select(svgID);\n        createTubeMap();\n    }\n}\nfunction setSoftClipsFlag(value) {\n    if (config.showSoftClips !== value) {\n        config.showSoftClips = value;\n        svg = d3.select(svgID);\n        createTubeMap();\n    }\n}\nfunction setShowReadsFlag(value) {\n    if (config.showReads !== value) {\n        config.showReads = value;\n        svg = d3.select(svgID);\n        createTubeMap();\n    }\n}\nfunction setColorSet(trackType, colorSet) {\n    config[trackType] = colorSet;\n    var tr = createTubeMap();\n    if (!config.hideLegendFlag)\n        drawLegend(tr);\n}\nfunction setNodeWidthOption(value) {\n    if (value === 0 || value === 1 || value === 2) {\n        if (config.nodeWidthOption !== value) {\n            config.nodeWidthOption = value;\n            if (svg !== undefined) {\n                svg = d3.select(svgID);\n                createTubeMap();\n            }\n        }\n    }\n}\nfunction createTubeMap() {\n    trackRectangles = [];\n    trackCurves = [];\n    trackCorners = [];\n    trackVerticalRectangles = [];\n    trackRectanglesStep3 = [];\n    assignments = [];\n    extraLeft = [];\n    extraRight = [];\n    maxYCoordinate = 0;\n    minYCoordinate = 0;\n    maxXCoordinate = 0;\n    trackForRuler = undefined;\n    svg = d3.select(svgID);\n    svg.selectAll('*').remove();\n    nodes = JSON.parse(JSON.stringify(inputNodes));\n    tracks = JSON.parse(JSON.stringify(inputTracks));\n    reads = JSON.parse(JSON.stringify(inputReads));\n    assignColorSets();\n    for (var i = tracks.length - 1; i >= 0; i -= 1) {\n        if (!tracks[i].hasOwnProperty('type')) {\n            tracks[i].type = 'haplo';\n        }\n        if (tracks[i].hasOwnProperty('hidden')) {\n            if (tracks[i].hidden === true) {\n                tracks.splice(i, 1);\n            }\n        }\n        if (tracks[i].hasOwnProperty('indexOfFirstBase')) {\n            trackForRuler = tracks[i].name;\n        }\n    }\n    nodeMap = generateNodeMap(nodes);\n    generateTrackIndexSequences(tracks);\n    if (reads && config.showReads)\n        generateTrackIndexSequences(reads);\n    generateNodeWidth();\n    if (reads && config.mergeNodesFlag) {\n        generateNodeSuccessors();\n        generateNodeOrder();\n        if (reads && config.showReads)\n            reverseReversedReads();\n        mergeNodes();\n        nodeMap = generateNodeMap(nodes);\n        generateNodeWidth();\n        generateTrackIndexSequences(tracks);\n        if (reads && config.showReads)\n            generateTrackIndexSequences(reads);\n    }\n    numberOfNodes = nodes.length;\n    numberOfTracks = tracks.length;\n    generateNodeSuccessors();\n    generateNodeDegree();\n    if (DEBUG)\n        console.log(numberOfNodes + ' nodes.');\n    generateNodeOrder();\n    maxOrder = getMaxOrder();\n    calculateTrackWidth(tracks);\n    generateLaneAssignment();\n    if (config.showExonsFlag === true && bed !== null)\n        addTrackFeatures();\n    generateNodeXCoords();\n    if (reads && config.showReads) {\n        generateReadOnlyNodeAttributes();\n        reverseReversedReads();\n        generateTrackIndexSequences(reads);\n        placeReads();\n        tracks = tracks.concat(reads);\n    }\n    generateSVGShapesFromPath(nodes, tracks);\n    console.log('Tracks:');\n    console.log(tracks);\n    console.log('Nodes:');\n    console.log(nodes);\n    console.log('Lane assignment:');\n    console.log(assignments);\n    getImageDimensions();\n    alignSVG(nodes, tracks);\n    defineSVGPatterns();\n    drawTrackRectangles(trackRectangles);\n    drawTrackCurves();\n    drawReversalsByColor(trackCorners, trackVerticalRectangles);\n    drawTrackRectangles(trackRectanglesStep3);\n    drawTrackRectangles(trackRectangles, 'read');\n    drawTrackCurves('read');\n    var dNodes = removeUnusedNodes(nodes);\n    drawNodes(dNodes);\n    drawReversalsByColor(trackCorners, trackVerticalRectangles, 'read');\n    if (config.nodeWidthOption === 0)\n        drawLabels(dNodes);\n    if (trackForRuler !== undefined)\n        drawRuler();\n    if (config.nodeWidthOption === 0)\n        drawMismatches();\n    if (DEBUG) {\n        console.log('number of tracks: ' + numberOfTracks);\n        console.log('number of nodes: ' + numberOfNodes);\n    }\n    return tracks;\n}\nfunction generateReadOnlyNodeAttributes() {\n    nodesPerOrder = [];\n    for (var i = 0; i <= maxOrder; i += 1) {\n        nodesPerOrder[i] = [];\n    }\n    var orderY = new Map();\n    nodes.forEach(function (node) {\n        if (node.hasOwnProperty('order') && node.hasOwnProperty('y')) {\n            if (orderY.has(node.order)) {\n                orderY.set(node.order, Math.max(node.y + node.contentHeight, orderY.get(node.order)));\n            } else {\n                orderY.set(node.order, node.y + node.contentHeight);\n            }\n        }\n    });\n    nodes.forEach(function (node, i) {\n        if (node.hasOwnProperty('order') && !node.hasOwnProperty('y')) {\n            console.log('adding to ' + node.name);\n            node.y = orderY.get(node.order) + 25;\n            node.contentHeight = 0;\n            nodesPerOrder[node.order].push(i);\n        }\n    });\n}\nfunction assignReadsToNodes() {\n    nodes.forEach(function (node) {\n        node.incomingReads = [];\n        node.outgoingReads = [];\n        node.internalReads = [];\n    });\n    reads.forEach(function (read, idx) {\n        read.width = 7;\n        if (read.path.length === 1) {\n            nodes[read.path[0].node].internalReads.push(idx);\n        } else {\n            read.path.forEach(function (element, pathIdx) {\n                if (pathIdx === 0) {\n                    nodes[read.path[0].node].outgoingReads.push([\n                        idx,\n                        pathIdx\n                    ]);\n                } else if (read.path[pathIdx].node !== null) {\n                    nodes[read.path[pathIdx].node].incomingReads.push([\n                        idx,\n                        pathIdx\n                    ]);\n                }\n            });\n        }\n    });\n}\nfunction removeNonPathNodesFromReads() {\n    reads.forEach(function (read) {\n        for (var i = read.sequence.length - 1; i >= 0; i -= 1) {\n            var nodeName = read.sequence[i];\n            if (nodeName.charAt(0) === '-') {\n                nodeName = nodeName.substr(1);\n            }\n            if (!nodeMap.has(nodeName) || nodes[nodeMap.get(nodeName)].degree === 0) {\n                read.sequence.splice(i, 1);\n            }\n        }\n    });\n}\nfunction placeReads() {\n    generateBasicPathsForReads();\n    assignReadsToNodes();\n    var sortedNodes = nodes.slice();\n    sortedNodes.sort(compareNodesByOrder);\n    sortedNodes.forEach(function (node) {\n        node.incomingReads.sort(compareReadIncomingSegmentsByComingFrom);\n        var currentY = node.y + node.contentHeight;\n        var occupiedUntil = new Map();\n        node.incomingReads.forEach(function (readElement) {\n            reads[readElement[0]].path[readElement[1]].y = currentY;\n            setOccupiedUntil(occupiedUntil, reads[readElement[0]], readElement[1], currentY, node);\n            currentY += 7;\n        });\n        var maxY = currentY;\n        node.outgoingReads.sort(compareReadOutgoingSegmentsByGoingTo);\n        var occupiedFrom = new Map();\n        currentY = node.y + node.contentHeight;\n        node.outgoingReads.forEach(function (readElement) {\n            reads[readElement[0]].path[readElement[1]].y = currentY;\n            occupiedFrom.set(currentY, reads[readElement[0]].firstNodeOffset);\n            if (!occupiedUntil.has(currentY) || occupiedUntil.get(currentY) + 1 < reads[readElement[0]].firstNodeOffset) {\n                currentY += 7;\n                maxY = Math.max(maxY, currentY);\n            } else {\n                occupiedUntil.set(currentY, 0);\n                node.incomingReads.forEach(function (incReadElementIndices) {\n                    var incRead = reads[incReadElementIndices[0]];\n                    var incReadPathElement = incRead.path[incReadElementIndices[1]];\n                    if (incReadPathElement.y >= currentY) {\n                        incReadPathElement.y += 7;\n                        setOccupiedUntil(occupiedUntil, incRead, incReadElementIndices[1], incReadPathElement.y, node);\n                    }\n                });\n                currentY += 7;\n                maxY += 7;\n            }\n        });\n        node.internalReads.sort(compareInternalReads);\n        node.internalReads.forEach(function (readIdx) {\n            var currentRead = reads[readIdx];\n            currentY = node.y + node.contentHeight;\n            while (currentRead.firstNodeOffset < occupiedUntil.get(currentY) + 2 || currentRead.finalNodeCoverLength > occupiedFrom.get(currentY) - 3) {\n                currentY += 7;\n            }\n            currentRead.path[0].y = currentY;\n            occupiedUntil.set(currentY, currentRead.finalNodeCoverLength);\n            maxY = Math.max(maxY, currentY);\n        });\n        var heightIncrease = maxY - node.y - node.contentHeight;\n        node.contentHeight += heightIncrease;\n        adjustVertically3(node, heightIncrease);\n    });\n    var bottomY = calculateBottomY();\n    var elementsWithoutNode = [];\n    reads.forEach(function (read, idx) {\n        read.path.forEach(function (element, pathIdx) {\n            if (!element.hasOwnProperty('y')) {\n                elementsWithoutNode.push({\n                    readIndex: idx,\n                    pathIndex: pathIdx,\n                    previousY: reads[idx].path[pathIdx - 1].y\n                });\n            }\n        });\n    });\n    elementsWithoutNode.sort(compareNoNodeReadsByPreviousY);\n    elementsWithoutNode.forEach(function (element) {\n        var segment = reads[element.readIndex].path[element.pathIndex];\n        segment.y = bottomY[segment.order];\n        bottomY[segment.order] += reads[element.readIndex].width;\n    });\n    console.log('Reads:');\n    console.log(reads);\n}\nfunction setOccupiedUntil(map, read, pathIndex, y, node) {\n    if (pathIndex === read.path.length - 1) {\n        map.set(y, read.finalNodeCoverLength);\n    } else {\n        map.set(y, node.sequenceLength);\n    }\n}\nfunction compareNoNodeReadsByPreviousY(a, b) {\n    var segmentA = reads[a.readIndex].path[a.pathIndex];\n    var segmentB = reads[b.readIndex].path[b.pathIndex];\n    if (segmentA.order === segmentB.order) {\n        return a.previousY - b.previousY;\n    }\n    return segmentA.order - segmentB.order;\n}\nfunction compareReadOutgoingSegmentsByGoingTo(a, b) {\n    var pathIndexA = a[1];\n    var pathIndexB = b[1];\n    var nodeA = nodes[reads[a[0]].path[pathIndexA].node];\n    var nodeB = nodes[reads[b[0]].path[pathIndexB].node];\n    while (nodeA !== null && nodeB !== null && nodeA === nodeB) {\n        if (pathIndexA < reads[a[0]].path.length - 1) {\n            pathIndexA += 1;\n            while (reads[a[0]].path[pathIndexA].node === null) {\n                pathIndexA += 1;\n            }\n            nodeA = nodes[reads[a[0]].path[pathIndexA].node];\n        } else {\n            nodeA = null;\n        }\n        if (pathIndexB < reads[b[0]].path.length - 1) {\n            pathIndexB += 1;\n            while (reads[b[0]].path[pathIndexB].node === null) {\n                pathIndexB += 1;\n            }\n            nodeB = nodes[reads[b[0]].path[pathIndexB].node];\n        } else {\n            nodeB = null;\n        }\n    }\n    if (nodeA !== null) {\n        if (nodeB !== null)\n            return compareNodesByOrder(nodeA, nodeB);\n        return 1;\n    }\n    if (nodeB !== null)\n        return -1;\n    var beginDiff = reads[a[0]].firstNodeOffset - reads[b[0]].firstNodeOffset;\n    if (beginDiff !== 0)\n        return beginDiff;\n    return reads[a[0]].finalNodeCoverLength - reads[b[0]].finalNodeCoverLength;\n}\nfunction compareReadIncomingSegmentsByComingFrom(a, b) {\n    var pathA = reads[a[0]].path[a[1] - 1];\n    var pathB = reads[b[0]].path[b[1] - 1];\n    if (pathA.hasOwnProperty('y')) {\n        if (pathB.hasOwnProperty('y')) {\n            return pathA.y - pathB.y;\n        }\n        return -1;\n    }\n    if (pathB.hasOwnProperty('y')) {\n        return 1;\n    }\n    return compareReadIncomingSegmentsByComingFrom([\n        a[0],\n        a[1] - 1\n    ], [\n        b[0],\n        b[1] - 1\n    ]);\n}\nfunction compareInternalReads(idxA, idxB) {\n    var a = reads[idxA];\n    var b = reads[idxB];\n    if (a.firstNodeOffset < b.firstNodeOffset)\n        return -1;\n    else if (a.firstNodeOffset > b.firstNodeOffset)\n        return 1;\n    if (a.finalNodeCoverLength < b.finalNodeCoverLength)\n        return -1;\n    else if (a.finalNodeCoverLength > b.finalNodeCoverLength)\n        return 1;\n    return 0;\n}\nfunction calculateBottomY() {\n    var bottomY = [];\n    for (var i = 0; i <= maxOrder; i += 1) {\n        bottomY.push(0);\n    }\n    nodes.forEach(function (node) {\n        bottomY[node.order] = Math.max(bottomY[node.order], node.y + node.contentHeight + 20);\n    });\n    tracks.forEach(function (track) {\n        track.path.forEach(function (element) {\n            bottomY[element.order] = Math.max(bottomY[element.order], element.y + track.width);\n        });\n    });\n    return bottomY;\n}\nfunction generateBasicPathsForReads() {\n    var currentNodeIndex = void 0;\n    var currentNodeIsForward = void 0;\n    var currentNode = void 0;\n    var previousNode = void 0;\n    var previousNodeIsForward = void 0;\n    var isPositive = function isPositive(n) {\n        return ((n = +n) || 1 / n) >= 0;\n    };\n    reads.forEach(function (read) {\n        currentNodeIndex = Math.abs(read.indexSequence[0]);\n        currentNodeIsForward = isPositive(read.indexSequence[0]);\n        currentNode = nodes[currentNodeIndex];\n        read.path = [];\n        read.path.push({\n            order: currentNode.order,\n            isForward: currentNodeIsForward,\n            node: currentNodeIndex\n        });\n        for (var i = 1; i < read.sequence.length; i += 1) {\n            previousNode = currentNode;\n            previousNodeIsForward = currentNodeIsForward;\n            currentNodeIndex = Math.abs(read.indexSequence[i]);\n            currentNodeIsForward = isPositive(read.indexSequence[i]);\n            currentNode = nodes[currentNodeIndex];\n            if (currentNode.order > previousNode.order) {\n                if (!previousNodeIsForward) {\n                    read.path.push({\n                        order: previousNode.order,\n                        isForward: true,\n                        node: null\n                    });\n                }\n                for (var j = previousNode.order + 1; j < currentNode.order; j += 1) {\n                    read.path.push({\n                        order: j,\n                        isForward: true,\n                        node: null\n                    });\n                }\n                if (!currentNodeIsForward) {\n                    read.path.push({\n                        order: currentNode.order,\n                        isForward: true,\n                        node: null\n                    });\n                    read.path.push({\n                        order: currentNode.order,\n                        isForward: false,\n                        node: currentNodeIndex\n                    });\n                } else {\n                    read.path.push({\n                        order: currentNode.order,\n                        isForward: true,\n                        node: currentNodeIndex\n                    });\n                }\n            } else if (currentNode.order < previousNode.order) {\n                if (previousNodeIsForward) {\n                    read.path.push({\n                        order: previousNode.order,\n                        isForward: false,\n                        node: null\n                    });\n                }\n                for (var _j = previousNode.order - 1; _j > currentNode.order; _j -= 1) {\n                    read.path.push({\n                        order: _j,\n                        isForward: false,\n                        node: null\n                    });\n                }\n                if (currentNodeIsForward) {\n                    read.path.push({\n                        order: currentNode.order,\n                        isForward: false,\n                        node: null\n                    });\n                    read.path.push({\n                        order: currentNode.order,\n                        isForward: true,\n                        node: currentNodeIndex\n                    });\n                } else {\n                    read.path.push({\n                        order: currentNode.order,\n                        isForward: false,\n                        node: currentNodeIndex\n                    });\n                }\n            } else {\n                if (currentNodeIsForward !== previousNodeIsForward) {\n                    read.path.push({\n                        order: currentNode.order,\n                        isForward: currentNodeIsForward,\n                        node: currentNodeIndex\n                    });\n                } else {\n                    read.path.push({\n                        order: currentNode.order,\n                        isForward: !currentNodeIsForward,\n                        node: null\n                    });\n                    read.path.push({\n                        order: currentNode.order,\n                        isForward: currentNodeIsForward,\n                        node: currentNodeIndex\n                    });\n                }\n            }\n        }\n    });\n}\nfunction reverseReversedReads() {\n    reads.forEach(function (read) {\n        var pos = 0;\n        while (pos < read.sequence.length && read.sequence[pos].charAt(0) === '-') {\n            pos += 1;\n        }\n        if (pos === read.sequence.length) {\n            read.is_reverse = true;\n            read.sequence = read.sequence.reverse();\n            for (var i = 0; i < read.sequence.length; i += 1) {\n                read.sequence[i] = read.sequence[i].substr(1);\n            }\n            read.sequenceNew = read.sequenceNew.reverse();\n            var _loop = function _loop(_i) {\n                read.sequenceNew[_i].nodeName = read.sequenceNew[_i].nodeName.substr(1);\n                var nodeWidth = nodes[nodeMap.get(read.sequenceNew[_i].nodeName)].width;\n                read.sequenceNew[_i].mismatches.forEach(function (mm) {\n                    if (mm.type === 'insertion') {\n                        mm.pos = nodeWidth - mm.pos;\n                        mm.seq = getReverseComplement(mm.seq);\n                    } else if (mm.type === 'deletion') {\n                        mm.pos = nodeWidth - mm.pos - mm.length;\n                    } else if (mm.type === 'substitution') {\n                        mm.pos = nodeWidth - mm.pos - mm.seq.length;\n                        mm.seq = getReverseComplement(mm.seq);\n                    }\n                    if (mm.hasOwnProperty('seq')) {\n                        mm.seq = mm.seq.split('').reverse().join('');\n                    }\n                });\n            };\n            for (var _i = 0; _i < read.sequenceNew.length; _i += 1) {\n                _loop(_i);\n            }\n            var temp = read.firstNodeOffset;\n            var seqLength = nodes[nodeMap.get(read.sequence[0])].sequenceLength;\n            read.firstNodeOffset = seqLength - read.finalNodeCoverLength;\n            seqLength = nodes[nodeMap.get(read.sequence[read.sequence.length - 1])].sequenceLength;\n            read.finalNodeCoverLength = seqLength - temp;\n        }\n    });\n}\nfunction getReverseComplement(s) {\n    var result = '';\n    for (var i = s.length - 1; i >= 0; i -= 1) {\n        switch (s.charAt(i)) {\n        case 'A':\n            result += 'T';\n            break;\n        case 'T':\n            result += 'A';\n            break;\n        case 'C':\n            result += 'G';\n            break;\n        case 'G':\n            result += 'C';\n            break;\n        default:\n            result += 'N';\n        }\n    }\n    return result;\n}\nfunction generateTrackIndexSequencesNEW(tracksOrReads) {\n    tracksOrReads.forEach(function (track) {\n        track.indexSequence = [];\n        track.sequence.forEach(function (edit) {\n            if (edit.nodeName.charAt(0) === '-') {\n                track.indexSequence.push(-nodeMap.get(edit.nodeName.substr(1)));\n            } else {\n                track.indexSequence.push(nodeMap.get(edit.nodeName));\n            }\n        });\n    });\n}\nfunction generateTrackIndexSequences(tracksOrReads) {\n    tracksOrReads.forEach(function (track) {\n        track.indexSequence = [];\n        track.sequence.forEach(function (nodeName) {\n            if (nodeName.charAt(0) === '-') {\n                track.indexSequence.push(-nodeMap.get(nodeName.substr(1)));\n            } else {\n                track.indexSequence.push(nodeMap.get(nodeName));\n            }\n        });\n    });\n}\nfunction removeUnusedNodes(allNodes) {\n    var dNodes = allNodes.slice(0);\n    var i = void 0;\n    for (i = dNodes.length - 1; i >= 0; i -= 1) {\n        if (!dNodes[i].hasOwnProperty('x')) {\n            dNodes.splice(i, 1);\n        }\n    }\n    return dNodes;\n}\nfunction getImageDimensions() {\n    maxXCoordinate = -99;\n    minYCoordinate = 99;\n    maxYCoordinate = -99;\n    nodes.forEach(function (node) {\n        if (node.hasOwnProperty('x')) {\n            maxXCoordinate = Math.max(maxXCoordinate, node.x + 20 + node.pixelWidth);\n        }\n        if (node.hasOwnProperty('y')) {\n            minYCoordinate = Math.min(minYCoordinate, node.y - 10);\n            maxYCoordinate = Math.max(maxYCoordinate, node.y + node.contentHeight + 10);\n        }\n    });\n    tracks.forEach(function (track) {\n        track.path.forEach(function (segment) {\n            maxYCoordinate = Math.max(maxYCoordinate, segment.y + track.width);\n            minYCoordinate = Math.min(minYCoordinate, segment.y);\n        });\n    });\n}\nfunction alignSVG() {\n    svg.attr('height', maxYCoordinate - minYCoordinate + 50);\n    svg.attr('width', $(svgID).parent().width());\n    function zoomed() {\n        var transform = d3.event.transform;\n        transform.y = (25 - minYCoordinate) * transform.k;\n        svg.attr('transform', transform);\n        var svg2 = d3.select(svgID);\n        svg2.attr('height', (maxYCoordinate - minYCoordinate + 50) * d3.event.transform.k);\n        svg2.attr('width', document.getElementById('tubeMapSVG').clientWidth);\n    }\n    exports.zoom = zoom = d3.zoom().scaleExtent([\n        $(svgID).parent().width() / maxXCoordinate,\n        8\n    ]).translateExtent([\n        [\n            -1,\n            minYCoordinate - 25\n        ],\n        [\n            maxXCoordinate + 2,\n            maxYCoordinate + 25\n        ]\n    ]).on('zoom', zoomed);\n    svg = svg.call(zoom).on('dblclick.zoom', null).append('g');\n    d3.select(svgID).call(zoom.transform, d3.zoomIdentity.translate(0, 25 - minYCoordinate));\n}\nfunction zoomBy(zoomFactor) {\n    var minZoom = $(svgID).parent().width() / maxXCoordinate;\n    var maxZoom = 8;\n    var width = document.getElementById(svgID.substring(1)).parentElement.clientWidth;\n    var transform = d3.zoomTransform(d3.select(svgID).node());\n    var translateK = Math.min(maxZoom, Math.max(transform.k * zoomFactor, minZoom));\n    var translateX = width / 2 - (width / 2 - transform.x) * translateK / transform.k;\n    translateX = Math.min(translateX, 1 * translateK);\n    translateX = Math.max(translateX, width - (maxXCoordinate + 2) * translateK);\n    var translateY = (25 - minYCoordinate) * translateK;\n    d3.select(svgID).transition().duration(750).call(zoom.transform, d3.zoomIdentity.translate(translateX, translateY).scale(translateK));\n}\nfunction generateNodeMap() {\n    nodeMap = new Map();\n    nodes.forEach(function (node, index) {\n        nodeMap.set(node.name, index);\n    });\n    return nodeMap;\n}\nfunction generateNodeSuccessors() {\n    var current = void 0;\n    var follower = void 0;\n    nodes.forEach(function (node) {\n        node.successors = [];\n        node.predecessors = [];\n    });\n    tracks.forEach(function (track) {\n        for (var i = 0; i < track.indexSequence.length - 1; i += 1) {\n            current = Math.abs(track.indexSequence[i]);\n            follower = Math.abs(track.indexSequence[i + 1]);\n            if (nodes[current].successors.indexOf(follower) === -1) {\n                nodes[current].successors.push(follower);\n            }\n            if (nodes[follower].predecessors.indexOf(current) === -1) {\n                nodes[follower].predecessors.push(current);\n            }\n        }\n    });\n    if (reads && config.showReads) {\n        reads.forEach(function (track) {\n            for (var i = 0; i < track.indexSequence.length - 1; i += 1) {\n                current = Math.abs(track.indexSequence[i]);\n                follower = Math.abs(track.indexSequence[i + 1]);\n                if (nodes[current].successors.indexOf(follower) === -1) {\n                    nodes[current].successors.push(follower);\n                }\n                if (nodes[follower].predecessors.indexOf(current) === -1) {\n                    nodes[follower].predecessors.push(current);\n                }\n            }\n        });\n    }\n}\nfunction generateNodeOrderOfSingleTrack(sequence) {\n    var forwardOrder = 0;\n    var backwardOrder = 0;\n    var currentNode = void 0;\n    var minOrder = 0;\n    sequence.forEach(function (nodeIndex) {\n        if (nodeIndex < 0) {\n            currentNode = nodes[Math.abs(nodeIndex)];\n            if (!currentNode.hasOwnProperty('order')) {\n                currentNode.order = backwardOrder;\n            }\n            if (currentNode.order < minOrder)\n                minOrder = currentNode.order;\n            forwardOrder = currentNode.order;\n            backwardOrder = currentNode.order - 1;\n        } else {\n            currentNode = nodes[nodeIndex];\n            if (!currentNode.hasOwnProperty('order')) {\n                currentNode.order = forwardOrder;\n            }\n            forwardOrder = currentNode.order + 1;\n            backwardOrder = currentNode.order;\n        }\n    });\n    if (minOrder < 0) {\n        increaseOrderForAllNodes(-minOrder);\n    }\n}\nfunction generateNodeOrderTrackBeginning(sequence) {\n    var anchorIndex = 0;\n    var currentOrder = void 0;\n    var currentNode = void 0;\n    var minOrder = 0;\n    var increment = void 0;\n    while (anchorIndex < sequence.length && !nodes[Math.abs(sequence[anchorIndex])].hasOwnProperty('order')) {\n        anchorIndex += 1;\n    }\n    if (anchorIndex >= sequence.length) {\n        return null;\n    }\n    if (sequence[anchorIndex] >= 0) {\n        currentOrder = nodes[sequence[anchorIndex]].order - 1;\n        increment = -1;\n    } else {\n        currentOrder = nodes[-sequence[anchorIndex]].order + 1;\n        increment = 1;\n    }\n    for (var j = anchorIndex - 1; j >= 0; j -= 1) {\n        currentNode = nodes[Math.abs(sequence[j])];\n        if (!currentNode.hasOwnProperty('order')) {\n            currentNode.order = currentOrder;\n            minOrder = Math.min(minOrder, currentOrder);\n            currentOrder += increment;\n        }\n    }\n    if (minOrder < 0) {\n        increaseOrderForAllNodes(-minOrder);\n    }\n    return anchorIndex;\n}\nfunction generateNodeOrder() {\n    var modifiedSequence = void 0;\n    var currentOrder = void 0;\n    var currentNode = void 0;\n    var rightIndex = void 0;\n    var leftIndex = void 0;\n    var minOrder = 0;\n    var tracksAndReads = void 0;\n    if (reads && config.showReads)\n        tracksAndReads = tracks.concat(reads);\n    else\n        tracksAndReads = tracks;\n    nodes.forEach(function (node) {\n        delete node.order;\n    });\n    generateNodeOrderOfSingleTrack(tracks[0].indexSequence);\n    for (var i = 1; i < tracksAndReads.length; i += 1) {\n        if (DEBUG)\n            console.log('generating order for track ' + (i + 1));\n        rightIndex = generateNodeOrderTrackBeginning(tracksAndReads[i].indexSequence);\n        if (rightIndex === null) {\n            tracksAndReads.splice(i, 1);\n            reads.splice(i - tracks.length, 1);\n            i -= 1;\n            continue;\n        }\n        modifiedSequence = uninvert(tracksAndReads[i].indexSequence);\n        while (rightIndex < modifiedSequence.length) {\n            leftIndex = rightIndex;\n            rightIndex += 1;\n            while (rightIndex < modifiedSequence.length && !nodes[modifiedSequence[rightIndex]].hasOwnProperty('order')) {\n                rightIndex += 1;\n            }\n            if (rightIndex < modifiedSequence.length) {\n                currentOrder = nodes[modifiedSequence[leftIndex]].order + 1;\n                for (var j = leftIndex + 1; j < rightIndex; j += 1) {\n                    nodes[modifiedSequence[j]].order = currentOrder;\n                    currentOrder += 1;\n                }\n                if (nodes[modifiedSequence[rightIndex]].order > nodes[modifiedSequence[leftIndex]].order) {\n                    if (nodes[modifiedSequence[rightIndex]].order < currentOrder) {\n                        increaseOrderForSuccessors(modifiedSequence[rightIndex], modifiedSequence[rightIndex - 1], currentOrder);\n                    }\n                } else {\n                    if (tracksAndReads[i].indexSequence[rightIndex] >= 0 && !isSuccessor(modifiedSequence[rightIndex], modifiedSequence[leftIndex])) {\n                        increaseOrderForSuccessors(modifiedSequence[rightIndex], modifiedSequence[rightIndex - 1], currentOrder);\n                    } else {\n                        if (tracksAndReads[i].sequence[leftIndex] < 0 || nodes[modifiedSequence[leftIndex + 1]].degree < 2 && nodes[modifiedSequence[rightIndex]].order < nodes[modifiedSequence[leftIndex]].order) {\n                            currentOrder = nodes[modifiedSequence[leftIndex]].order - 1;\n                            for (var _j2 = leftIndex + 1; _j2 < rightIndex; _j2 += 1) {\n                                nodes[modifiedSequence[_j2]].order = currentOrder;\n                                currentOrder -= 1;\n                            }\n                        }\n                    }\n                }\n            } else {\n                if (tracksAndReads[i].sequence[leftIndex] >= 0) {\n                    currentOrder = nodes[modifiedSequence[leftIndex]].order + 1;\n                    for (var _j3 = leftIndex + 1; _j3 < modifiedSequence.length; _j3 += 1) {\n                        currentNode = nodes[modifiedSequence[_j3]];\n                        if (!currentNode.hasOwnProperty('order')) {\n                            currentNode.order = currentOrder;\n                            currentOrder += 1;\n                        }\n                    }\n                } else {\n                    currentOrder = nodes[modifiedSequence[leftIndex]].order - 1;\n                    for (var _j4 = leftIndex + 1; _j4 < modifiedSequence.length; _j4 += 1) {\n                        currentNode = nodes[modifiedSequence[_j4]];\n                        if (!currentNode.hasOwnProperty('order')) {\n                            currentNode.order = currentOrder;\n                            minOrder = Math.min(minOrder, currentOrder);\n                            currentOrder -= 1;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    if (minOrder < 0)\n        increaseOrderForAllNodes(-minOrder);\n}\nfunction isSuccessor(first, second) {\n    var visited = new Array(numberOfNodes).fill(false);\n    var stack = [];\n    stack.push(first);\n    visited[first] = true;\n    while (stack.length > 0) {\n        var current = stack.pop();\n        if (current === second)\n            return true;\n        for (var i = 0; i < nodes[current].successors.length; i += 1) {\n            var childIndex = nodes[current].successors[i];\n            if (!visited[childIndex]) {\n                visited[childIndex] = true;\n                stack.push(childIndex);\n            }\n        }\n    }\n    return false;\n}\nfunction getMaxOrder() {\n    var max = -1;\n    nodes.forEach(function (node) {\n        if (node.hasOwnProperty('order') && node.order > max)\n            max = node.order;\n    });\n    return max;\n}\nfunction uninvert(sequence) {\n    var result = [];\n    for (var i = 0; i < sequence.length; i += 1) {\n        if (sequence[i] >= 0) {\n            result.push(sequence[i]);\n        } else {\n            result.push(-sequence[i]);\n        }\n    }\n    return result;\n}\nfunction increaseOrderForAllNodes(amount) {\n    nodes.forEach(function (node) {\n        if (node.hasOwnProperty('order'))\n            node.order += amount;\n    });\n}\nfunction increaseOrderForSuccessors(startingNode, tabuNode, newOrder) {\n    var increasedOrders = new Map();\n    var queue = [];\n    queue.push([\n        startingNode,\n        newOrder\n    ]);\n    var _loop2 = function _loop2() {\n        var current = queue.shift();\n        var currentNode = current[0];\n        var currentOrder = current[1];\n        if (nodes[currentNode].hasOwnProperty('order') && nodes[currentNode].order < currentOrder) {\n            if (!increasedOrders.has(currentNode) || increasedOrders.get(currentNode) < currentOrder) {\n                increasedOrders.set(currentNode, currentOrder);\n                nodes[currentNode].successors.forEach(function (successor) {\n                    if (nodes[successor].order > nodes[currentNode].order && successor !== tabuNode) {\n                        queue.push([\n                            successor,\n                            currentOrder + 1\n                        ]);\n                    }\n                });\n                if (currentNode !== startingNode) {\n                    nodes[currentNode].predecessors.forEach(function (predecessor) {\n                        if (nodes[predecessor].order > currentNode.order && predecessor !== tabuNode) {\n                            queue.push([\n                                predecessor,\n                                currentOrder + 1\n                            ]);\n                        }\n                    });\n                }\n            }\n        }\n    };\n    while (queue.length > 0) {\n        _loop2();\n    }\n    increasedOrders.forEach(function (value, key) {\n        nodes[key].order = value;\n    });\n}\nfunction generateNodeDegree() {\n    nodes.forEach(function (node) {\n        node.tracks = [];\n    });\n    tracks.forEach(function (track) {\n        track.indexSequence.forEach(function (nodeIndex) {\n            nodes[Math.abs(nodeIndex)].tracks.push(track.id);\n        });\n    });\n    nodes.forEach(function (node) {\n        if (node.hasOwnProperty('tracks'))\n            node.degree = node.tracks.length;\n    });\n}\nfunction switchNodeOrientation() {\n    var toSwitch = new Map();\n    var nodeName = void 0;\n    var prevNode = void 0;\n    var nextNode = void 0;\n    var currentNode = void 0;\n    for (var i = 1; i < tracks.length; i += 1) {\n        for (var j = 0; j < tracks[i].sequence.length; j += 1) {\n            nodeName = tracks[i].sequence[j];\n            if (nodeName.charAt(0) === '-')\n                nodeName = nodeName.substr(1);\n            currentNode = nodes[nodeMap.get(nodeName)];\n            if (tracks[0].sequence.indexOf(nodeName) === -1) {\n                if (j > 0) {\n                    if (tracks[i].sequence[j - 1].charAt(0) !== '-')\n                        prevNode = nodes[nodeMap.get(tracks[i].sequence[j - 1])];\n                    else\n                        prevNode = nodes[nodeMap.get(tracks[i].sequence[j - 1].substr(1))];\n                }\n                if (j < tracks[i].sequence.length - 1) {\n                    if (tracks[i].sequence[j + 1].charAt(0) !== '-')\n                        nextNode = nodes[nodeMap.get(tracks[i].sequence[j + 1])];\n                    else\n                        nextNode = nodes[nodeMap.get(tracks[i].sequence[j + 1].substr(1))];\n                }\n                if ((j === 0 || prevNode.order < currentNode.order) && (j === tracks[i].sequence.length - 1 || currentNode.order < nextNode.order)) {\n                    if (!toSwitch.has(nodeName))\n                        toSwitch.set(nodeName, 0);\n                    if (tracks[i].sequence[j].charAt(0) === '-')\n                        toSwitch.set(nodeName, toSwitch.get(nodeName) + 1);\n                    else\n                        toSwitch.set(nodeName, toSwitch.get(nodeName) - 1);\n                }\n                if ((j === 0 || prevNode.order > currentNode.order) && (j === tracks[i].sequence.length - 1 || currentNode.order > nextNode.order)) {\n                    if (!toSwitch.has(nodeName))\n                        toSwitch.set(nodeName, 0);\n                    if (tracks[i].sequence[j].charAt(0) === '-')\n                        toSwitch.set(nodeName, toSwitch.get(nodeName) - 1);\n                    else\n                        toSwitch.set(nodeName, toSwitch.get(nodeName) + 1);\n                }\n            }\n        }\n    }\n    tracks.forEach(function (track, trackIndex) {\n        track.sequence.forEach(function (node, nodeIndex) {\n            nodeName = node;\n            if (nodeName.charAt(0) === '-')\n                nodeName = nodeName.substr(1);\n            if (toSwitch.has(nodeName) && toSwitch.get(nodeName) > 0) {\n                if (node.charAt(0) === '-')\n                    tracks[trackIndex].sequence[nodeIndex] = node.substr(1);\n                else\n                    tracks[trackIndex].sequence[nodeIndex] = '-' + node;\n            }\n        });\n    });\n    toSwitch.forEach(function (value, key) {\n        if (value > 0) {\n            currentNode = nodeMap.get(key);\n            nodes[currentNode].seq = nodes[currentNode].seq.split('').reverse().join('');\n        }\n    });\n}\nfunction generateNodeXCoords() {\n    var currentX = 0;\n    var nextX = 20;\n    var currentOrder = -1;\n    var sortedNodes = nodes.slice();\n    sortedNodes.sort(compareNodesByOrder);\n    var extra = calculateExtraSpace();\n    sortedNodes.forEach(function (node) {\n        if (node.hasOwnProperty('order')) {\n            if (node.order > currentOrder) {\n                currentOrder = node.order;\n                currentX = nextX + 10 * extra[node.order];\n            }\n            node.x = currentX;\n            nextX = Math.max(nextX, currentX + 40 + node.pixelWidth);\n        }\n    });\n}\nfunction calculateExtraSpace() {\n    var leftSideEdges = [];\n    var rightSideEdges = [];\n    var extra = [];\n    for (var i = 0; i <= maxOrder; i += 1) {\n        leftSideEdges.push(0);\n        rightSideEdges.push(0);\n    }\n    tracks.forEach(function (track) {\n        for (var _i2 = 1; _i2 < track.path.length; _i2 += 1) {\n            if (track.path[_i2].order === track.path[_i2 - 1].order) {\n                if (track.path[_i2].isForward === true)\n                    leftSideEdges[track.path[_i2].order] += 1;\n                else\n                    rightSideEdges[track.path[_i2].order] += 1;\n            }\n        }\n    });\n    extra.push(Math.max(0, leftSideEdges[0] - 1));\n    for (var _i3 = 1; _i3 <= maxOrder; _i3 += 1) {\n        extra.push(Math.max(0, leftSideEdges[_i3] - 1) + Math.max(0, rightSideEdges[_i3 - 1] - 1));\n    }\n    return extra;\n}\nfunction generateLaneAssignment() {\n    var segmentNumber = void 0;\n    var currentNodeIndex = void 0;\n    var currentNodeIsForward = void 0;\n    var currentNode = void 0;\n    var previousNode = void 0;\n    var previousNodeIsForward = void 0;\n    var prevSegmentPerOrderPerTrack = [];\n    var isPositive = function isPositive(n) {\n        return ((n = +n) || 1 / n) >= 0;\n    };\n    for (var i = 0; i <= maxOrder; i += 1) {\n        assignments[i] = [];\n        prevSegmentPerOrderPerTrack[i] = [];\n        for (var j = 0; j < numberOfTracks; j += 1) {\n            prevSegmentPerOrderPerTrack[i][j] = null;\n        }\n    }\n    tracks.forEach(function (track, trackNo) {\n        currentNodeIndex = Math.abs(track.indexSequence[0]);\n        currentNodeIsForward = isPositive(track.indexSequence[0]);\n        currentNode = nodes[currentNodeIndex];\n        track.path = [];\n        track.path.push({\n            order: currentNode.order,\n            lane: null,\n            isForward: currentNodeIsForward,\n            node: currentNodeIndex\n        });\n        addToAssignment(currentNode.order, currentNodeIndex, trackNo, 0, prevSegmentPerOrderPerTrack);\n        segmentNumber = 1;\n        for (var _i4 = 1; _i4 < track.sequence.length; _i4 += 1) {\n            previousNode = currentNode;\n            previousNodeIsForward = currentNodeIsForward;\n            currentNodeIndex = Math.abs(track.indexSequence[_i4]);\n            currentNodeIsForward = isPositive(track.indexSequence[_i4]);\n            currentNode = nodes[currentNodeIndex];\n            if (currentNode.order > previousNode.order) {\n                if (!previousNodeIsForward) {\n                    track.path.push({\n                        order: previousNode.order,\n                        lane: null,\n                        isForward: true,\n                        node: null\n                    });\n                    addToAssignment(previousNode.order, null, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                }\n                for (var _j5 = previousNode.order + 1; _j5 < currentNode.order; _j5 += 1) {\n                    track.path.push({\n                        order: _j5,\n                        lane: null,\n                        isForward: true,\n                        node: null\n                    });\n                    addToAssignment(_j5, null, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                }\n                if (!currentNodeIsForward) {\n                    track.path.push({\n                        order: currentNode.order,\n                        lane: null,\n                        isForward: true,\n                        node: null\n                    });\n                    addToAssignment(currentNode.order, null, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                    track.path.push({\n                        order: currentNode.order,\n                        lane: null,\n                        isForward: false,\n                        node: currentNodeIndex\n                    });\n                    addToAssignment(currentNode.order, currentNodeIndex, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                } else {\n                    track.path.push({\n                        order: currentNode.order,\n                        lane: null,\n                        isForward: true,\n                        node: currentNodeIndex\n                    });\n                    addToAssignment(currentNode.order, currentNodeIndex, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                }\n            } else if (currentNode.order < previousNode.order) {\n                if (previousNodeIsForward) {\n                    track.path.push({\n                        order: previousNode.order,\n                        lane: null,\n                        isForward: false,\n                        node: null\n                    });\n                    addToAssignment(previousNode.order, null, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                }\n                for (var _j6 = previousNode.order - 1; _j6 > currentNode.order; _j6 -= 1) {\n                    track.path.push({\n                        order: _j6,\n                        lane: null,\n                        isForward: false,\n                        node: null\n                    });\n                    addToAssignment(_j6, null, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                }\n                if (currentNodeIsForward) {\n                    track.path.push({\n                        order: currentNode.order,\n                        lane: null,\n                        isForward: false,\n                        node: null\n                    });\n                    addToAssignment(currentNode.order, null, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                    track.path.push({\n                        order: currentNode.order,\n                        lane: null,\n                        isForward: true,\n                        node: currentNodeIndex\n                    });\n                    addToAssignment(currentNode.order, currentNodeIndex, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                } else {\n                    track.path.push({\n                        order: currentNode.order,\n                        lane: null,\n                        isForward: false,\n                        node: currentNodeIndex\n                    });\n                    addToAssignment(currentNode.order, currentNodeIndex, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                }\n            } else {\n                if (currentNodeIsForward !== previousNodeIsForward) {\n                    track.path.push({\n                        order: currentNode.order,\n                        lane: null,\n                        isForward: currentNodeIsForward,\n                        node: currentNodeIndex\n                    });\n                    addToAssignment(currentNode.order, currentNodeIndex, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                } else {\n                    track.path.push({\n                        order: currentNode.order,\n                        lane: null,\n                        isForward: !currentNodeIsForward,\n                        node: null\n                    });\n                    addToAssignment(currentNode.order, null, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                    track.path.push({\n                        order: currentNode.order,\n                        lane: null,\n                        isForward: currentNodeIsForward,\n                        node: currentNodeIndex\n                    });\n                    addToAssignment(currentNode.order, currentNodeIndex, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                }\n            }\n        }\n    });\n    for (var _i5 = 0; _i5 <= maxOrder; _i5 += 1) {\n        generateSingleLaneAssignment(assignments[_i5], _i5);\n    }\n}\nfunction addToAssignment(order, nodeIndex, trackNo, segmentID, prevSegmentPerOrderPerTrack) {\n    var compareToFromSame = prevSegmentPerOrderPerTrack[order][trackNo];\n    if (nodeIndex === null) {\n        assignments[order].push({\n            type: 'single',\n            node: null,\n            tracks: [{\n                    trackID: trackNo,\n                    segmentID: segmentID,\n                    compareToFromSame: compareToFromSame\n                }]\n        });\n        prevSegmentPerOrderPerTrack[order][trackNo] = assignments[order][assignments[order].length - 1].tracks[0];\n    } else {\n        for (var i = 0; i < assignments[order].length; i += 1) {\n            if (assignments[order][i].node === nodeIndex) {\n                assignments[order][i].type = 'multiple';\n                assignments[order][i].tracks.push({\n                    trackID: trackNo,\n                    segmentID: segmentID,\n                    compareToFromSame: compareToFromSame\n                });\n                prevSegmentPerOrderPerTrack[order][trackNo] = assignments[order][i].tracks[assignments[order][i].tracks.length - 1];\n                return;\n            }\n        }\n        assignments[order].push({\n            type: 'single',\n            node: nodeIndex,\n            tracks: [{\n                    trackID: trackNo,\n                    segmentID: segmentID,\n                    compareToFromSame: compareToFromSame\n                }]\n        });\n        prevSegmentPerOrderPerTrack[order][trackNo] = assignments[order][assignments[order].length - 1].tracks[0];\n    }\n}\nfunction getIdealLanesAndCoords(assignment, order) {\n    var index = void 0;\n    assignment.forEach(function (node) {\n        node.idealLane = 0;\n        node.tracks.forEach(function (track) {\n            if (track.segmentID === 0) {\n                track.idealLane = track.trackID;\n                track.idealY = null;\n            } else {\n                if (tracks[track.trackID].path[track.segmentID - 1].order === order - 1) {\n                    track.idealLane = tracks[track.trackID].path[track.segmentID - 1].lane;\n                    track.idealY = tracks[track.trackID].path[track.segmentID - 1].y;\n                } else if (track.segmentID < tracks[track.trackID].path.length - 1 && tracks[track.trackID].path[track.segmentID + 1].order === order - 1) {\n                    track.idealLane = tracks[track.trackID].path[track.segmentID + 1].lane;\n                    track.idealY = tracks[track.trackID].path[track.segmentID + 1].y;\n                } else {\n                    index = track.segmentID - 1;\n                    while (index >= 0 && tracks[track.trackID].path[index].order !== order - 1) {\n                        index -= 1;\n                    }\n                    if (index < 0) {\n                        track.idealLane = track.trackID;\n                        track.idealY = null;\n                    } else {\n                        track.idealLane = tracks[track.trackID].path[index].lane;\n                        track.idealY = tracks[track.trackID].path[index].y;\n                    }\n                }\n            }\n            node.idealLane += track.idealLane;\n        });\n        node.idealLane /= node.tracks.length;\n    });\n}\nfunction generateSingleLaneAssignment(assignment, order) {\n    var currentLane = 0;\n    var potentialAdjustmentValues = new Set();\n    var currentY = 20;\n    var prevNameIsNull = false;\n    var prevTrack = -1;\n    getIdealLanesAndCoords(assignment, order);\n    assignment.sort(compareByIdealLane);\n    assignment.forEach(function (node) {\n        if (node.node !== null) {\n            nodes[node.node].topLane = currentLane;\n            if (prevNameIsNull)\n                currentY -= 10;\n            nodes[node.node].y = currentY;\n            nodes[node.node].contentHeight = 0;\n            prevNameIsNull = false;\n        } else {\n            if (prevNameIsNull)\n                currentY -= 25;\n            else if (currentY > 20)\n                currentY -= 10;\n            prevNameIsNull = true;\n        }\n        node.tracks.sort(compareByIdealLane);\n        node.tracks.forEach(function (track) {\n            track.lane = currentLane;\n            if (track.trackID === prevTrack && node.node === null && prevNameIsNull)\n                currentY += 10;\n            tracks[track.trackID].path[track.segmentID].lane = currentLane;\n            tracks[track.trackID].path[track.segmentID].y = currentY;\n            if (track.idealY !== null)\n                potentialAdjustmentValues.add(track.idealY - currentY);\n            currentLane += 1;\n            currentY += tracks[track.trackID].width;\n            if (node.node !== null) {\n                nodes[node.node].contentHeight += tracks[track.trackID].width;\n            }\n            prevTrack = track.trackID;\n        });\n        currentY += 25;\n    });\n    adjustVertically(assignment, potentialAdjustmentValues);\n}\nfunction adjustVertically(assignment, potentialAdjustmentValues) {\n    var verticalAdjustment = 0;\n    var minAdjustmentCost = Number.MAX_SAFE_INTEGER;\n    potentialAdjustmentValues.forEach(function (moveBy) {\n        if (getVerticalAdjustmentCost(assignment, moveBy) < minAdjustmentCost) {\n            minAdjustmentCost = getVerticalAdjustmentCost(assignment, moveBy);\n            verticalAdjustment = moveBy;\n        }\n    });\n    assignment.forEach(function (node) {\n        if (node.node !== null) {\n            nodes[node.node].y += verticalAdjustment;\n        }\n        node.tracks.forEach(function (track) {\n            tracks[track.trackID].path[track.segmentID].y += verticalAdjustment;\n        });\n    });\n}\nfunction adjustVertically3(node, adjustBy) {\n    if (node.hasOwnProperty('order')) {\n        assignments[node.order].forEach(function (assignmentNode) {\n            if (assignmentNode.node !== null) {\n                var aNode = nodes[assignmentNode.node];\n                if (aNode !== node && aNode.y > node.y) {\n                    aNode.y += adjustBy;\n                    assignmentNode.tracks.forEach(function (track) {\n                        tracks[track.trackID].path[track.segmentID].y += adjustBy;\n                    });\n                }\n            } else {\n                assignmentNode.tracks.forEach(function (track) {\n                    if (tracks[track.trackID].path[track.segmentID].y >= node.y) {\n                        tracks[track.trackID].path[track.segmentID].y += adjustBy;\n                    }\n                });\n            }\n        });\n        if (nodesPerOrder[node.order].length > 0) {\n            nodesPerOrder[node.order].forEach(function (nodeIndex) {\n                if (nodes[nodeIndex] !== node && nodes[nodeIndex].y > node.y) {\n                    nodes[nodeIndex].y += adjustBy;\n                }\n            });\n        }\n    }\n}\nfunction getVerticalAdjustmentCost(assignment, moveBy) {\n    var result = 0;\n    assignment.forEach(function (node) {\n        node.tracks.forEach(function (track) {\n            if (track.idealY !== null && tracks[track.trackID].type !== 'read') {\n                result += Math.abs(track.idealY - moveBy - tracks[track.trackID].path[track.segmentID].y) * tracks[track.trackID].width;\n            }\n        });\n    });\n    return result;\n}\nfunction compareByIdealLane(a, b) {\n    if (a.hasOwnProperty('idealLane')) {\n        if (b.hasOwnProperty('idealLane')) {\n            if (a.idealLane < b.idealLane)\n                return -1;\n            else if (a.idealLane > b.idealLane)\n                return 1;\n            return 0;\n        }\n        return -1;\n    }\n    if (b.hasOwnProperty('idealLane')) {\n        return 1;\n    }\n    return 0;\n}\nfunction compareNodesByOrder(a, b) {\n    if (a === null) {\n        if (b === null)\n            return 0;\n        return -1;\n    }\n    if (b === null)\n        return 1;\n    if (a.hasOwnProperty('order')) {\n        if (b.hasOwnProperty('order')) {\n            if (a.order < b.order)\n                return -1;\n            else if (a.order > b.order)\n                return 1;\n            if (a.hasOwnProperty('y') && b.hasOwnProperty('y')) {\n                if (a.y < b.y)\n                    return -1;\n                else if (a.y > b.y)\n                    return 1;\n            }\n            return 0;\n        }\n        return -1;\n    }\n    if (b.hasOwnProperty('order'))\n        return 1;\n    return 0;\n}\nfunction addTrackFeatures() {\n    var nodeStart = void 0;\n    var nodeEnd = void 0;\n    var feature = {};\n    bed.forEach(function (line) {\n        var i = 0;\n        while (i < numberOfTracks && tracks[i].name !== line.track) {\n            i += 1;\n        }\n        if (i < numberOfTracks) {\n            nodeStart = 0;\n            tracks[i].path.forEach(function (node) {\n                if (node.node !== null) {\n                    feature = {};\n                    if (nodes[node.node].hasOwnProperty('sequenceLength')) {\n                        nodeEnd = nodeStart + nodes[node.node].sequenceLength - 1;\n                    } else {\n                        nodeEnd = nodeStart + nodes[node.node].width - 1;\n                    }\n                    if (nodeStart >= line.start && nodeStart <= line.end)\n                        feature.start = 0;\n                    if (nodeStart < line.start && nodeEnd >= line.start)\n                        feature.start = line.start - nodeStart;\n                    if (nodeEnd <= line.end && nodeEnd >= line.start) {\n                        feature.end = nodeEnd - nodeStart;\n                        if (nodeEnd < line.end)\n                            feature.continue = true;\n                    }\n                    if (nodeEnd > line.end && nodeStart <= line.end)\n                        feature.end = line.end - nodeStart;\n                    if (feature.hasOwnProperty('start')) {\n                        feature.type = line.type;\n                        feature.name = line.name;\n                        if (!node.hasOwnProperty('features'))\n                            node.features = [];\n                        node.features.push(feature);\n                    }\n                    nodeStart = nodeEnd + 1;\n                }\n            });\n        } else {\n        }\n    });\n}\nfunction calculateTrackWidth() {\n    var allAreFour = true;\n    tracks.forEach(function (track) {\n        if (track.hasOwnProperty('freq')) {\n            track.width = Math.round((Math.log(track.freq) + 1) * 4);\n        } else {\n            track.width = 15;\n            if (track.hasOwnProperty('type') && track.type === 'read') {\n                track.width = 4;\n            }\n        }\n        if (track.width !== 4) {\n            allAreFour = false;\n        }\n    });\n    if (allAreFour) {\n        tracks.forEach(function (track) {\n            if (track.hasOwnProperty('freq')) {\n                track.width = 15;\n            }\n        });\n    }\n}\nfunction useColorScheme(x) {\n    config.colorScheme = x;\n    svg = d3.select(svgID);\n    var tr = createTubeMap();\n    if (!config.hideLegendFlag)\n        drawLegend(tr);\n}\nfunction assignColorSets() {\n    haplotypeColors = getColorSet(config.haplotypeColors);\n    forwardReadColors = getColorSet(config.forwardReadColors);\n    reverseReadColors = getColorSet(config.reverseReadColors);\n    exonColors = getColorSet(config.exonColors);\n}\nfunction getColorSet(colorSetName) {\n    switch (colorSetName) {\n    case 'plainColors':\n        return plainColors;\n    case 'reds':\n        return reds;\n    case 'blues':\n        return blues;\n    case 'greys':\n        return greys;\n    case 'lightColors':\n        return lightColors;\n    default:\n        return greys;\n    }\n}\nfunction generateTrackColor(track, highlight) {\n    if (typeof highlight === 'undefined')\n        highlight = 'plain';\n    var trackColor = void 0;\n    if (track.hasOwnProperty('type') && track.type === 'read') {\n        if (track.hasOwnProperty('is_reverse') && track.is_reverse === true) {\n            trackColor = reverseReadColors[track.id % reverseReadColors.length];\n        } else {\n            trackColor = forwardReadColors[track.id % forwardReadColors.length];\n        }\n    } else {\n        if (config.showExonsFlag === false || highlight !== 'plain') {\n            trackColor = haplotypeColors[track.id % haplotypeColors.length];\n        } else {\n            trackColor = exonColors[track.id % exonColors.length];\n        }\n    }\n    return trackColor;\n}\nfunction generateTrackColorOLD(track, highlight) {\n    if (typeof highlight === 'undefined')\n        highlight = 'plain';\n    var trackColor = void 0;\n    if (track.hasOwnProperty('type') && track.type === 'read') {\n        if (track.hasOwnProperty('is_reverse') && track.is_reverse === true) {\n            trackColor = blues[track.id % blues.length];\n        } else {\n            trackColor = reds[track.id % reds.length];\n        }\n    } else {\n        if (config.colorScheme === 0) {\n            if (config.showExonsFlag === false || highlight !== 'plain') {\n                trackColor = plainColors[track.id % plainColors.length];\n            } else {\n                trackColor = lightColors[track.id % lightColors.length];\n            }\n        } else if (config.colorScheme === 1) {\n            if (config.showExonsFlag === false || highlight === 'plain') {\n                trackColor = greys[track.id % greys.length];\n            } else {\n                trackColor = reds[track.id % reds.length];\n            }\n        }\n    }\n    return trackColor;\n}\nfunction getReadXStart(read) {\n    var node = nodes[read.path[0].node];\n    if (read.path[0].isForward) {\n        return getXCoordinateOfBaseWithinNode(node, read.firstNodeOffset);\n    }\n    return getXCoordinateOfBaseWithinNode(node, node.sequenceLength - read.firstNodeOffset);\n}\nfunction getReadXEnd(read) {\n    var node = nodes[read.path[read.path.length - 1].node];\n    if (read.path[read.path.length - 1].isForward) {\n        return getXCoordinateOfBaseWithinNode(node, read.finalNodeCoverLength);\n    }\n    return getXCoordinateOfBaseWithinNode(node, node.sequenceLength - read.finalNodeCoverLength);\n}\nfunction getXCoordinateOfBaseWithinNode(node, base) {\n    if (base > node.sequenceLength)\n        return null;\n    var nodeLeftX = node.x - 4;\n    var nodeRightX = node.x + node.pixelWidth + 4;\n    return nodeLeftX + base / node.sequenceLength * (nodeRightX - nodeLeftX);\n}\nfunction generateSVGShapesFromPath() {\n    var xStart = void 0;\n    var xEnd = void 0;\n    var yStart = void 0;\n    var yEnd = void 0;\n    var trackColor = void 0;\n    var highlight = void 0;\n    var dummy = void 0;\n    var reversalFlag = void 0;\n    for (var i = 0; i <= maxOrder; i += 1) {\n        extraLeft.push(0);\n        extraRight.push(0);\n    }\n    var orderStartX = [];\n    var orderEndX = [];\n    nodes.forEach(function (node) {\n        if (node.hasOwnProperty('order')) {\n            orderStartX[node.order] = node.x;\n            if (orderEndX[node.order] === undefined)\n                orderEndX[node.order] = node.x + node.pixelWidth;\n            else\n                orderEndX[node.order] = Math.max(orderEndX[node.order], node.x + node.pixelWidth);\n        }\n    });\n    tracks.forEach(function (track) {\n        highlight = 'plain';\n        trackColor = generateTrackColor(track, highlight);\n        yStart = track.path[0].y;\n        if (track.type !== 'read') {\n            if (track.sequence[0].charAt(0) === '-') {\n                xStart = orderEndX[track.path[0].order] + 20;\n            } else {\n                xStart = orderStartX[track.path[0].order] - 20;\n            }\n        } else {\n            xStart = getReadXStart(track);\n        }\n        for (var _i6 = 0; _i6 < track.path.length; _i6 += 1) {\n            if (track.path[_i6].y === yStart) {\n                if (track.path[_i6].hasOwnProperty('features')) {\n                    if (_i6 > 0 && track.path[_i6 - 1].order === track.path[_i6].order)\n                        reversalFlag = true;\n                    else\n                        reversalFlag = false;\n                    dummy = createFeatureRectangle(track.path[_i6], orderStartX[track.path[_i6].order], orderEndX[track.path[_i6].order], highlight, track, xStart, yStart, trackColor, reversalFlag);\n                    highlight = dummy.highlight;\n                    xStart = dummy.xStart;\n                }\n            } else {\n                if (track.path[_i6 - 1].isForward) {\n                    xEnd = orderEndX[track.path[_i6 - 1].order];\n                } else {\n                    xEnd = orderStartX[track.path[_i6 - 1].order];\n                }\n                if (xEnd !== xStart) {\n                    trackColor = generateTrackColor(track, highlight);\n                    trackRectangles.push({\n                        xStart: Math.min(xStart, xEnd),\n                        yStart: yStart,\n                        xEnd: Math.max(xStart, xEnd),\n                        yEnd: yStart + track.width - 1,\n                        color: trackColor,\n                        id: track.id,\n                        type: track.type\n                    });\n                }\n                if (track.path[_i6].order - 1 === track.path[_i6 - 1].order) {\n                    xStart = xEnd;\n                    xEnd = orderStartX[track.path[_i6].order];\n                    yEnd = track.path[_i6].y;\n                    trackColor = generateTrackColor(track, highlight);\n                    trackCurves.push({\n                        xStart: xStart,\n                        yStart: yStart,\n                        xEnd: xEnd + 1,\n                        yEnd: yEnd,\n                        width: track.width,\n                        color: trackColor,\n                        laneChange: Math.abs(track.path[_i6].lane - track.path[_i6 - 1].lane),\n                        id: track.id,\n                        type: track.type\n                    });\n                    xStart = xEnd;\n                    yStart = yEnd;\n                } else if (track.path[_i6].order + 1 === track.path[_i6 - 1].order) {\n                    xStart = xEnd;\n                    xEnd = orderEndX[track.path[_i6].order];\n                    yEnd = track.path[_i6].y;\n                    trackColor = generateTrackColor(track, highlight);\n                    trackCurves.push({\n                        xStart: xStart + 1,\n                        yStart: yStart,\n                        xEnd: xEnd,\n                        yEnd: yEnd,\n                        width: track.width,\n                        color: trackColor,\n                        laneChange: Math.abs(track.path[_i6].lane - track.path[_i6 - 1].lane),\n                        id: track.id,\n                        type: track.type\n                    });\n                    xStart = xEnd;\n                    yStart = yEnd;\n                } else {\n                    if (track.path[_i6 - 1].isForward) {\n                        yEnd = track.path[_i6].y;\n                        generateForwardToReverse(xEnd, yStart, yEnd, track.width, trackColor, track.id, track.path[_i6].order, track.type);\n                        xStart = orderEndX[track.path[_i6].order];\n                        yStart = track.path[_i6].y;\n                    } else {\n                        yEnd = track.path[_i6].y;\n                        generateReverseToForward(xEnd, yStart, yEnd, track.width, trackColor, track.id, track.path[_i6].order, track.type);\n                        xStart = orderStartX[track.path[_i6].order];\n                        yStart = track.path[_i6].y;\n                    }\n                }\n                if (track.path[_i6].hasOwnProperty('features')) {\n                    if (track.path[_i6 - 1].order === track.path[_i6].order)\n                        reversalFlag = true;\n                    else\n                        reversalFlag = false;\n                    dummy = createFeatureRectangle(track.path[_i6], orderStartX[track.path[_i6].order], orderEndX[track.path[_i6].order], highlight, track, xStart, yStart, trackColor, reversalFlag);\n                    highlight = dummy.highlight;\n                    xStart = dummy.xStart;\n                }\n            }\n        }\n        if (track.type !== 'read') {\n            if (!track.path[track.path.length - 1].isForward) {\n                xEnd = orderStartX[track.path[track.path.length - 1].order] - 20;\n            } else {\n                xEnd = orderEndX[track.path[track.path.length - 1].order] + 20;\n            }\n        } else {\n            xEnd = getReadXEnd(track);\n        }\n        trackRectangles.push({\n            xStart: Math.min(xStart, xEnd),\n            yStart: yStart,\n            xEnd: Math.max(xStart, xEnd),\n            yEnd: yStart + track.width - 1,\n            color: trackColor,\n            id: track.id,\n            type: track.type\n        });\n    });\n}\nfunction createFeatureRectangle(node, nodeXStart, nodeXEnd, highlight, track, rectXStart, yStart, trackColor, reversalFlag) {\n    var nodeWidth = void 0;\n    var currentHighlight = highlight;\n    var c = void 0;\n    var co = void 0;\n    var featureXStart = void 0;\n    var featureXEnd = void 0;\n    nodeXStart -= 8;\n    nodeXEnd += 8;\n    if (nodes[node.node].hasOwnProperty('sequenceLength')) {\n        nodeWidth = nodes[node.node].sequenceLength;\n    } else {\n        nodeWidth = nodes[node.node].width;\n    }\n    node.features.sort(function (a, b) {\n        return a.start - b.start;\n    });\n    node.features.forEach(function (feature) {\n        if (currentHighlight !== feature.type) {\n            c = generateTrackColor(track, currentHighlight);\n            if (node.isForward === true) {\n                featureXStart = nodeXStart + Math.round(feature.start * (nodeXEnd - nodeXStart + 1) / nodeWidth);\n                if (reversalFlag && featureXStart < nodeXStart + 8) {\n                    featureXEnd = nodeXStart + Math.round((feature.end + 1) * (nodeXEnd - nodeXStart + 1) / nodeWidth) - 1;\n                    co = generateTrackColor(track, feature.type);\n                    trackRectanglesStep3.push({\n                        xStart: featureXStart,\n                        yStart: yStart,\n                        xEnd: featureXEnd,\n                        yEnd: yStart + track.width - 1,\n                        color: co,\n                        id: track.id,\n                        type: track.type\n                    });\n                }\n                if (featureXStart > rectXStart + 1) {\n                    trackRectanglesStep3.push({\n                        xStart: rectXStart,\n                        yStart: yStart,\n                        xEnd: featureXStart - 1,\n                        yEnd: yStart + track.width - 1,\n                        color: c,\n                        id: track.id,\n                        type: track.type\n                    });\n                }\n            } else {\n                featureXStart = nodeXEnd - Math.round(feature.start * (nodeXEnd - nodeXStart + 1) / nodeWidth);\n                if (reversalFlag && featureXStart > nodeXEnd - 8) {\n                    featureXEnd = nodeXEnd - Math.round((feature.end + 1) * (nodeXEnd - nodeXStart + 1) / nodeWidth) - 1;\n                    co = generateTrackColor(track, feature.type);\n                    trackRectanglesStep3.push({\n                        xStart: featureXEnd,\n                        yStart: yStart,\n                        xEnd: featureXStart,\n                        yEnd: yStart + track.width - 1,\n                        color: co,\n                        id: track.id,\n                        type: track.type\n                    });\n                }\n                if (rectXStart > featureXStart + 1) {\n                    trackRectanglesStep3.push({\n                        xStart: featureXStart + 1,\n                        yStart: yStart,\n                        xEnd: rectXStart,\n                        yEnd: yStart + track.width - 1,\n                        color: c,\n                        id: track.id,\n                        type: track.type\n                    });\n                }\n            }\n            rectXStart = featureXStart;\n            currentHighlight = feature.type;\n        }\n        if (feature.end < nodeWidth - 1 || !feature.hasOwnProperty('continue')) {\n            c = generateTrackColor(track, currentHighlight);\n            if (node.isForward === true) {\n                featureXEnd = nodeXStart + Math.round((feature.end + 1) * (nodeXEnd - nodeXStart + 1) / nodeWidth) - 1;\n                trackRectanglesStep3.push({\n                    xStart: rectXStart,\n                    yStart: yStart,\n                    xEnd: featureXEnd,\n                    yEnd: yStart + track.width - 1,\n                    color: c,\n                    id: track.id,\n                    type: track.type\n                });\n            } else {\n                featureXEnd = nodeXEnd - Math.round((feature.end + 1) * (nodeXEnd - nodeXStart + 1) / nodeWidth) - 1;\n                trackRectanglesStep3.push({\n                    xStart: featureXEnd,\n                    yStart: yStart,\n                    xEnd: rectXStart,\n                    yEnd: yStart + track.width - 1,\n                    color: c,\n                    id: track.id,\n                    type: track.type\n                });\n            }\n            rectXStart = featureXEnd + 1;\n            currentHighlight = 'plain';\n        }\n    });\n    return {\n        xStart: rectXStart,\n        highlight: currentHighlight\n    };\n}\nfunction generateForwardToReverse(x, yStart, yEnd, trackWidth, trackColor, trackID, order, type) {\n    x += 10 * extraRight[order];\n    var yTop = Math.min(yStart, yEnd);\n    var yBottom = Math.max(yStart, yEnd);\n    var radius = 7;\n    trackVerticalRectangles.push({\n        xStart: x - 10 * extraRight[order],\n        yStart: yStart,\n        xEnd: x + 5,\n        yEnd: yStart + trackWidth - 1,\n        color: trackColor,\n        id: trackID,\n        type: type\n    });\n    trackVerticalRectangles.push({\n        xStart: x + 5 + radius,\n        yStart: yTop + trackWidth + radius - 1,\n        xEnd: x + 5 + radius + Math.min(7, trackWidth) - 1,\n        yEnd: yBottom - radius + 1,\n        color: trackColor,\n        id: trackID,\n        type: type\n    });\n    trackVerticalRectangles.push({\n        xStart: x - 10 * extraRight[order],\n        yStart: yEnd,\n        xEnd: x + 5,\n        yEnd: yEnd + trackWidth - 1,\n        color: trackColor,\n        id: trackID,\n        type: type\n    });\n    var d = 'M ' + (x + 5) + ' ' + yBottom;\n    d += ' Q ' + (x + 5 + radius) + ' ' + yBottom + ' ' + (x + 5 + radius) + ' ' + (yBottom - radius);\n    d += ' H ' + (x + 5 + radius + Math.min(7, trackWidth));\n    d += ' Q ' + (x + 5 + radius + Math.min(7, trackWidth)) + ' ' + (yBottom + trackWidth) + ' ' + (x + 5) + ' ' + (yBottom + trackWidth);\n    d += ' Z ';\n    trackCorners.push({\n        path: d,\n        color: trackColor,\n        id: trackID,\n        type: type\n    });\n    d = 'M ' + (x + 5) + ' ' + yTop;\n    d += ' Q ' + (x + 5 + radius + Math.min(7, trackWidth)) + ' ' + yTop + ' ' + (x + 5 + radius + Math.min(7, trackWidth)) + ' ' + (yTop + trackWidth + radius);\n    d += ' H ' + (x + 5 + radius);\n    d += ' Q ' + (x + 5 + radius) + ' ' + (yTop + trackWidth) + ' ' + (x + 5) + ' ' + (yTop + trackWidth);\n    d += ' Z ';\n    trackCorners.push({\n        path: d,\n        color: trackColor,\n        id: trackID,\n        type: type\n    });\n    extraRight[order] += 1;\n}\nfunction generateReverseToForward(x, yStart, yEnd, trackWidth, trackColor, trackID, order, type) {\n    var yTop = Math.min(yStart, yEnd);\n    var yBottom = Math.max(yStart, yEnd);\n    var radius = 7;\n    x -= 10 * extraLeft[order];\n    trackVerticalRectangles.push({\n        xStart: x - 6,\n        yStart: yStart,\n        xEnd: x + 10 * extraLeft[order],\n        yEnd: yStart + trackWidth - 1,\n        color: trackColor,\n        id: trackID,\n        type: type\n    });\n    trackVerticalRectangles.push({\n        xStart: x - 5 - radius - Math.min(7, trackWidth),\n        yStart: yTop + trackWidth + radius - 1,\n        xEnd: x - 5 - radius - 1,\n        yEnd: yBottom - radius + 1,\n        color: trackColor,\n        id: trackID,\n        type: type\n    });\n    trackVerticalRectangles.push({\n        xStart: x - 6,\n        yStart: yEnd,\n        xEnd: x + 10 * extraLeft[order],\n        yEnd: yEnd + trackWidth - 1,\n        color: trackColor,\n        id: trackID,\n        type: type\n    });\n    var d = 'M ' + (x - 5) + ' ' + yBottom;\n    d += ' Q ' + (x - 5 - radius) + ' ' + yBottom + ' ' + (x - 5 - radius) + ' ' + (yBottom - radius);\n    d += ' H ' + (x - 5 - radius - Math.min(7, trackWidth));\n    d += ' Q ' + (x - 5 - radius - Math.min(7, trackWidth)) + ' ' + (yBottom + trackWidth) + ' ' + (x - 5) + ' ' + (yBottom + trackWidth);\n    d += ' Z ';\n    trackCorners.push({\n        path: d,\n        color: trackColor,\n        id: trackID,\n        type: type\n    });\n    d = 'M ' + (x - 5) + ' ' + yTop;\n    d += ' Q ' + (x - 5 - radius - Math.min(7, trackWidth)) + ' ' + yTop + ' ' + (x - 5 - radius - Math.min(7, trackWidth)) + ' ' + (yTop + trackWidth + radius);\n    d += ' H ' + (x - 5 - radius);\n    d += ' Q ' + (x - 5 - radius) + ' ' + (yTop + trackWidth) + ' ' + (x - 5) + ' ' + (yTop + trackWidth);\n    d += ' Z ';\n    trackCorners.push({\n        path: d,\n        color: trackColor,\n        id: trackID,\n        type: type\n    });\n    extraLeft[order] += 1;\n}\nfunction drawReversalsByColor(corners, rectangles, type) {\n    if (typeof type === 'undefined')\n        type = 'haplo';\n    var co = new Set();\n    rectangles.forEach(function (rect) {\n        co.add(rect.color);\n    });\n    co.forEach(function (c) {\n        drawTrackRectangles(rectangles.filter(filterObjectByAttribute('color', c)), type);\n        drawTrackCorners(corners.filter(filterObjectByAttribute('color', c)), type);\n    });\n}\nfunction drawNodes(dNodes) {\n    var x = void 0;\n    var y = void 0;\n    dNodes.forEach(function (node) {\n        node.d = 'M ' + (node.x - 9) + ' ' + node.y + ' Q ' + (node.x - 9) + ' ' + (node.y - 9) + ' ' + node.x + ' ' + (node.y - 9);\n        x = node.x;\n        y = node.y - 9;\n        if (node.width > 1) {\n            x += node.pixelWidth;\n            node.d += ' L ' + x + ' ' + y;\n        }\n        node.d += ' Q ' + (x + 9) + ' ' + y + ' ' + (x + 9) + ' ' + (y + 9);\n        x += 9;\n        y += 9;\n        if (node.contentHeight > 0) {\n            y += node.contentHeight - 0;\n            node.d += ' L ' + x + ' ' + y;\n        }\n        node.d += ' Q ' + x + ' ' + (y + 9) + ' ' + (x - 9) + ' ' + (y + 9);\n        x -= 9;\n        y += 9;\n        if (node.width > 1) {\n            x -= node.pixelWidth;\n            node.d += ' L ' + x + ' ' + y;\n        }\n        node.d += ' Q ' + (x - 9) + ' ' + y + ' ' + (x - 9) + ' ' + (y - 9);\n        x -= 9;\n        y -= 9;\n        if (node.contentHeight > 0) {\n            y -= node.contentHeight - 0;\n            node.d += ' L ' + x + ' ' + y;\n        }\n    });\n    svg.selectAll('.node').data(dNodes).enter().append('path').attr('id', function (d) {\n        return d.name;\n    }).attr('d', function (d) {\n        return d.d;\n    }).on('mouseover', nodeMouseOver).on('mouseout', nodeMouseOut).on('dblclick', nodeDoubleClick).style('fill', '#fff').style('fill-opacity', config.showExonsFlag ? '0.4' : '0.6').style('stroke', 'black').style('stroke-width', '2px').append('svg:title').text(function (d) {\n        return d.name;\n    });\n}\nfunction drawLabels(dNodes) {\n    if (config.nodeWidthOption === 0) {\n        svg.selectAll('text').data(dNodes).enter().append('text').attr('x', function (d) {\n            return d.x - 4;\n        }).attr('y', function (d) {\n            return d.y + 4;\n        }).text(function (d) {\n            return d.seq;\n        }).attr('font-family', 'Courier, \"Lucida Console\", monospace').attr('font-size', '14px').attr('fill', 'black').style('pointer-events', 'none');\n    }\n}\nfunction drawRuler() {\n    var rulerTrackIndex = 0;\n    while (tracks[rulerTrackIndex].name !== trackForRuler) {\n        rulerTrackIndex += 1;\n    }\n    var rulerTrack = tracks[rulerTrackIndex];\n    svg.append('line').attr('x1', 0).attr('y1', minYCoordinate - 10).attr('x2', maxXCoordinate).attr('y2', minYCoordinate - 10).attr('stroke-width', 1).attr('stroke', 'black');\n    var markingInterval = 100;\n    if (config.nodeWidthOption === 0)\n        markingInterval = 20;\n    var indexOfFirstBaseInNode = rulerTrack.indexOfFirstBase;\n    var atLeastOneMarkingDrawn = false;\n    var xCoordOfPreviousMarking = -100;\n    if (config.nodeWidthOption !== 0) {\n        var firstNode = nodes[rulerTrack.indexSequence[0]];\n        xCoordOfPreviousMarking = getXCoordinateOfBaseWithinNode(firstNode, 0);\n        drawRulerMarking(indexOfFirstBaseInNode, xCoordOfPreviousMarking);\n        atLeastOneMarkingDrawn = true;\n    }\n    rulerTrack.indexSequence.forEach(function (nodeIndex) {\n        var currentNode = nodes[nodeIndex];\n        var nextMarking = Math.ceil(indexOfFirstBaseInNode / markingInterval) * markingInterval;\n        while (nextMarking < indexOfFirstBaseInNode + currentNode.sequenceLength) {\n            var xCoordOfMarking = getXCoordinateOfBaseWithinNode(currentNode, nextMarking - indexOfFirstBaseInNode);\n            if (xCoordOfPreviousMarking + 80 <= xCoordOfMarking) {\n                drawRulerMarking(nextMarking, xCoordOfMarking);\n                atLeastOneMarkingDrawn = true;\n                xCoordOfPreviousMarking = xCoordOfMarking;\n            }\n            nextMarking += markingInterval;\n        }\n        indexOfFirstBaseInNode += nodes[nodeIndex].sequenceLength;\n    });\n    if (!atLeastOneMarkingDrawn) {\n        drawRulerMarking(rulerTrack.indexOfFirstBase, nodes[rulerTrack.indexSequence[0]].x - 4);\n    }\n}\nfunction drawRulerMarking(sequencePosition, xCoordinate) {\n    svg.append('text').attr('x', xCoordinate).attr('y', minYCoordinate - 13).text('|' + sequencePosition).attr('font-family', 'Courier, \"Lucida Console\", monospace').attr('font-size', '12px').attr('fill', 'black').style('pointer-events', 'none');\n}\nfunction filterObjectByAttribute(attribute, value) {\n    return function (item) {\n        return item[attribute] === value;\n    };\n}\nfunction drawTrackRectangles(rectangles, type) {\n    if (typeof type === 'undefined')\n        type = 'haplo';\n    rectangles = rectangles.filter(filterObjectByAttribute('type', type));\n    svg.selectAll('trackRectangles').data(rectangles).enter().append('rect').attr('x', function (d) {\n        return d.xStart;\n    }).attr('y', function (d) {\n        return d.yStart;\n    }).attr('width', function (d) {\n        return d.xEnd - d.xStart + 1;\n    }).attr('height', function (d) {\n        return d.yEnd - d.yStart + 1;\n    }).style('fill', function (d) {\n        return d.color;\n    }).attr('trackID', function (d) {\n        return d.id;\n    }).attr('class', function (d) {\n        return 'track' + d.id;\n    }).attr('color', function (d) {\n        return d.color;\n    }).on('mouseover', trackMouseOver).on('mouseout', trackMouseOut).on('dblclick', trackDoubleClick);\n}\nfunction compareCurvesByLineChanges(a, b) {\n    if (a[6] < b[6])\n        return -1;\n    else if (a[6] > b[6])\n        return 1;\n    return 0;\n}\nfunction defineSVGPatterns() {\n    var defs = svg.append('defs');\n    var pattern = defs.append('pattern').attrs({\n            id: 'patternA',\n            width: '7',\n            height: '7',\n            patternUnits: 'userSpaceOnUse',\n            patternTransform: 'rotate(45)'\n        });\n    pattern.append('rect').attrs({\n        x: '0',\n        y: '0',\n        width: '7',\n        height: '7',\n        fill: '#FFFFFF'\n    });\n    pattern.append('rect').attrs({\n        x: '0',\n        y: '0',\n        width: '3',\n        height: '3',\n        fill: '#505050'\n    });\n    pattern.append('rect').attrs({\n        x: '0',\n        y: '4',\n        width: '3',\n        height: '3',\n        fill: '#505050'\n    });\n    pattern.append('rect').attrs({\n        x: '4',\n        y: '0',\n        width: '3',\n        height: '3',\n        fill: '#505050'\n    });\n    pattern.append('rect').attrs({\n        x: '4',\n        y: '4',\n        width: '3',\n        height: '3',\n        fill: '#505050'\n    });\n    pattern = defs.append('pattern').attrs({\n        id: 'patternB',\n        width: '8',\n        height: '8',\n        patternUnits: 'userSpaceOnUse',\n        patternTransform: 'rotate(45)'\n    });\n    pattern.append('rect').attrs({\n        x: '0',\n        y: '0',\n        width: '8',\n        height: '8',\n        fill: '#FFFFFF'\n    });\n    pattern.append('rect').attrs({\n        x: '0',\n        y: '0',\n        width: '3',\n        height: '3',\n        fill: '#1f77b4'\n    });\n    pattern.append('rect').attrs({\n        x: '0',\n        y: '5',\n        width: '3',\n        height: '3',\n        fill: '#1f77b4'\n    });\n    pattern.append('rect').attrs({\n        x: '5',\n        y: '0',\n        width: '3',\n        height: '3',\n        fill: '#1f77b4'\n    });\n    pattern.append('rect').attrs({\n        x: '5',\n        y: '5',\n        width: '3',\n        height: '3',\n        fill: '#1f77b4'\n    });\n    pattern = defs.append('pattern').attrs({\n        id: 'plaid0',\n        width: '6',\n        height: '6',\n        patternUnits: 'userSpaceOnUse',\n        patternTransform: 'rotate(45)'\n    });\n    pattern.append('rect').attrs({\n        x: '0',\n        y: '0',\n        width: '6',\n        height: '6',\n        fill: '#FFFFFF'\n    });\n    pattern.append('rect').attrs({\n        x: '0',\n        y: '0',\n        width: '2',\n        height: '2',\n        fill: '#1f77b4'\n    });\n    pattern.append('rect').attrs({\n        x: '0',\n        y: '4',\n        width: '2',\n        height: '2',\n        fill: '#1f77b4'\n    });\n    pattern.append('rect').attrs({\n        x: '4',\n        y: '0',\n        width: '2',\n        height: '2',\n        fill: '#1f77b4'\n    });\n    pattern.append('rect').attrs({\n        x: '4',\n        y: '4',\n        width: '2',\n        height: '2',\n        fill: '#1f77b4'\n    });\n    pattern = defs.append('pattern').attrs({\n        id: 'plaid1',\n        width: '6',\n        height: '6',\n        patternUnits: 'userSpaceOnUse',\n        patternTransform: 'rotate(45)'\n    });\n    pattern.append('rect').attrs({\n        x: '0',\n        y: '0',\n        width: '6',\n        height: '6',\n        fill: '#FFFFFF'\n    });\n    pattern.append('rect').attrs({\n        x: '0',\n        y: '0',\n        width: '2',\n        height: '2',\n        fill: '#ff7f0e'\n    });\n    pattern.append('rect').attrs({\n        x: '0',\n        y: '4',\n        width: '2',\n        height: '2',\n        fill: '#ff7f0e'\n    });\n    pattern.append('rect').attrs({\n        x: '4',\n        y: '0',\n        width: '2',\n        height: '2',\n        fill: '#ff7f0e'\n    });\n    pattern.append('rect').attrs({\n        x: '4',\n        y: '4',\n        width: '2',\n        height: '2',\n        fill: '#ff7f0e'\n    });\n    pattern = defs.append('pattern').attrs({\n        id: 'plaid2',\n        width: '6',\n        height: '6',\n        patternUnits: 'userSpaceOnUse',\n        patternTransform: 'rotate(45)'\n    });\n    pattern.append('rect').attrs({\n        x: '0',\n        y: '0',\n        width: '6',\n        height: '6',\n        fill: '#FFFFFF'\n    });\n    pattern.append('rect').attrs({\n        x: '0',\n        y: '0',\n        width: '2',\n        height: '2',\n        fill: '#2ca02c'\n    });\n    pattern.append('rect').attrs({\n        x: '0',\n        y: '4',\n        width: '2',\n        height: '2',\n        fill: '#2ca02c'\n    });\n    pattern.append('rect').attrs({\n        x: '4',\n        y: '0',\n        width: '2',\n        height: '2',\n        fill: '#2ca02c'\n    });\n    pattern.append('rect').attrs({\n        x: '4',\n        y: '4',\n        width: '2',\n        height: '2',\n        fill: '#2ca02c'\n    });\n    pattern = defs.append('pattern').attrs({\n        id: 'plaid3',\n        width: '6',\n        height: '6',\n        patternUnits: 'userSpaceOnUse',\n        patternTransform: 'rotate(45)'\n    });\n    pattern.append('rect').attrs({\n        x: '0',\n        y: '0',\n        width: '6',\n        height: '6',\n        fill: '#FFFFFF'\n    });\n    pattern.append('rect').attrs({\n        x: '0',\n        y: '0',\n        width: '2',\n        height: '2',\n        fill: '#d62728'\n    });\n    pattern.append('rect').attrs({\n        x: '0',\n        y: '4',\n        width: '2',\n        height: '2',\n        fill: '#d62728'\n    });\n    pattern.append('rect').attrs({\n        x: '4',\n        y: '0',\n        width: '2',\n        height: '2',\n        fill: '#d62728'\n    });\n    pattern.append('rect').attrs({\n        x: '4',\n        y: '4',\n        width: '2',\n        height: '2',\n        fill: '#d62728'\n    });\n    pattern = defs.append('pattern').attrs({\n        id: 'plaid4',\n        width: '6',\n        height: '6',\n        patternUnits: 'userSpaceOnUse',\n        patternTransform: 'rotate(45)'\n    });\n    pattern.append('rect').attrs({\n        x: '0',\n        y: '0',\n        width: '6',\n        height: '6',\n        fill: '#FFFFFF'\n    });\n    pattern.append('rect').attrs({\n        x: '0',\n        y: '0',\n        width: '2',\n        height: '2',\n        fill: '#9467bd'\n    });\n    pattern.append('rect').attrs({\n        x: '0',\n        y: '4',\n        width: '2',\n        height: '2',\n        fill: '#9467bd'\n    });\n    pattern.append('rect').attrs({\n        x: '4',\n        y: '0',\n        width: '2',\n        height: '2',\n        fill: '#9467bd'\n    });\n    pattern.append('rect').attrs({\n        x: '4',\n        y: '4',\n        width: '2',\n        height: '2',\n        fill: '#9467bd'\n    });\n    pattern = defs.append('pattern').attrs({\n        id: 'plaid5',\n        width: '6',\n        height: '6',\n        patternUnits: 'userSpaceOnUse',\n        patternTransform: 'rotate(45)'\n    });\n    pattern.append('rect').attrs({\n        x: '0',\n        y: '0',\n        width: '6',\n        height: '6',\n        fill: '#FFFFFF'\n    });\n    pattern.append('rect').attrs({\n        x: '0',\n        y: '0',\n        width: '2',\n        height: '2',\n        fill: '#8c564b'\n    });\n    pattern.append('rect').attrs({\n        x: '0',\n        y: '4',\n        width: '2',\n        height: '2',\n        fill: '#8c564b'\n    });\n    pattern.append('rect').attrs({\n        x: '4',\n        y: '0',\n        width: '2',\n        height: '2',\n        fill: '#8c564b'\n    });\n    pattern.append('rect').attrs({\n        x: '4',\n        y: '4',\n        width: '2',\n        height: '2',\n        fill: '#8c564b'\n    });\n}\nfunction drawTrackCurves(type) {\n    if (typeof type === 'undefined')\n        type = 'haplo';\n    var myTrackCurves = trackCurves.filter(filterObjectByAttribute('type', type));\n    myTrackCurves.sort(compareCurvesByLineChanges);\n    myTrackCurves.forEach(function (curve) {\n        var xMiddle = (curve.xStart + curve.xEnd) / 2;\n        var d = 'M ' + curve.xStart + ' ' + curve.yStart;\n        d += ' C ' + xMiddle + ' ' + curve.yStart + ' ' + xMiddle + ' ' + curve.yEnd + ' ' + curve.xEnd + ' ' + curve.yEnd;\n        d += ' V ' + (curve.yEnd + curve.width);\n        d += ' C ' + xMiddle + ' ' + (curve.yEnd + curve.width) + ' ' + xMiddle + ' ' + (curve.yStart + curve.width) + ' ' + curve.xStart + ' ' + (curve.yStart + curve.width);\n        d += ' Z';\n        curve.path = d;\n    });\n    svg.selectAll('trackCurves').data(trackCurves).enter().append('path').attr('d', function (d) {\n        return d.path;\n    }).style('fill', function (d) {\n        return d.color;\n    }).attr('trackID', function (d) {\n        return d.id;\n    }).attr('class', function (d) {\n        return 'track' + d.id;\n    }).attr('color', function (d) {\n        return d.color;\n    }).on('mouseover', trackMouseOver).on('mouseout', trackMouseOut).on('dblclick', trackDoubleClick);\n}\nfunction drawTrackCorners(corners, type) {\n    if (typeof type === 'undefined')\n        type = 'haplo';\n    corners = corners.filter(filterObjectByAttribute('type', type));\n    svg.selectAll('trackCorners').data(corners).enter().append('path').attr('d', function (d) {\n        return d.path;\n    }).style('fill', function (d) {\n        return d.color;\n    }).attr('trackID', function (d) {\n        return d.id;\n    }).attr('class', function (d) {\n        return 'track' + d.id;\n    }).attr('color', function (d) {\n        return d.color;\n    }).on('mouseover', trackMouseOver).on('mouseout', trackMouseOut).on('dblclick', trackDoubleClick);\n}\nfunction drawLegend() {\n    var content = '<table class=\"table-sm table-condensed table-nonfluid\"><thead><tr><th>Color</th><th>Trackname</th><th>Show Track</th></tr></thead>';\n    var listeners = [];\n    for (var i = 0; i < tracks.length; i += 1) {\n        if (tracks[i].type === 'haplo') {\n            content += '<tr><td style=\"text-align:right\"><div class=\"color-box\" style=\"background-color: ' + generateTrackColor(tracks[i], 'exon') + ';\"></div></td>';\n            if (tracks[i].hasOwnProperty('name')) {\n                content += '<td>' + tracks[i].name + '</td>';\n            } else {\n                content += '<td>' + tracks[i].id + '</td>';\n            }\n            content += '<td><input type=\"checkbox\" checked=true id=\"showTrack' + i + '\"></td>';\n            listeners.push(i);\n        }\n    }\n    content += '</table';\n    $('#legendDiv').html(content);\n    listeners.forEach(function (i) {\n        document.getElementById('showTrack' + i).addEventListener('click', function () {\n            return changeTrackVisibility(i);\n        }, false);\n    });\n}\nfunction trackMouseOver() {\n    var trackID = d3.select(this).attr('trackID');\n    d3.selectAll('.track' + trackID).style('fill', 'url(#patternA)');\n}\nfunction nodeMouseOver() {\n    d3.select(this).style('stroke-width', '4px');\n}\nfunction trackMouseOut() {\n    var trackID = d3.select(this).attr('trackID');\n    d3.selectAll('.track' + trackID).each(function clearTrackHighlight() {\n        var c = d3.select(this).attr('color');\n        d3.select(this).style('fill', c);\n    });\n}\nfunction nodeMouseOut() {\n    d3.select(this).style('stroke-width', '2px');\n}\nfunction trackDoubleClick() {\n    var trackID = d3.select(this).attr('trackID');\n    var index = 0;\n    while (index < inputTracks.length && inputTracks[index].id !== Number(trackID)) {\n        index += 1;\n    }\n    if (index >= inputTracks.length)\n        return;\n    console.log('moving index: ' + index);\n    moveTrackToFirstPosition(index);\n    createTubeMap();\n}\nfunction nodeDoubleClick() {\n    var nodeID = d3.select(this).attr('id');\n    if (config.clickableNodesFlag) {\n        if (reads && config.showReads) {\n            document.getElementById('hgvmNodeID').value = nodeID;\n            document.getElementById('hgvmPostButton').click();\n        } else {\n            document.getElementById('nodeID').value = nodeID;\n            document.getElementById('postButton').click();\n        }\n    }\n}\nfunction vgExtractNodes(vg) {\n    var result = [];\n    vg.node.forEach(function (node) {\n        result.push({\n            name: '' + node.id,\n            sequenceLength: node.sequence.length,\n            seq: node.sequence\n        });\n    });\n    return result;\n}\nfunction generateNodeWidth() {\n    nodes.forEach(function (node) {\n        if (!node.hasOwnProperty('sequenceLength')) {\n            node.sequenceLength = node.seq.length;\n        }\n    });\n    switch (config.nodeWidthOption) {\n    case 1:\n        nodes.forEach(function (node) {\n            node.width = 1 + Math.log(node.sequenceLength) / Math.log(2);\n            node.pixelWidth = Math.round((node.width - 1) * 8.401);\n        });\n        break;\n    case 2:\n        nodes.forEach(function (node) {\n            node.width = node.sequenceLength / 100;\n            node.pixelWidth = Math.round((node.width - 1) * 8.401);\n        });\n        break;\n    default:\n        nodes.forEach(function (node) {\n            node.width = node.sequenceLength;\n            svg.append('text').attr('x', 0).attr('y', 100).attr('id', 'dummytext').text(node.seq.substr(1)).attr('font-family', 'Courier, \"Lucida Console\", monospace').attr('font-size', '14px').attr('fill', 'black').style('pointer-events', 'none');\n            node.pixelWidth = Math.round(document.getElementById('dummytext').getComputedTextLength());\n            $('#dummytext').remove();\n        });\n    }\n}\nfunction vgExtractTracks(vg) {\n    var result = [];\n    vg.path.forEach(function (path, index) {\n        var sequence = [];\n        var isCompletelyReverse = true;\n        path.mapping.forEach(function (pos) {\n            if (pos.position.hasOwnProperty('is_reverse') && pos.position.is_reverse === true) {\n                sequence.push('-' + pos.position.node_id);\n            } else {\n                sequence.push('' + pos.position.node_id);\n                isCompletelyReverse = false;\n            }\n        });\n        if (isCompletelyReverse) {\n            sequence.reverse();\n            sequence.forEach(function (node, index2) {\n                sequence[index2] = node.substr(1);\n            });\n        }\n        var track = {};\n        track.id = index;\n        track.sequence = sequence;\n        if (path.hasOwnProperty('freq'))\n            track.freq = path.freq;\n        if (path.hasOwnProperty('name'))\n            track.name = path.name;\n        if (path.hasOwnProperty('indexOfFirstBase'))\n            track.indexOfFirstBase = Number(path.indexOfFirstBase);\n        result.push(track);\n    });\n    return result;\n}\nfunction compareReadsByLeftEnd(a, b) {\n    var leftNodeA = void 0;\n    var leftNodeB = void 0;\n    var leftIndexA = void 0;\n    var leftIndexB = void 0;\n    if (a.sequence[0].charAt(0) === '-') {\n        if (a.sequence[a.sequence.length - 1].charAt(0) === '-') {\n            leftNodeA = a.sequence[a.sequence.length - 1].substr(1);\n            leftIndexA = nodes[nodeMap.get(leftNodeA)].sequenceLength - a.finalNodeCoverLength;\n        } else {\n            leftNodeA = a.sequence[a.sequence.length - 1];\n            leftIndexA = 0;\n        }\n    } else {\n        leftNodeA = a.sequence[0];\n        leftIndexA = a.firstNodeOffset;\n    }\n    if (b.sequence[0].charAt(0) === '-') {\n        if (b.sequence[b.sequence.length - 1].charAt(0) === '-') {\n            leftNodeB = b.sequence[b.sequence.length - 1].substr(1);\n            leftIndexB = nodes[nodeMap.get(leftNodeB)].sequenceLength - b.finalNodeCoverLength;\n        } else {\n            leftNodeB = b.sequence[b.sequence.length - 1];\n            leftIndexB = 0;\n        }\n    } else {\n        leftNodeB = b.sequence[0];\n        leftIndexB = b.firstNodeOffset;\n    }\n    if (leftNodeA < leftNodeB)\n        return -1;\n    else if (leftNodeA > leftNodeB)\n        return 1;\n    if (leftIndexA < leftIndexB)\n        return -1;\n    else if (leftIndexA > leftIndexB)\n        return 1;\n    return 0;\n}\nfunction compareReadsByLeftEnd2(a, b) {\n    if (nodes[a.indexSequence[0]].order < nodes[b.indexSequence[0]].order)\n        return -1;\n    else if (nodes[a.indexSequence[0]].order > nodes[b.indexSequence[0]].order)\n        return 1;\n    if (a.firstNodeOffset < b.firstNodeOffset)\n        return -1;\n    else if (a.firstNodeOffset > b.firstNodeOffset)\n        return 1;\n    if (nodes[a.indexSequence[a.indexSequence.length - 1]].order < nodes[b.indexSequence[b.indexSequence.length - 1]].order)\n        return -1;\n    else if (nodes[a.indexSequence[a.indexSequence.length - 1]].order > nodes[b.indexSequence[b.indexSequence.length - 1]].order)\n        return 1;\n    if (a.finalNodeCoverLength < b.finalNodeCoverLength)\n        return -1;\n    else if (a.finalNodeCoverLength > b.finalNodeCoverLength)\n        return 1;\n    return 0;\n}\nfunction vgExtractReads(myNodes, myTracks, myReads) {\n    console.log(myReads);\n    var extracted = [];\n    var nodeNames = [];\n    myNodes.forEach(function (node) {\n        nodeNames.push(parseInt(node.name, 10));\n    });\n    var _loop3 = function _loop3(i) {\n        var read = myReads[i];\n        var sequence = [];\n        var sequenceNew = [];\n        var firstIndex = -1;\n        var lastIndex = -1;\n        read.path.mapping.forEach(function (pos, j) {\n            if (nodeNames.indexOf(pos.position.node_id) > -1) {\n                var edit = {};\n                var offset = 0;\n                if (pos.position.hasOwnProperty('is_reverse') && pos.position.is_reverse === true) {\n                    sequence.push('-' + pos.position.node_id);\n                    edit.nodeName = '-' + pos.position.node_id;\n                } else {\n                    sequence.push('' + pos.position.node_id);\n                    edit.nodeName = pos.position.node_id.toString();\n                }\n                if (firstIndex < 0) {\n                    firstIndex = j;\n                    if (pos.position.hasOwnProperty('offset')) {\n                        pos.position.offset = parseInt(pos.position.offset, 10);\n                        offset = pos.position.offset;\n                    }\n                }\n                lastIndex = j;\n                var mismatches = [];\n                var posWithinNode = offset;\n                pos.edit.forEach(function (element) {\n                    if (element.hasOwnProperty('to_length') && !element.hasOwnProperty('from_length')) {\n                        mismatches.push({\n                            type: 'insertion',\n                            pos: posWithinNode,\n                            seq: element.sequence\n                        });\n                    } else if (!element.hasOwnProperty('to_length') && element.hasOwnProperty('from_length')) {\n                        mismatches.push({\n                            type: 'deletion',\n                            pos: posWithinNode,\n                            length: element.from_length\n                        });\n                    } else if (element.hasOwnProperty('sequence')) {\n                        if (element.sequence.length > 1) {\n                            console.log('found substitution at read ' + i + ', node ' + j + ' = ' + pos.position.node_id + ', seq = ' + element.sequence);\n                        }\n                        mismatches.push({\n                            type: 'substitution',\n                            pos: posWithinNode,\n                            seq: element.sequence\n                        });\n                    }\n                    if (element.hasOwnProperty('from_length')) {\n                        posWithinNode += element.from_length;\n                    }\n                });\n                edit.mismatches = mismatches;\n                sequenceNew.push(edit);\n            }\n        });\n        if (sequence.length === 0) {\n            console.log('read ' + i + ' is empty');\n        } else {\n            var track = {};\n            track.id = myTracks.length + extracted.length;\n            track.sequence = sequence;\n            track.sequenceNew = sequenceNew;\n            track.type = 'read';\n            if (read.path.hasOwnProperty('freq'))\n                track.freq = read.path.freq;\n            if (read.path.hasOwnProperty('name'))\n                track.name = read.path.name;\n            track.firstNodeOffset = 0;\n            if (read.path.mapping[firstIndex].position.hasOwnProperty('offset')) {\n                track.firstNodeOffset = read.path.mapping[firstIndex].position.offset;\n            }\n            var finalNodeEdit = read.path.mapping[lastIndex].edit;\n            track.finalNodeCoverLength = 0;\n            if (read.path.mapping[lastIndex].position.hasOwnProperty('offset')) {\n                track.finalNodeCoverLength += read.path.mapping[lastIndex].position.offset;\n            }\n            finalNodeEdit.forEach(function (edit) {\n                if (edit.hasOwnProperty('from_length')) {\n                    track.finalNodeCoverLength += edit.from_length;\n                }\n            });\n            extracted.push(track);\n        }\n    };\n    for (var i = 0; i < myReads.length; i += 1) {\n        _loop3(i);\n    }\n    return extracted;\n}\nfunction mergeNodes() {\n    var nodeName = void 0;\n    var nodeName2 = void 0;\n    var pred = [];\n    var succ = [];\n    for (var i = 0; i < nodes.length; i += 1) {\n        pred.push(new Set());\n        succ.push(new Set());\n    }\n    var tracksAndReads = void 0;\n    if (reads && config.showReads)\n        tracksAndReads = tracks.concat(reads);\n    else\n        tracksAndReads = tracks;\n    tracksAndReads.forEach(function (track) {\n        for (var _i7 = 0; _i7 < track.sequence.length; _i7 += 1) {\n            if (track.sequence[_i7].charAt(0) !== '-') {\n                if (_i7 > 0) {\n                    nodeName = track.sequence[_i7 - 1];\n                    pred[nodeMap.get(track.sequence[_i7])].add(nodeName);\n                    if (nodeName.charAt(0) === '-') {\n                        pred[nodeMap.get(track.sequence[_i7])].add(nodeName.substr(1));\n                    }\n                } else if (track.type === 'haplo') {\n                    pred[nodeMap.get(track.sequence[_i7])].add('None');\n                }\n                if (_i7 < track.sequence.length - 1) {\n                    nodeName = track.sequence[_i7 + 1];\n                    succ[nodeMap.get(track.sequence[_i7])].add(nodeName);\n                    if (nodeName.charAt(0) === '-') {\n                        succ[nodeMap.get(track.sequence[_i7])].add(nodeName.substr(1));\n                    }\n                } else if (track.type === 'haplo') {\n                    succ[nodeMap.get(track.sequence[_i7])].add('None');\n                }\n            } else {\n                nodeName = track.sequence[_i7].substr(1);\n                if (_i7 > 0) {\n                    nodeName2 = track.sequence[_i7 - 1];\n                    if (nodeName2.charAt(0) === '-') {\n                        succ[nodeMap.get(nodeName)].add(nodeName2.substr(1));\n                    } else {\n                        succ[nodeMap.get(nodeName)].add(nodeName2);\n                        succ[nodeMap.get(nodeName)].add('-' + nodeName2);\n                    }\n                } else if (track.type === 'haplo') {\n                    succ[nodeMap.get(nodeName)].add('None');\n                }\n                if (_i7 < track.sequence.length - 1) {\n                    nodeName2 = track.sequence[_i7 + 1];\n                    if (nodeName2.charAt(0) === '-') {\n                        pred[nodeMap.get(nodeName)].add(nodeName2.substr(1));\n                    } else {\n                        pred[nodeMap.get(nodeName)].add(nodeName2);\n                        pred[nodeMap.get(nodeName)].add('-' + nodeName2);\n                    }\n                } else if (track.type === 'haplo') {\n                    pred[nodeMap.get(nodeName)].add('None');\n                }\n            }\n        }\n    });\n    for (var _i8 = 0; _i8 < nodes.length; _i8 += 1) {\n        succ[_i8] = Array.from(succ[_i8]);\n        pred[_i8] = Array.from(pred[_i8]);\n    }\n    if (reads && config.showReads) {\n        var sortedNodes = nodes.slice();\n        sortedNodes.sort(compareNodesByOrder);\n        var mergeOffset = new Map();\n        var mergeOrigin = new Map();\n        sortedNodes.forEach(function (node) {\n            var predecessor = mergeableWithPred(nodeMap.get(node.name), pred, succ);\n            if (predecessor) {\n                mergeOffset.set(node.name, mergeOffset.get(predecessor) + nodes[nodeMap.get(predecessor)].sequenceLength);\n                mergeOrigin.set(node.name, mergeOrigin.get(predecessor));\n            } else {\n                mergeOffset.set(node.name, 0);\n                mergeOrigin.set(node.name, node.name);\n            }\n        });\n        reads.forEach(function (read) {\n            read.firstNodeOffset += mergeOffset.get(read.sequence[0]);\n            read.finalNodeCoverLength += mergeOffset.get(read.sequence[read.sequence.length - 1]);\n            for (var _i9 = read.sequence.length - 1; _i9 >= 0; _i9 -= 1) {\n                if (mergeableWithPred(nodeMap.get(read.sequence[_i9]), pred, succ)) {\n                    (function () {\n                        var predecessor = mergeableWithPred(nodeMap.get(read.sequence[_i9]), pred, succ);\n                        if (mergeableWithSucc(nodeMap.get(predecessor), pred, succ)) {\n                            if (_i9 > 0) {\n                                read.sequence.splice(_i9, 1);\n                                read.sequenceNew[_i9].mismatches.forEach(function (mismatch) {\n                                    mismatch.pos += nodes[nodeMap.get(predecessor)].sequenceLength;\n                                });\n                                read.sequenceNew[_i9 - 1].mismatches = read.sequenceNew[_i9 - 1].mismatches.concat(read.sequenceNew[_i9].mismatches);\n                                read.sequenceNew.splice(_i9, 1);\n                            } else {\n                                read.sequence[0] = mergeOrigin.get(read.sequence[0]);\n                                read.sequenceNew[_i9].mismatches.forEach(function (mismatch) {\n                                    mismatch.pos += mergeOffset.get(read.sequenceNew[0].nodeName);\n                                });\n                                read.sequenceNew[0].nodeName = mergeOrigin.get(read.sequenceNew[0].nodeName);\n                            }\n                        }\n                    }());\n                }\n            }\n        });\n    }\n    for (var _i10 = 0; _i10 < nodes.length; _i10 += 1) {\n        if (mergeableWithSucc(_i10, pred, succ) && !mergeableWithPred(_i10, pred, succ)) {\n            var donor = _i10;\n            while (mergeableWithSucc(donor, pred, succ)) {\n                donor = succ[donor][0];\n                if (donor.charAt(0) === '-')\n                    donor = donor.substr(1);\n                donor = nodeMap.get(donor);\n                if (nodes[_i10].hasOwnProperty('sequenceLength')) {\n                    nodes[_i10].sequenceLength += nodes[donor].sequenceLength;\n                } else {\n                    nodes[_i10].width += nodes[donor].width;\n                }\n                nodes[_i10].seq += nodes[donor].seq;\n            }\n        }\n    }\n    tracks.forEach(function (track) {\n        for (var _i11 = track.sequence.length - 1; _i11 >= 0; _i11 -= 1) {\n            nodeName = track.sequence[_i11];\n            if (nodeName.charAt(0) === '-')\n                nodeName = nodeName.substr(1);\n            var nodeIndex = nodeMap.get(nodeName);\n            if (mergeableWithPred(nodeIndex, pred, succ)) {\n                track.sequence.splice(_i11, 1);\n            }\n        }\n    });\n    for (var _i12 = nodes.length - 1; _i12 >= 0; _i12 -= 1) {\n        if (mergeableWithPred(_i12, pred, succ)) {\n            nodes.splice(_i12, 1);\n        }\n    }\n}\nfunction mergeableWithPred(index, pred, succ) {\n    if (pred[index].length !== 1)\n        return false;\n    if (pred[index][0] === 'None')\n        return false;\n    var predecessor = pred[index][0];\n    if (predecessor.charAt(0) === '-')\n        predecessor = predecessor.substr(1);\n    var predecessorIndex = nodeMap.get(predecessor);\n    if (succ[predecessorIndex].length !== 1)\n        return false;\n    if (succ[predecessorIndex][0] === 'None')\n        return false;\n    return predecessor;\n}\nfunction mergeableWithSucc(index, pred, succ) {\n    if (succ[index].length !== 1)\n        return false;\n    if (succ[index][0] === 'None')\n        return false;\n    var successor = succ[index][0];\n    if (successor.charAt(0) === '-')\n        successor = successor.substr(1);\n    var successorIndex = nodeMap.get(successor);\n    if (pred[successorIndex].length !== 1)\n        return false;\n    if (pred[successorIndex][0] === 'None')\n        return false;\n    return true;\n}\nfunction drawMismatches() {\n    tracks.forEach(function (read, trackIdx) {\n        if (read.type === 'read') {\n            read.sequenceNew.forEach(function (element, i) {\n                element.mismatches.forEach(function (mm) {\n                    var nodeIndex = nodeMap.get(element.nodeName);\n                    var node = nodes[nodeIndex];\n                    var x = getXCoordinateOfBaseWithinNode(node, mm.pos);\n                    var pathIndex = i;\n                    while (read.path[pathIndex].node !== nodeIndex) {\n                        pathIndex += 1;\n                    }\n                    var y = read.path[pathIndex].y;\n                    if (mm.type === 'insertion') {\n                        if (config.showSoftClips || (mm.pos !== read.firstNodeOffset || i !== 0) && (mm.pos !== read.finalNodeCoverLength || i !== read.sequenceNew.length - 1)) {\n                            drawInsertion(x - 3, y + 7, mm.seq, node.y);\n                        }\n                    } else if (mm.type === 'deletion') {\n                        var x2 = getXCoordinateOfBaseWithinNode(node, mm.pos + mm.length);\n                        drawDeletion(x, x2, y + 4, node.y);\n                    } else if (mm.type === 'substitution') {\n                        var _x = getXCoordinateOfBaseWithinNode(node, mm.pos + mm.seq.length);\n                        drawSubstitution(x + 1, _x, y + 7, node.y, mm.seq);\n                    }\n                });\n            });\n        }\n    });\n}\nfunction drawInsertion(x, y, seq, nodeY) {\n    svg.append('text').attr('x', x).attr('y', y).text('*').attr('font-family', 'Courier, \"Lucida Console\", monospace').attr('font-size', '12px').attr('fill', 'black').attr('nodeY', nodeY).on('mouseover', insertionMouseOver).on('mouseout', insertionMouseOut).append('svg:title').text(seq);\n}\nfunction drawSubstitution(x1, x2, y, nodeY, seq) {\n    svg.append('text').attr('x', x1).attr('y', y).text(seq).attr('font-family', 'Courier, \"Lucida Console\", monospace').attr('font-size', '12px').attr('fill', 'black').attr('nodeY', nodeY).attr('rightX', x2).on('mouseover', substitutionMouseOver).on('mouseout', substitutionMouseOut);\n}\nfunction drawDeletion(x1, x2, y, nodeY) {\n    svg.append('line').attr('x1', x1).attr('y1', y - 1).attr('x2', x2).attr('y2', y - 1).attr('stroke-width', 7).attr('stroke', 'grey').attr('nodeY', nodeY).on('mouseover', deletionMouseOver).on('mouseout', deletionMouseOut);\n}\nfunction insertionMouseOver() {\n    d3.select(this).attr('fill', 'red');\n    var x = Number(d3.select(this).attr('x'));\n    var y = Number(d3.select(this).attr('y'));\n    var yTop = Number(d3.select(this).attr('nodeY'));\n    svg.append('line').attr('class', 'insertionHighlight').attr('x1', x + 4).attr('y1', y - 10).attr('x2', x + 4).attr('y2', yTop + 5).attr('stroke-width', 1).attr('stroke', 'black');\n}\nfunction deletionMouseOver() {\n    d3.select(this).attr('stroke', 'red');\n    var x1 = Number(d3.select(this).attr('x1'));\n    var x2 = Number(d3.select(this).attr('x2'));\n    var y = Number(d3.select(this).attr('y1'));\n    var yTop = Number(d3.select(this).attr('nodeY'));\n    svg.append('line').attr('class', 'deletionHighlight').attr('x1', x1).attr('y1', y - 3).attr('x2', x1).attr('y2', yTop + 5).attr('stroke-width', 1).attr('stroke', 'black');\n    svg.append('line').attr('class', 'deletionHighlight').attr('x1', x2).attr('y1', y - 3).attr('x2', x2).attr('y2', yTop + 5).attr('stroke-width', 1).attr('stroke', 'black');\n}\nfunction substitutionMouseOver() {\n    d3.select(this).attr('fill', 'red');\n    var x1 = Number(d3.select(this).attr('x'));\n    var x2 = Number(d3.select(this).attr('rightX'));\n    var y = Number(d3.select(this).attr('y'));\n    var yTop = Number(d3.select(this).attr('nodeY'));\n    svg.append('line').attr('class', 'substitutionHighlight').attr('x1', x1 - 1).attr('y1', y - 7).attr('x2', x1 - 1).attr('y2', yTop + 5).attr('stroke-width', 1).attr('stroke', 'black');\n    svg.append('line').attr('class', 'substitutionHighlight').attr('x1', x2 + 1).attr('y1', y - 7).attr('x2', x2 + 1).attr('y2', yTop + 5).attr('stroke-width', 1).attr('stroke', 'black');\n}\nfunction insertionMouseOut() {\n    d3.select(this).attr('fill', 'black');\n    d3.selectAll('.insertionHighlight').remove();\n}\nfunction deletionMouseOut() {\n    d3.select(this).attr('stroke', 'grey');\n    d3.selectAll('.deletionHighlight').remove();\n}\nfunction substitutionMouseOut() {\n    d3.select(this).attr('fill', 'black');\n    d3.selectAll('.substitutionHighlight').remove();\n}","module.exports={\n  \"BACKEND_URL\": \"http://104.42.76.233:3000\",\n  \"DATA_SOURCES\": [\n    {\n      \"name\": \"snp1kg-BRCA1\",\n      \"xgFile\": \"snp1kg-BRCA1.vg.xg\",\n      \"gamIndex\": \"NA12878-BRCA1.gam.index\",\n      \"anchorTrackName\": \"17\",\n      \"useMountedPath\": false,\n      \"defaultPosition\": \"1\"\n    },\n    {\n      \"name\": \"cactus\",\n      \"xgFile\": \"cactus.vg.xg\",\n      \"gamIndex\": \"cactus-NA12879.gam.index\",\n      \"anchorTrackName\": \"ref\",\n      \"useMountedPath\": false,\n      \"defaultPosition\": \"1\"\n    },\n    {\n      \"name\": \"vg \\\"small\\\" example\",\n      \"xgFile\": \"x.vg.xg\",\n      \"gbwtFile\": \"x.vg.gbwt\",\n      \"anchorTrackName\": \"x\",\n      \"useMountedPath\": false,\n      \"defaultPosition\": \"1\"\n    }\n  ]\n}\n","module.exports={\n  \"BACKEND_URL\": \"https://api.wbeyer.com\",\n  \"DATA_SOURCES\": [\n    {\n      \"name\": \"chr22_v4\",\n      \"xgFile\": \"chr22_v4.vg.xg\",\n      \"gamIndex\": \"NA12878_mapped_v4.gam.index\",\n      \"anchorTrackName\": \"22\",\n      \"useMountedPath\": false,\n      \"defaultPosition\": \"17697661\"\n    }\n  ]\n}\n","// JSON Konstruktor für die Überprüfung ob ein Objekt JSON ist\r\nvar jsonC = {}.constructor ;\r\n\r\nvar isJSON = function(json){\r\n\tif(json && json.constructor === jsonC){\r\n\t\treturn true ;\r\n\t}else{\r\n\t\treturn false ;\r\n\t}\r\n}\r\n\r\nexports.isJSON = isJSON ;\r\n\r\n\r\nvar mergeJSON = function(json1, json2){\r\n\tvar result = null ;\r\n\tif(isJSON(json2)){\r\n\t\tresult = {} ;\r\n\t\tif(isJSON(json1)){\r\n\t\t\tfor(var key in json1){\r\n\t\t\t\tresult[key] = json1[key] ;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor(var key in json2){\r\n\t\t\tif(typeof result[key] === \"object\" && typeof json2 === \"object\"){\r\n\t\t\t\tresult[key] = mergeJSON(result[key], json2[key]) ;\r\n\t\t\t}else{\r\n\t\t\t\tresult[key] = json2[key] ;\r\n\t\t\t}\r\n\t\t}\r\n\t}else if(Array.isArray(json1) && Array.isArray(json2)){\r\n\t\tresult = json1 ;\r\n\r\n\t\tfor(var i = 0; i < json2.length; i++){\r\n\t\t\tif(result.indexOf(json2[i]) === -1){\r\n\t\t\t\tresult[result.length] = json2[i] ;\r\n\t\t\t}\r\n\t\t}\r\n\t}else{\r\n\t\tresult = json2 ;\r\n\t}\r\n\r\n\treturn result ;\r\n}\r\n\r\nexports.merge = mergeJSON ;\r\n"]}
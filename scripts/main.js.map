{"version":3,"sources":["../.tmp/scripts/node_modules/browser-pack/_prelude.js","../.tmp/scripts/app/scripts/main.js","../.tmp/scripts/app/scripts/tubemap.js","../.tmp/scripts/config.default.json","../.tmp/scripts/config.json","../.tmp/scripts/node_modules/merge-json/index.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","_interopRequireWildcard","obj","__esModule","newObj","key","Object","prototype","hasOwnProperty","default","createDropDownNoneOption","opt","document","createElement","value","innerHTML","showFileSizeWarning","$","append","MAX_UPLOAD_SIZE_DESCRIPTION","getPathNames","xgFile","isUploadedFile","ajax","type","url","BACKEND_URL","crossDomain","data","dataType","success","response","optNone","getElementById","pathNames","forEach","fn","error","responseData","textStatus","errorThrown","console","log","prepareForTubeMap","d3","select","selectAll","remove","attr","w","width","html","setAttribute","getRemoteTubeMapData","nodeID","distance","byNode","selectedIndex","gbwtFile","gamFile","val","customInputFiles","anchorTrackName","dataPath","undefined","DATA_SOURCES","ds","name","useMountedPath","graph","innerText","style","display","nodes","tubeMap","vgExtractNodes","tracks","vgExtractTracks","createTubeMap","vgExtractReads","gam","reads","create","svgID","endTime","performance","now","startTime","clearDropdownsWithFilenames","xgSelect","hasChildNodes","removeChild","lastChild","opt1","appendChild","gbwtSelect","opt2","gamFileSelect","opt3","populateDropdownsWithFilenames","xgSelectValue","options","gbwtSelectValue","gamSelectValue","xgFiles","filename","selected","gbwtFiles","gamIndices","setUpWebsocket","ws","WebSocket","replace","onmessage","message","onclose","event","setTimeout","onerror","close","_mergeJson","mergeJSON","_tubemap","CONFIG","merge","err","window","location","host","change","prop","show","hide","defaultPosition","empty","file","files","size","disabled","formData","FormData","xhr","XMLHttpRequest","responseType","onreadystatechange","readyState","status","path","open","send","onclick","position","Number","Math","max","zoomBy","checked","setMergeNodesFlag","setNodeWidthOption","setShowReadsFlag","setSoftClipsFlag","radios","getElementsByClassName","trackType","colorSet","this","setColorSet","svgN","svgData","XMLSerializer","serializeToString","svgBlob","Blob","svgUrl","URL","createObjectURL","downloadLink","href","download","body","click","onload","dsSelect","uploadOption","mountedOption","params","svg","inputNodes","JSON","parse","stringify","inputTracks","inputReads","bed","config","clickableNodesFlag","clickableNodes","hideLegendFlag","hideLegend","drawLegend","moveTrackToFirstPosition","index","unshift","splice","straightenTrack","j","nodesToInvert","currentSequence","nodeName","sequence","charAt","substr","indexOf","push","node","seq","split","reverse","join","changeTrackVisibility","trackID","id","hidden","changeExonVisibility","showExonsFlag","mergeNodesFlag","showSoftClips","showReads","nodeWidthOption","trackRectangles","trackCurves","trackCorners","trackVerticalRectangles","trackRectanglesStep3","assignments","extraLeft","extraRight","maxYCoordinate","minYCoordinate","maxXCoordinate","trackForRuler","assignColorSets","nodeMap","generateNodeMap","generateTrackIndexSequences","generateNodeWidth","generateNodeSuccessors","generateNodeOrder","reverseReversedReads","mergeNodes","numberOfNodes","numberOfTracks","generateNodeDegree","DEBUG","maxOrder","getMaxOrder","calculateTrackWidth","generateLaneAssignment","addTrackFeatures","generateNodeXCoords","generateReadOnlyNodeAttributes","placeReads","concat","generateSVGShapesFromPath","getImageDimensions","alignSVG","defineSVGPatterns","drawTrackRectangles","drawTrackCurves","drawReversalsByColor","dNodes","removeUnusedNodes","drawNodes","drawLabels","drawRuler","drawMismatches","nodesPerOrder","orderY","Map","has","order","set","y","contentHeight","get","assignReadsToNodes","incomingReads","outgoingReads","internalReads","read","idx","element","pathIdx","generateBasicPathsForReads","sortedNodes","slice","sort","compareNodesByOrder","compareReadIncomingSegmentsByComingFrom","currentY","occupiedUntil","readElement","setOccupiedUntil","maxY","compareReadOutgoingSegmentsByGoingTo","occupiedFrom","firstNodeOffset","incReadElementIndices","incRead","incReadPathElement","compareInternalReads","readIdx","currentRead","finalNodeCoverLength","heightIncrease","adjustVertically3","bottomY","calculateBottomY","elementsWithoutNode","readIndex","pathIndex","previousY","compareNoNodeReadsByPreviousY","segment","map","sequenceLength","b","segmentA","segmentB","pathIndexA","pathIndexB","nodeA","nodeB","beginDiff","pathA","pathB","idxA","idxB","track","currentNodeIndex","currentNodeIsForward","currentNode","previousNode","previousNodeIsForward","isPositive","abs","indexSequence","isForward","_j","pos","is_reverse","sequenceNew","_i","nodeWidth","mismatches","mm","getReverseComplement","temp","seqLength","s","result","tracksOrReads","allNodes","x","pixelWidth","min","zoomed","transform","k","svg2","clientWidth","parent","zoom","scaleExtent","translateExtent","on","zoomIdentity","translate","zoomFactor","minZoom","substring","parentElement","zoomTransform","translateK","translateX","translateY","transition","duration","scale","current","follower","successors","predecessors","generateNodeOrderOfSingleTrack","forwardOrder","backwardOrder","minOrder","nodeIndex","increaseOrderForAllNodes","generateNodeOrderTrackBeginning","anchorIndex","currentOrder","increment","modifiedSequence","rightIndex","leftIndex","tracksAndReads","uninvert","increaseOrderForSuccessors","isSuccessor","degree","_j2","_j3","_j4","first","second","visited","Array","fill","stack","pop","childIndex","amount","startingNode","tabuNode","newOrder","increasedOrders","queue","shift","successor","predecessor","currentX","nextX","extra","calculateExtraSpace","leftSideEdges","rightSideEdges","_i2","_i3","segmentNumber","prevSegmentPerOrderPerTrack","trackNo","lane","addToAssignment","_i4","_j5","_j6","_i5","generateSingleLaneAssignment","segmentID","compareToFromSame","getIdealLanesAndCoords","assignment","idealLane","idealY","currentLane","potentialAdjustmentValues","Set","prevNameIsNull","prevTrack","compareByIdealLane","topLane","add","adjustVertically","verticalAdjustment","minAdjustmentCost","MAX_SAFE_INTEGER","moveBy","getVerticalAdjustmentCost","adjustBy","assignmentNode","aNode","nodeStart","nodeEnd","feature","line","start","end","continue","features","allAreFour","round","freq","useColorScheme","colorScheme","haplotypeColors","getColorSet","forwardReadColors","reverseReadColors","exonColors","colorSetName","plainColors","reds","blues","greys","lightColors","generateTrackColor","highlight","getReadXStart","getXCoordinateOfBaseWithinNode","getReadXEnd","base","nodeLeftX","nodeRightX","xStart","xEnd","yStart","yEnd","trackColor","dummy","reversalFlag","orderStartX","orderEndX","_i6","createFeatureRectangle","color","laneChange","generateForwardToReverse","generateReverseToForward","nodeXStart","nodeXEnd","rectXStart","currentHighlight","co","featureXStart","featureXEnd","trackWidth","yTop","yBottom","d","corners","rectangles","rect","filter","filterObjectByAttribute","drawTrackCorners","enter","nodeMouseOver","nodeMouseOut","nodeDoubleClick","text","rulerTrackIndex","rulerTrack","markingInterval","indexOfFirstBaseInNode","indexOfFirstBase","atLeastOneMarkingDrawn","xCoordOfPreviousMarking","firstNode","drawRulerMarking","nextMarking","ceil","xCoordOfMarking","sequencePosition","xCoordinate","attribute","item","trackMouseOver","trackMouseOut","trackDoubleClick","compareCurvesByLineChanges","defs","pattern","attrs","height","patternUnits","patternTransform","myTrackCurves","curve","xMiddle","content","listeners","addEventListener","each","vg","getComputedTextLength","isCompletelyReverse","mapping","node_id","index2","myNodes","myTracks","myReads","extracted","nodeNames","firstIndex","lastIndex","edit","offset","toString","parseInt","posWithinNode","from_length","finalNodeEdit","nodeName2","pred","succ","_i7","_i8","from","mergeOffset","mergeOrigin","mergeableWithPred","_i9","mergeableWithSucc","mismatch","_i10","donor","_i11","_i12","predecessorIndex","successorIndex","trackIdx","drawInsertion","x2","drawDeletion","_x","drawSubstitution","nodeY","insertionMouseOver","insertionMouseOut","x1","substitutionMouseOver","substitutionMouseOut","deletionMouseOver","deletionMouseOut","defineProperty","jsonC","constructor","isJSON","json","json1","json2","isArray"],"mappings":"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,iBAAAA,EACAnK,EAAA0K,YAAAA,EACA1K,EAAAkK,mBAAAA,EACAlK,EAAA+J,OAAAA,EACA/J,EAAAue,eAAAA,GACAve,EAAA+E,eAAAA,GACA/E,EAAAiF,gBAAAA,GACAjF,EAAAmF,eAAAA,EACA,IAAA8K,KAAA,EACAiP,IACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEAD,IACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEAD,IACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEAD,IACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEAI,IACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEAV,MACAE,MACAC,MACAC,MACAtZ,OAAA,GACAuG,OAAA,GACA0L,GAAAxX,EAAAwX,SAAA,GACAzL,MACAI,MACAC,MACAvH,OAAA,GACAG,OAAA,GACAK,OAAA,GACAyK,OAAA,GACAC,OAAA,GACAT,OAAA,GACAkC,OAAA,GACA1C,MACAC,MACAC,MACAkB,OAAA,GACA5D,IACA+B,gBAAA,EACA9B,oBAAA,EACA6B,eAAA,EACAoQ,YAAA,EACAhQ,gBAAA,EACAD,WAAA,EACAD,eAAA,EACAmQ,gBAAA,QACAE,kBAAA,OACAC,kBAAA,QACAC,WAAA,cACApS,gBAAA,GAEAgC,MACAC,MACAC,MACAC,MACAC,MACAI,GAAA,EACAC,GAAA,EACAC,GAAA,EACAC,OAAA,GACA/C,OAAA,2BC/GAjM,EAAAJ,SACA8B,aAAA,EACAuC,eAEAE,KAAA,eACA9C,OAAA,qBACAsC,QAAA,2BACAG,gBAAA,KACAM,gBAAA,EACAiE,gBAAA,MAGAlE,KAAA,SACA9C,OAAA,eACAsC,QAAA,4BACAG,gBAAA,MACAM,gBAAA,EACAiE,gBAAA,MAGAlE,KAAA,qBACA9C,OAAA,UACAqC,SAAA,YACAI,gBAAA,IACAM,gBAAA,EACAiE,gBAAA,+BCzBArI,EAAAJ,SACA8B,YAAA,yBAEAuC,eAEAE,KAAA,qBACA9C,OAAA,UACAqC,SAAA,gBACAC,QAAA,mCACAG,gBAAA,IACAM,gBAAA,EACAiE,gBAAA,mCCVA,GAAA8e,MAAAC,YAEAC,EAAA,SAAAC,GACA,SAAAA,GAAAA,EAAAF,cAAAD,GAOAvnB,GAAAynB,OAAAA,CAGA,IAAA5f,GAAA,SAAA8f,EAAAC,GACA,GAAAhR,GAAA,IACA,IAAA6Q,EAAAG,GAAA,CAEA,GADAhR,KACA6Q,EAAAE,GACA,IAAA,GAAAlnB,KAAAknB,GACA/Q,EAAAnW,GAAAknB,EAAAlnB,EAIA,KAAA,GAAAA,KAAAmnB,GACA,gBAAAhR,GAAAnW,IAAA,gBAAAmnB,GACAhR,EAAAnW,GAAAoH,EAAA+O,EAAAnW,GAAAmnB,EAAAnnB,IAEAmW,EAAAnW,GAAAmnB,EAAAnnB,OAGA,IAAA4Z,MAAAwN,QAAAF,IAAAtN,MAAAwN,QAAAD,GAAA,CACAhR,EAAA+Q,CAEA,KAAA,GAAApoB,GAAA,EAAAA,EAAAqoB,EAAA1nB,OAAAX,KACA,IAAAqX,EAAApJ,QAAAoa,EAAAroB,MACAqX,EAAAA,EAAA1W,QAAA0nB,EAAAroB,QAIAqX,GAAAgR,CAGA,OAAAhR,GAGA5W,GAAAgI,MAAAH","file":"main.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","'use strict';\nvar _mergeJson = require('merge-json');\nvar mergeJSON = _interopRequireWildcard(_mergeJson);\nvar _tubemap = require('./tubemap');\nvar tubeMap = _interopRequireWildcard(_tubemap);\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    } else {\n        var newObj = {};\n        if (obj != null) {\n            for (var key in obj) {\n                if (Object.prototype.hasOwnProperty.call(obj, key))\n                    newObj[key] = obj[key];\n            }\n        }\n        newObj.default = obj;\n        return newObj;\n    }\n}\nvar CONFIG = require('../../config.default.json');\ntry {\n    CONFIG = mergeJSON.merge(CONFIG, require('../../config.json'));\n} catch (err) {\n}\nvar BACKEND_URL = CONFIG.BACKEND_URL || 'http://' + window.location.host;\nvar DATA_SOURCES = CONFIG.DATA_SOURCES;\nvar MAX_UPLOAD_SIZE = 5242880;\nvar MAX_UPLOAD_SIZE_DESCRIPTION = '5 MB';\nvar startTime = 0;\nvar customInputFiles = {};\n$('#dataSourceSelect').change(function () {\n    $('#distance').prop('value', '100');\n    $('#unitSelect').prop('value', '1');\n    $('#position').prop('value', '1');\n    if ($('#dataSourceSelect').val() === 'customFileUpload') {\n        $('.customData').show();\n        $('.customDataMounted').hide();\n        $('.customDataUpload').show();\n    } else if ($('#dataSourceSelect').val() === 'customMounted') {\n        $('.customData').show();\n        $('.customDataMounted').show();\n        $('.customDataUpload').hide();\n    } else {\n        $('.customData').hide();\n        $('.customDataMounted').hide();\n        $('.customDataUpload').hide();\n        DATA_SOURCES.forEach(function (ds) {\n            if (ds.name === $('#dataSourceSelect').val()) {\n                $('#position').prop('value', ds.defaultPosition);\n            }\n        });\n    }\n});\nfunction createDropDownNoneOption() {\n    var opt = document.createElement('option');\n    opt.value = 'none';\n    opt.innerHTML = 'None';\n    return opt;\n}\nfunction showFileSizeWarning() {\n    $('#alertContainer').append('<div class=\"alert alert-danger alert-dismissible fade show\" role=\"alert\">\\n      <strong>File size too big!</strong>\\n      You may only upload files with a maximum size of ' + MAX_UPLOAD_SIZE_DESCRIPTION + '.\\n      <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">\\n        <span aria-hidden=\"true\">&times;</span>\\n      </button>\\n    </div>');\n}\n$('#xgFileMounted').change(function () {\n    $('#pathNameSelect').empty();\n    if ($('#xgFileMounted').val() === 'none') {\n        $('#pathNameSelect').append(createDropDownNoneOption());\n    } else {\n        getPathNames($('#xgFileMounted').val(), false);\n    }\n});\n$('#xgFileUpload').change(function () {\n    $('#pathNameSelect').empty();\n    var file = document.getElementById('xgFileUpload').files[0];\n    if (file === undefined) {\n        $('#pathNameSelect').append(createDropDownNoneOption());\n        delete customInputFiles.xgFile;\n    } else {\n        if (file.size > MAX_UPLOAD_SIZE) {\n            $('#xgFileUpload').val('');\n            showFileSizeWarning();\n            return;\n        }\n        document.getElementById('fileUploadSpinner').style.display = 'block';\n        document.getElementById('goButton').disabled = true;\n        var formData = new FormData();\n        formData.append('xgFile', file);\n        var xhr = new XMLHttpRequest();\n        xhr.responseType = 'json';\n        xhr.onreadystatechange = function () {\n            if (xhr.readyState === 4 && xhr.status === 200) {\n                customInputFiles.xgFile = xhr.response.path;\n                document.getElementById('fileUploadSpinner').style.display = 'none';\n                document.getElementById('goButton').disabled = false;\n                getPathNames(customInputFiles.xgFile, true);\n            }\n        };\n        xhr.open('POST', BACKEND_URL + '/xgFileSubmission', true);\n        xhr.send(formData);\n    }\n});\n$('#gbwtFileUpload').change(function () {\n    var file = document.getElementById('gbwtFileUpload').files[0];\n    if (file === undefined) {\n        delete customInputFiles.gbwtFile;\n    } else {\n        if (file.size > MAX_UPLOAD_SIZE) {\n            $('#gbwtFileUpload').val('');\n            showFileSizeWarning();\n            return;\n        }\n        document.getElementById('fileUploadSpinner').style.display = 'block';\n        document.getElementById('goButton').disabled = true;\n        var formData = new FormData();\n        formData.append('gbwtFile', file);\n        var xhr = new XMLHttpRequest();\n        xhr.responseType = 'json';\n        xhr.onreadystatechange = function () {\n            if (xhr.readyState === 4 && xhr.status === 200) {\n                customInputFiles.gbwtFile = xhr.response.path;\n                document.getElementById('fileUploadSpinner').style.display = 'none';\n                document.getElementById('goButton').disabled = false;\n            }\n        };\n        xhr.open('POST', BACKEND_URL + '/gbwtFileSubmission', true);\n        xhr.send(formData);\n    }\n});\n$('#gamFileUpload').change(function () {\n    var file = document.getElementById('gamFileUpload').files[0];\n    if (file === undefined) {\n        delete customInputFiles.gamFile;\n    } else {\n        if (file.size > MAX_UPLOAD_SIZE) {\n            $('#gamFileUpload').val('');\n            showFileSizeWarning();\n            return;\n        }\n        document.getElementById('fileUploadSpinner').style.display = 'block';\n        document.getElementById('goButton').disabled = true;\n        var formData = new FormData();\n        formData.append('gamFile', file);\n        var xhr = new XMLHttpRequest();\n        xhr.responseType = 'json';\n        xhr.onreadystatechange = function () {\n            if (xhr.readyState === 4 && xhr.status === 200) {\n                customInputFiles.gamFile = xhr.response.path;\n                document.getElementById('fileUploadSpinner').style.display = 'none';\n                document.getElementById('goButton').disabled = false;\n            }\n        };\n        xhr.open('POST', BACKEND_URL + '/gamFileSubmission', true);\n        xhr.send(formData);\n    }\n});\nfunction getPathNames(xgFile, isUploadedFile) {\n    $.ajax({\n        type: 'POST',\n        url: BACKEND_URL + '/getPathNames',\n        crossDomain: true,\n        data: {\n            xgFile: xgFile,\n            isUploadedFile: isUploadedFile\n        },\n        dataType: 'json',\n        success: function success(response) {\n            var pathNameSelect = document.getElementById('pathNameSelect');\n            var optNone = document.createElement('option');\n            optNone.value = 'none';\n            optNone.innerHTML = 'None';\n            $('#pathNameSelect').append(optNone);\n            response.pathNames.forEach(function (fn) {\n                var opt = document.createElement('option');\n                $('#pathNameSelect').append('<option value=\"' + fn + '\" selected>' + fn + '</option>');\n            });\n        },\n        error: function error(responseData, textStatus, errorThrown) {\n            console.log('POST failed.');\n        }\n    });\n}\ndocument.getElementById('reloadButton').onclick = function () {\n    populateDropdownsWithFilenames();\n};\ndocument.getElementById('goButton').onclick = function () {\n    startTime = performance.now();\n    prepareForTubeMap();\n};\ndocument.getElementById('goLeftButton').onclick = function () {\n    var position = Number(document.getElementById('position').value);\n    var distance = Number(document.getElementById('distance').value);\n    document.getElementById('position').value = Math.max(position - distance, 0);\n    prepareForTubeMap();\n};\nvar zoomFactor = 2;\ndocument.getElementById('zoomInButton').onclick = function () {\n    tubeMap.zoomBy(zoomFactor);\n};\ndocument.getElementById('zoomOutButton').onclick = function () {\n    tubeMap.zoomBy(1 / zoomFactor);\n};\ndocument.getElementById('goRightButton').onclick = function () {\n    var position = Number(document.getElementById('position').value);\n    var distance = Number(document.getElementById('distance').value);\n    document.getElementById('position').value = position + distance;\n    prepareForTubeMap();\n};\nfunction prepareForTubeMap() {\n    d3.select('#svg').selectAll('*').remove();\n    d3.select('#svg').attr('width', 100);\n    var w = $('#tubeMapSVG').width() / 2;\n    $('#legendDiv').html('');\n    document.getElementById('loader').setAttribute('style', 'left:' + (w - 25) + 'px');\n    return getRemoteTubeMapData();\n}\nfunction getRemoteTubeMapData() {\n    var nodeID = document.getElementById('position').value;\n    var distance = document.getElementById('distance').value;\n    var byNode = document.getElementById('unitSelect').selectedIndex !== 0;\n    var xgFile = void 0;\n    var gbwtFile = void 0;\n    var gamFile = void 0;\n    if ($('#dataSourceSelect').val() === 'customFileUpload') {\n        xgFile = customInputFiles.xgFile;\n        gbwtFile = customInputFiles.gbwtFile;\n        gamFile = customInputFiles.gamFile;\n    } else {\n        xgFile = $('#xgFileMounted').val();\n        gbwtFile = $('#gbwtFileMounted').val();\n        gamFile = $('#gamFileMounted').val();\n    }\n    var anchorTrackName = $('#pathNameSelect').val();\n    var dataPath = customInputFiles.xgFile === undefined ? 'mounted' : 'upload';\n    DATA_SOURCES.forEach(function (ds) {\n        if (ds.name === $('#dataSourceSelect').val()) {\n            xgFile = ds.xgFile;\n            gbwtFile = ds.gbwtFile;\n            gamFile = ds.gamFile;\n            anchorTrackName = ds.anchorTrackName;\n            dataPath = ds.useMountedPath ? 'mounted' : 'default';\n        }\n    });\n    return $.ajax({\n        type: 'POST',\n        url: BACKEND_URL + '/getChunkedData',\n        crossDomain: true,\n        data: {\n            nodeID: nodeID,\n            distance: distance,\n            byNode: byNode,\n            xgFile: xgFile,\n            gbwtFile: gbwtFile,\n            gamFile: gamFile,\n            anchorTrackName: anchorTrackName,\n            dataPath: dataPath\n        },\n        dataType: 'json',\n        success: function success(response) {\n            if (response.graph === undefined) {\n                document.getElementById('inputError').innerText = response.error;\n                document.getElementById('loader').style.display = 'none';\n            } else {\n                document.getElementById('inputError').innerText = '';\n                var nodes = tubeMap.vgExtractNodes(response.graph);\n                var tracks = tubeMap.vgExtractTracks(response.graph);\n                var reads = tubeMap.vgExtractReads(nodes, tracks, response.gam);\n                createTubeMap(nodes, tracks, reads);\n            }\n        },\n        error: function error(responseData, textStatus, errorThrown) {\n            console.log('POST failed.');\n        }\n    });\n}\nfunction createTubeMap(nodes, tracks, reads) {\n    tubeMap.create({\n        svgID: '#svg',\n        nodes: nodes,\n        tracks: tracks,\n        reads: reads\n    });\n    document.getElementById('loader').style.display = 'none';\n    var endTime = performance.now();\n    console.log('Took ' + (endTime - startTime) + ' milliseconds.');\n}\ndocument.getElementById('redundantNodesCheckbox').onclick = function () {\n    if (document.getElementById('redundantNodesCheckbox').checked === true) {\n        tubeMap.setMergeNodesFlag(true);\n    } else {\n        tubeMap.setMergeNodesFlag(false);\n    }\n};\ndocument.getElementById('compressedViewCheckbox').onclick = function () {\n    if (document.getElementById('compressedViewCheckbox').checked === true) {\n        tubeMap.setNodeWidthOption(1);\n    } else {\n        tubeMap.setNodeWidthOption(0);\n    }\n};\ndocument.getElementById('showReadsCheckbox').onclick = function () {\n    if (document.getElementById('showReadsCheckbox').checked === true) {\n        tubeMap.setShowReadsFlag(true);\n    } else {\n        tubeMap.setShowReadsFlag(false);\n    }\n};\ndocument.getElementById('softClipsCheckbox').onclick = function () {\n    if (document.getElementById('softClipsCheckbox').checked === true) {\n        tubeMap.setSoftClipsFlag(true);\n    } else {\n        tubeMap.setSoftClipsFlag(false);\n    }\n};\nvar radios = document.getElementsByClassName('colorRadio');\nvar _loop = function _loop(i) {\n    var trackType = void 0;\n    switch (radios[i].name) {\n    case 'colorsHaplo':\n        trackType = 'haplotypeColors';\n        break;\n    case 'colorsFwReads':\n        trackType = 'forwardReadColors';\n        break;\n    case 'colorsRevReads':\n        trackType = 'reverseReadColors';\n        break;\n    default:\n        console.log('Could not find track type in color set assignment');\n    }\n    var colorSet = void 0;\n    switch (radios[i].value) {\n    case 'option1':\n        colorSet = 'plainColors';\n        break;\n    case 'option2':\n        colorSet = 'greys';\n        break;\n    case 'option3':\n        colorSet = 'reds';\n        break;\n    case 'option4':\n        colorSet = 'blues';\n        break;\n    case 'option5':\n        colorSet = 'lightColors';\n        break;\n    default:\n        console.log('Could not find color type in color set assignment');\n    }\n    radios[i].onclick = function () {\n        console.log(this);\n        tubeMap.setColorSet(trackType, colorSet);\n    };\n};\nfor (var i = 0; i < radios.length; i += 1) {\n    _loop(i);\n}\ndocument.getElementById('downloadButton').onclick = function () {\n    var svgN = document.getElementById('svg');\n    var svgData = new XMLSerializer().serializeToString(svgN);\n    var svgBlob = new Blob([svgData], { type: 'image/svg+xml;charset=utf-8' });\n    var svgUrl = URL.createObjectURL(svgBlob);\n    var downloadLink = document.createElement('a');\n    downloadLink.href = svgUrl;\n    downloadLink.download = 'graph.svg';\n    document.body.appendChild(downloadLink);\n    downloadLink.click();\n    document.body.removeChild(downloadLink);\n};\nfunction clearDropdownsWithFilenames() {\n    var xgSelect = document.getElementById('xgFileMounted');\n    while (xgSelect.hasChildNodes()) {\n        xgSelect.removeChild(xgSelect.lastChild);\n    }\n    var opt1 = document.createElement('option');\n    opt1.value = 'none';\n    opt1.innerHTML = 'None';\n    xgSelect.appendChild(opt1);\n    var gbwtSelect = document.getElementById('gbwtFileMounted');\n    while (gbwtSelect.hasChildNodes()) {\n        gbwtSelect.removeChild(gbwtSelect.lastChild);\n    }\n    var opt2 = document.createElement('option');\n    opt2.value = 'none';\n    opt2.innerHTML = 'None';\n    gbwtSelect.appendChild(opt2);\n    var gamFileSelect = document.getElementById('gamFileMounted');\n    while (gamFileSelect.hasChildNodes()) {\n        gamFileSelect.removeChild(gamFileSelect.lastChild);\n    }\n    var opt3 = document.createElement('option');\n    opt3.value = 'none';\n    opt3.innerHTML = 'None';\n    gamFileSelect.appendChild(opt3);\n}\nfunction populateDropdownsWithFilenames() {\n    $.ajax({\n        type: 'POST',\n        url: BACKEND_URL + '/getFilenames',\n        crossDomain: true,\n        success: function success(response) {\n            var xgSelect = document.getElementById('xgFileMounted');\n            var xgSelectValue = xgSelect.options[xgSelect.selectedIndex].value;\n            var gbwtSelect = document.getElementById('gbwtFileMounted');\n            var gbwtSelectValue = gbwtSelect.options[gbwtSelect.selectedIndex].value;\n            var gamFileSelect = document.getElementById('gamFileMounted');\n            var gamSelectValue = gamFileSelect.options[gamFileSelect.selectedIndex].value;\n            clearDropdownsWithFilenames();\n            response.xgFiles.forEach(function (filename) {\n                var opt = document.createElement('option');\n                opt.value = filename;\n                opt.innerHTML = filename;\n                if (opt.value === xgSelectValue) {\n                    opt.selected = 'true';\n                }\n                xgSelect.appendChild(opt);\n            });\n            response.gbwtFiles.forEach(function (filename) {\n                var opt = document.createElement('option');\n                opt.value = filename;\n                opt.innerHTML = filename;\n                if (opt.value === gbwtSelectValue) {\n                    opt.selected = 'true';\n                }\n                gbwtSelect.appendChild(opt);\n            });\n            response.gamIndices.forEach(function (filename) {\n                var opt = document.createElement('option');\n                opt.value = filename;\n                opt.innerHTML = filename;\n                if (opt.value === gamSelectValue) {\n                    opt.selected = 'true';\n                }\n                gamFileSelect.appendChild(opt);\n            });\n        },\n        error: function error(responseData, textStatus, errorThrown) {\n            console.log('POST failed.');\n        }\n    });\n}\nfunction setUpWebsocket() {\n    var ws = new WebSocket(BACKEND_URL.replace(/^http/, 'ws'));\n    ws.onmessage = function (message) {\n        console.log('Message received');\n        populateDropdownsWithFilenames();\n    };\n    ws.onclose = function (event) {\n        setTimeout(setUpWebsocket, 1000);\n    };\n    ws.onerror = function (event) {\n        ws.close();\n    };\n}\nwindow.onload = function () {\n    $('.customData').hide();\n    $('.customDataMounted').hide();\n    $('.customDataUpload').hide();\n    var dsSelect = document.getElementById('dataSourceSelect');\n    DATA_SOURCES.forEach(function (ds) {\n        var opt = document.createElement('option');\n        opt.value = ds.name;\n        opt.innerHTML = ds.name;\n        dsSelect.appendChild(opt);\n    });\n    var uploadOption = document.createElement('option');\n    uploadOption.value = 'customFileUpload';\n    uploadOption.innerHTML = 'custom (file upload)';\n    dsSelect.appendChild(uploadOption);\n    var mountedOption = document.createElement('option');\n    mountedOption.value = 'customMounted';\n    mountedOption.innerHTML = 'custom (mounted files)';\n    dsSelect.appendChild(mountedOption);\n    document.getElementById('goButton').click();\n    populateDropdownsWithFilenames();\n    document.getElementById('redundantNodesCheckbox').checked = true;\n    document.getElementById('compressedViewCheckbox').checked = false;\n    document.getElementById('showReadsCheckbox').checked = true;\n    document.getElementById('softClipsCheckbox').checked = true;\n    document.getElementById('colorsHaplo2').checked = true;\n    document.getElementById('colorsFwReads3').checked = true;\n    document.getElementById('colorsRevReads4').checked = true;\n    setUpWebsocket();\n};","'use strict';\nObject.defineProperty(exports, '__esModule', { value: true });\nexports.create = create;\nexports.changeTrackVisibility = changeTrackVisibility;\nexports.changeExonVisibility = changeExonVisibility;\nexports.setMergeNodesFlag = setMergeNodesFlag;\nexports.setSoftClipsFlag = setSoftClipsFlag;\nexports.setShowReadsFlag = setShowReadsFlag;\nexports.setColorSet = setColorSet;\nexports.setNodeWidthOption = setNodeWidthOption;\nexports.zoomBy = zoomBy;\nexports.useColorScheme = useColorScheme;\nexports.vgExtractNodes = vgExtractNodes;\nexports.vgExtractTracks = vgExtractTracks;\nexports.vgExtractReads = vgExtractReads;\nvar DEBUG = false;\nvar greys = [\n        '#d9d9d9',\n        '#bdbdbd',\n        '#969696',\n        '#737373',\n        '#525252',\n        '#252525',\n        '#000000'\n    ];\nvar blues = [\n        '#c6dbef',\n        '#9ecae1',\n        '#6baed6',\n        '#4292c6',\n        '#2171b5',\n        '#08519c',\n        '#08306b'\n    ];\nvar reds = [\n        '#fcbba1',\n        '#fc9272',\n        '#fb6a4a',\n        '#ef3b2c',\n        '#cb181d',\n        '#a50f15',\n        '#67000d'\n    ];\nvar plainColors = [\n        '#1f77b4',\n        '#ff7f0e',\n        '#2ca02c',\n        '#d62728',\n        '#9467bd',\n        '#8c564b',\n        '#e377c2',\n        '#7f7f7f',\n        '#bcbd22',\n        '#17becf'\n    ];\nvar lightColors = [\n        '#ABCCE3',\n        '#FFCFA5',\n        '#B0DBB0',\n        '#F0AEAE',\n        '#D7C6E6',\n        '#C6ABA5',\n        '#F4CCE8',\n        '#CFCFCF',\n        '#E6E6AC',\n        '#A8E7ED'\n    ];\nvar haplotypeColors = [];\nvar forwardReadColors = [];\nvar reverseReadColors = [];\nvar exonColors = [];\nvar svgID = void 0;\nvar svg = void 0;\nvar zoom = exports.zoom = void 0;\nvar inputNodes = [];\nvar inputTracks = [];\nvar inputReads = [];\nvar nodes = void 0;\nvar tracks = void 0;\nvar reads = void 0;\nvar numberOfNodes = void 0;\nvar numberOfTracks = void 0;\nvar nodeMap = void 0;\nvar nodesPerOrder = void 0;\nvar assignments = [];\nvar extraLeft = [];\nvar extraRight = [];\nvar maxOrder = void 0;\nvar config = {\n        mergeNodesFlag: true,\n        clickableNodesFlag: false,\n        showExonsFlag: false,\n        colorScheme: 0,\n        nodeWidthOption: 0,\n        showReads: true,\n        showSoftClips: true,\n        haplotypeColors: 'greys',\n        forwardReadColors: 'reds',\n        reverseReadColors: 'blues',\n        exonColors: 'lightColors',\n        hideLegendFlag: false\n    };\nvar trackRectangles = [];\nvar trackCurves = [];\nvar trackCorners = [];\nvar trackVerticalRectangles = [];\nvar trackRectanglesStep3 = [];\nvar maxYCoordinate = 0;\nvar minYCoordinate = 0;\nvar maxXCoordinate = 0;\nvar trackForRuler = void 0;\nvar bed = void 0;\nfunction create(params) {\n    svgID = params.svgID;\n    svg = d3.select(params.svgID);\n    inputNodes = JSON.parse(JSON.stringify(params.nodes));\n    inputTracks = JSON.parse(JSON.stringify(params.tracks));\n    inputReads = params.reads || null;\n    bed = params.bed || null;\n    config.clickableNodesFlag = params.clickableNodes || false;\n    config.hideLegendFlag = params.hideLegend || false;\n    var tr = createTubeMap();\n    if (!config.hideLegendFlag)\n        drawLegend(tr);\n}\nfunction moveTrackToFirstPosition(index) {\n    inputTracks.unshift(inputTracks[index]);\n    inputTracks.splice(index + 1, 1);\n    straightenTrack(0);\n}\nfunction straightenTrack(index) {\n    var i = void 0;\n    var j = void 0;\n    var nodesToInvert = [];\n    var currentSequence = void 0;\n    var nodeName = void 0;\n    currentSequence = inputTracks[index].sequence;\n    for (i = 0; i < currentSequence.length; i += 1) {\n        if (currentSequence[i].charAt(0) === '-') {\n            nodeName = currentSequence[i].substr(1);\n            if (currentSequence.indexOf(nodeName) === -1 || currentSequence.indexOf(nodeName) > i) {\n                nodesToInvert.push(currentSequence[i].substr(1));\n            }\n        }\n    }\n    for (i = 0; i < inputTracks.length; i += 1) {\n        currentSequence = inputTracks[i].sequence;\n        for (j = 0; j < currentSequence.length; j += 1) {\n            if (currentSequence[j].charAt(0) !== '-') {\n                if (nodesToInvert.indexOf(currentSequence[j]) !== -1) {\n                    currentSequence[j] = '-' + currentSequence[j];\n                }\n            } else if (nodesToInvert.indexOf(currentSequence[j].substr(1)) !== -1) {\n                currentSequence[j] = currentSequence[j].substr(1);\n            }\n        }\n    }\n    inputNodes.forEach(function (node) {\n        if (nodesToInvert.indexOf(node.name) !== -1) {\n            node.seq = node.seq.split('').reverse().join('');\n        }\n    });\n}\nfunction changeTrackVisibility(trackID) {\n    var i = 0;\n    while (i < inputTracks.length && inputTracks[i].id !== trackID) {\n        i += 1;\n    }\n    if (i < inputTracks.length) {\n        if (inputTracks[i].hasOwnProperty('hidden')) {\n            inputTracks[i].hidden = !inputTracks[i].hidden;\n        } else {\n            inputTracks[i].hidden = true;\n        }\n    }\n    createTubeMap();\n}\nfunction changeExonVisibility() {\n    config.showExonsFlag = !config.showExonsFlag;\n    createTubeMap();\n}\nfunction setMergeNodesFlag(value) {\n    if (config.mergeNodesFlag !== value) {\n        config.mergeNodesFlag = value;\n        svg = d3.select(svgID);\n        createTubeMap();\n    }\n}\nfunction setSoftClipsFlag(value) {\n    if (config.showSoftClips !== value) {\n        config.showSoftClips = value;\n        svg = d3.select(svgID);\n        createTubeMap();\n    }\n}\nfunction setShowReadsFlag(value) {\n    if (config.showReads !== value) {\n        config.showReads = value;\n        svg = d3.select(svgID);\n        createTubeMap();\n    }\n}\nfunction setColorSet(trackType, colorSet) {\n    config[trackType] = colorSet;\n    var tr = createTubeMap();\n    if (!config.hideLegendFlag)\n        drawLegend(tr);\n}\nfunction setNodeWidthOption(value) {\n    if (value === 0 || value === 1 || value === 2) {\n        if (config.nodeWidthOption !== value) {\n            config.nodeWidthOption = value;\n            if (svg !== undefined) {\n                svg = d3.select(svgID);\n                createTubeMap();\n            }\n        }\n    }\n}\nfunction createTubeMap() {\n    trackRectangles = [];\n    trackCurves = [];\n    trackCorners = [];\n    trackVerticalRectangles = [];\n    trackRectanglesStep3 = [];\n    assignments = [];\n    extraLeft = [];\n    extraRight = [];\n    maxYCoordinate = 0;\n    minYCoordinate = 0;\n    maxXCoordinate = 0;\n    trackForRuler = undefined;\n    svg = d3.select(svgID);\n    svg.selectAll('*').remove();\n    nodes = JSON.parse(JSON.stringify(inputNodes));\n    tracks = JSON.parse(JSON.stringify(inputTracks));\n    reads = JSON.parse(JSON.stringify(inputReads));\n    assignColorSets();\n    for (var i = tracks.length - 1; i >= 0; i -= 1) {\n        if (!tracks[i].hasOwnProperty('type')) {\n            tracks[i].type = 'haplo';\n        }\n        if (tracks[i].hasOwnProperty('hidden')) {\n            if (tracks[i].hidden === true) {\n                tracks.splice(i, 1);\n            }\n        }\n        if (tracks[i].hasOwnProperty('indexOfFirstBase')) {\n            trackForRuler = tracks[i].name;\n        }\n    }\n    nodeMap = generateNodeMap(nodes);\n    generateTrackIndexSequences(tracks);\n    if (reads && config.showReads)\n        generateTrackIndexSequences(reads);\n    generateNodeWidth();\n    if (reads && config.mergeNodesFlag) {\n        generateNodeSuccessors();\n        generateNodeOrder();\n        if (reads && config.showReads)\n            reverseReversedReads();\n        mergeNodes();\n        nodeMap = generateNodeMap(nodes);\n        generateNodeWidth();\n        generateTrackIndexSequences(tracks);\n        if (reads && config.showReads)\n            generateTrackIndexSequences(reads);\n    }\n    numberOfNodes = nodes.length;\n    numberOfTracks = tracks.length;\n    generateNodeSuccessors();\n    generateNodeDegree();\n    if (DEBUG)\n        console.log(numberOfNodes + ' nodes.');\n    generateNodeOrder();\n    maxOrder = getMaxOrder();\n    calculateTrackWidth(tracks);\n    generateLaneAssignment();\n    if (config.showExonsFlag === true && bed !== null)\n        addTrackFeatures();\n    generateNodeXCoords();\n    if (reads && config.showReads) {\n        generateReadOnlyNodeAttributes();\n        reverseReversedReads();\n        generateTrackIndexSequences(reads);\n        placeReads();\n        tracks = tracks.concat(reads);\n    }\n    generateSVGShapesFromPath(nodes, tracks);\n    if (DEBUG) {\n        console.log('Tracks:');\n        console.log(tracks);\n        console.log('Nodes:');\n        console.log(nodes);\n        console.log('Lane assignment:');\n        console.log(assignments);\n    }\n    getImageDimensions();\n    alignSVG(nodes, tracks);\n    defineSVGPatterns();\n    drawTrackRectangles(trackRectangles);\n    drawTrackCurves();\n    drawReversalsByColor(trackCorners, trackVerticalRectangles);\n    drawTrackRectangles(trackRectanglesStep3);\n    drawTrackRectangles(trackRectangles, 'read');\n    drawTrackCurves('read');\n    var dNodes = removeUnusedNodes(nodes);\n    drawNodes(dNodes);\n    drawReversalsByColor(trackCorners, trackVerticalRectangles, 'read');\n    if (config.nodeWidthOption === 0)\n        drawLabels(dNodes);\n    if (trackForRuler !== undefined)\n        drawRuler();\n    if (config.nodeWidthOption === 0)\n        drawMismatches();\n    if (DEBUG) {\n        console.log('number of tracks: ' + numberOfTracks);\n        console.log('number of nodes: ' + numberOfNodes);\n    }\n    return tracks;\n}\nfunction generateReadOnlyNodeAttributes() {\n    nodesPerOrder = [];\n    for (var i = 0; i <= maxOrder; i += 1) {\n        nodesPerOrder[i] = [];\n    }\n    var orderY = new Map();\n    nodes.forEach(function (node) {\n        if (node.hasOwnProperty('order') && node.hasOwnProperty('y')) {\n            if (orderY.has(node.order)) {\n                orderY.set(node.order, Math.max(node.y + node.contentHeight, orderY.get(node.order)));\n            } else {\n                orderY.set(node.order, node.y + node.contentHeight);\n            }\n        }\n    });\n    nodes.forEach(function (node, i) {\n        if (node.hasOwnProperty('order') && !node.hasOwnProperty('y')) {\n            node.y = orderY.get(node.order) + 25;\n            node.contentHeight = 0;\n            nodesPerOrder[node.order].push(i);\n        }\n    });\n}\nfunction assignReadsToNodes() {\n    nodes.forEach(function (node) {\n        node.incomingReads = [];\n        node.outgoingReads = [];\n        node.internalReads = [];\n    });\n    reads.forEach(function (read, idx) {\n        read.width = 7;\n        if (read.path.length === 1) {\n            nodes[read.path[0].node].internalReads.push(idx);\n        } else {\n            read.path.forEach(function (element, pathIdx) {\n                if (pathIdx === 0) {\n                    nodes[read.path[0].node].outgoingReads.push([\n                        idx,\n                        pathIdx\n                    ]);\n                } else if (read.path[pathIdx].node !== null) {\n                    nodes[read.path[pathIdx].node].incomingReads.push([\n                        idx,\n                        pathIdx\n                    ]);\n                }\n            });\n        }\n    });\n}\nfunction removeNonPathNodesFromReads() {\n    reads.forEach(function (read) {\n        for (var i = read.sequence.length - 1; i >= 0; i -= 1) {\n            var nodeName = read.sequence[i];\n            if (nodeName.charAt(0) === '-') {\n                nodeName = nodeName.substr(1);\n            }\n            if (!nodeMap.has(nodeName) || nodes[nodeMap.get(nodeName)].degree === 0) {\n                read.sequence.splice(i, 1);\n            }\n        }\n    });\n}\nfunction placeReads() {\n    generateBasicPathsForReads();\n    assignReadsToNodes();\n    var sortedNodes = nodes.slice();\n    sortedNodes.sort(compareNodesByOrder);\n    sortedNodes.forEach(function (node) {\n        node.incomingReads.sort(compareReadIncomingSegmentsByComingFrom);\n        var currentY = node.y + node.contentHeight;\n        var occupiedUntil = new Map();\n        node.incomingReads.forEach(function (readElement) {\n            reads[readElement[0]].path[readElement[1]].y = currentY;\n            setOccupiedUntil(occupiedUntil, reads[readElement[0]], readElement[1], currentY, node);\n            currentY += 7;\n        });\n        var maxY = currentY;\n        node.outgoingReads.sort(compareReadOutgoingSegmentsByGoingTo);\n        var occupiedFrom = new Map();\n        currentY = node.y + node.contentHeight;\n        node.outgoingReads.forEach(function (readElement) {\n            reads[readElement[0]].path[readElement[1]].y = currentY;\n            occupiedFrom.set(currentY, reads[readElement[0]].firstNodeOffset);\n            if (!occupiedUntil.has(currentY) || occupiedUntil.get(currentY) + 1 < reads[readElement[0]].firstNodeOffset) {\n                currentY += 7;\n                maxY = Math.max(maxY, currentY);\n            } else {\n                occupiedUntil.set(currentY, 0);\n                node.incomingReads.forEach(function (incReadElementIndices) {\n                    var incRead = reads[incReadElementIndices[0]];\n                    var incReadPathElement = incRead.path[incReadElementIndices[1]];\n                    if (incReadPathElement.y >= currentY) {\n                        incReadPathElement.y += 7;\n                        setOccupiedUntil(occupiedUntil, incRead, incReadElementIndices[1], incReadPathElement.y, node);\n                    }\n                });\n                currentY += 7;\n                maxY += 7;\n            }\n        });\n        node.internalReads.sort(compareInternalReads);\n        node.internalReads.forEach(function (readIdx) {\n            var currentRead = reads[readIdx];\n            currentY = node.y + node.contentHeight;\n            while (currentRead.firstNodeOffset < occupiedUntil.get(currentY) + 2 || currentRead.finalNodeCoverLength > occupiedFrom.get(currentY) - 3) {\n                currentY += 7;\n            }\n            currentRead.path[0].y = currentY;\n            occupiedUntil.set(currentY, currentRead.finalNodeCoverLength);\n            maxY = Math.max(maxY, currentY);\n        });\n        var heightIncrease = maxY - node.y - node.contentHeight;\n        node.contentHeight += heightIncrease;\n        adjustVertically3(node, heightIncrease);\n    });\n    var bottomY = calculateBottomY();\n    var elementsWithoutNode = [];\n    reads.forEach(function (read, idx) {\n        read.path.forEach(function (element, pathIdx) {\n            if (!element.hasOwnProperty('y')) {\n                elementsWithoutNode.push({\n                    readIndex: idx,\n                    pathIndex: pathIdx,\n                    previousY: reads[idx].path[pathIdx - 1].y\n                });\n            }\n        });\n    });\n    elementsWithoutNode.sort(compareNoNodeReadsByPreviousY);\n    elementsWithoutNode.forEach(function (element) {\n        var segment = reads[element.readIndex].path[element.pathIndex];\n        segment.y = bottomY[segment.order];\n        bottomY[segment.order] += reads[element.readIndex].width;\n    });\n    if (DEBUG) {\n        console.log('Reads:');\n        console.log(reads);\n    }\n}\nfunction setOccupiedUntil(map, read, pathIndex, y, node) {\n    if (pathIndex === read.path.length - 1) {\n        map.set(y, read.finalNodeCoverLength);\n    } else {\n        map.set(y, node.sequenceLength);\n    }\n}\nfunction compareNoNodeReadsByPreviousY(a, b) {\n    var segmentA = reads[a.readIndex].path[a.pathIndex];\n    var segmentB = reads[b.readIndex].path[b.pathIndex];\n    if (segmentA.order === segmentB.order) {\n        return a.previousY - b.previousY;\n    }\n    return segmentA.order - segmentB.order;\n}\nfunction compareReadOutgoingSegmentsByGoingTo(a, b) {\n    var pathIndexA = a[1];\n    var pathIndexB = b[1];\n    var nodeA = nodes[reads[a[0]].path[pathIndexA].node];\n    var nodeB = nodes[reads[b[0]].path[pathIndexB].node];\n    while (nodeA !== null && nodeB !== null && nodeA === nodeB) {\n        if (pathIndexA < reads[a[0]].path.length - 1) {\n            pathIndexA += 1;\n            while (reads[a[0]].path[pathIndexA].node === null) {\n                pathIndexA += 1;\n            }\n            nodeA = nodes[reads[a[0]].path[pathIndexA].node];\n        } else {\n            nodeA = null;\n        }\n        if (pathIndexB < reads[b[0]].path.length - 1) {\n            pathIndexB += 1;\n            while (reads[b[0]].path[pathIndexB].node === null) {\n                pathIndexB += 1;\n            }\n            nodeB = nodes[reads[b[0]].path[pathIndexB].node];\n        } else {\n            nodeB = null;\n        }\n    }\n    if (nodeA !== null) {\n        if (nodeB !== null)\n            return compareNodesByOrder(nodeA, nodeB);\n        return 1;\n    }\n    if (nodeB !== null)\n        return -1;\n    var beginDiff = reads[a[0]].firstNodeOffset - reads[b[0]].firstNodeOffset;\n    if (beginDiff !== 0)\n        return beginDiff;\n    return reads[a[0]].finalNodeCoverLength - reads[b[0]].finalNodeCoverLength;\n}\nfunction compareReadIncomingSegmentsByComingFrom(a, b) {\n    var pathA = reads[a[0]].path[a[1] - 1];\n    var pathB = reads[b[0]].path[b[1] - 1];\n    if (pathA.hasOwnProperty('y')) {\n        if (pathB.hasOwnProperty('y')) {\n            return pathA.y - pathB.y;\n        }\n        return -1;\n    }\n    if (pathB.hasOwnProperty('y')) {\n        return 1;\n    }\n    return compareReadIncomingSegmentsByComingFrom([\n        a[0],\n        a[1] - 1\n    ], [\n        b[0],\n        b[1] - 1\n    ]);\n}\nfunction compareInternalReads(idxA, idxB) {\n    var a = reads[idxA];\n    var b = reads[idxB];\n    if (a.firstNodeOffset < b.firstNodeOffset)\n        return -1;\n    else if (a.firstNodeOffset > b.firstNodeOffset)\n        return 1;\n    if (a.finalNodeCoverLength < b.finalNodeCoverLength)\n        return -1;\n    else if (a.finalNodeCoverLength > b.finalNodeCoverLength)\n        return 1;\n    return 0;\n}\nfunction calculateBottomY() {\n    var bottomY = [];\n    for (var i = 0; i <= maxOrder; i += 1) {\n        bottomY.push(0);\n    }\n    nodes.forEach(function (node) {\n        bottomY[node.order] = Math.max(bottomY[node.order], node.y + node.contentHeight + 20);\n    });\n    tracks.forEach(function (track) {\n        track.path.forEach(function (element) {\n            bottomY[element.order] = Math.max(bottomY[element.order], element.y + track.width);\n        });\n    });\n    return bottomY;\n}\nfunction generateBasicPathsForReads() {\n    var currentNodeIndex = void 0;\n    var currentNodeIsForward = void 0;\n    var currentNode = void 0;\n    var previousNode = void 0;\n    var previousNodeIsForward = void 0;\n    var isPositive = function isPositive(n) {\n        return ((n = +n) || 1 / n) >= 0;\n    };\n    reads.forEach(function (read) {\n        currentNodeIndex = Math.abs(read.indexSequence[0]);\n        currentNodeIsForward = isPositive(read.indexSequence[0]);\n        currentNode = nodes[currentNodeIndex];\n        read.path = [];\n        read.path.push({\n            order: currentNode.order,\n            isForward: currentNodeIsForward,\n            node: currentNodeIndex\n        });\n        for (var i = 1; i < read.sequence.length; i += 1) {\n            previousNode = currentNode;\n            previousNodeIsForward = currentNodeIsForward;\n            currentNodeIndex = Math.abs(read.indexSequence[i]);\n            currentNodeIsForward = isPositive(read.indexSequence[i]);\n            currentNode = nodes[currentNodeIndex];\n            if (currentNode.order > previousNode.order) {\n                if (!previousNodeIsForward) {\n                    read.path.push({\n                        order: previousNode.order,\n                        isForward: true,\n                        node: null\n                    });\n                }\n                for (var j = previousNode.order + 1; j < currentNode.order; j += 1) {\n                    read.path.push({\n                        order: j,\n                        isForward: true,\n                        node: null\n                    });\n                }\n                if (!currentNodeIsForward) {\n                    read.path.push({\n                        order: currentNode.order,\n                        isForward: true,\n                        node: null\n                    });\n                    read.path.push({\n                        order: currentNode.order,\n                        isForward: false,\n                        node: currentNodeIndex\n                    });\n                } else {\n                    read.path.push({\n                        order: currentNode.order,\n                        isForward: true,\n                        node: currentNodeIndex\n                    });\n                }\n            } else if (currentNode.order < previousNode.order) {\n                if (previousNodeIsForward) {\n                    read.path.push({\n                        order: previousNode.order,\n                        isForward: false,\n                        node: null\n                    });\n                }\n                for (var _j = previousNode.order - 1; _j > currentNode.order; _j -= 1) {\n                    read.path.push({\n                        order: _j,\n                        isForward: false,\n                        node: null\n                    });\n                }\n                if (currentNodeIsForward) {\n                    read.path.push({\n                        order: currentNode.order,\n                        isForward: false,\n                        node: null\n                    });\n                    read.path.push({\n                        order: currentNode.order,\n                        isForward: true,\n                        node: currentNodeIndex\n                    });\n                } else {\n                    read.path.push({\n                        order: currentNode.order,\n                        isForward: false,\n                        node: currentNodeIndex\n                    });\n                }\n            } else {\n                if (currentNodeIsForward !== previousNodeIsForward) {\n                    read.path.push({\n                        order: currentNode.order,\n                        isForward: currentNodeIsForward,\n                        node: currentNodeIndex\n                    });\n                } else {\n                    read.path.push({\n                        order: currentNode.order,\n                        isForward: !currentNodeIsForward,\n                        node: null\n                    });\n                    read.path.push({\n                        order: currentNode.order,\n                        isForward: currentNodeIsForward,\n                        node: currentNodeIndex\n                    });\n                }\n            }\n        }\n    });\n}\nfunction reverseReversedReads() {\n    reads.forEach(function (read) {\n        var pos = 0;\n        while (pos < read.sequence.length && read.sequence[pos].charAt(0) === '-') {\n            pos += 1;\n        }\n        if (pos === read.sequence.length) {\n            read.is_reverse = true;\n            read.sequence = read.sequence.reverse();\n            for (var i = 0; i < read.sequence.length; i += 1) {\n                read.sequence[i] = read.sequence[i].substr(1);\n            }\n            read.sequenceNew = read.sequenceNew.reverse();\n            var _loop = function _loop(_i) {\n                read.sequenceNew[_i].nodeName = read.sequenceNew[_i].nodeName.substr(1);\n                var nodeWidth = nodes[nodeMap.get(read.sequenceNew[_i].nodeName)].width;\n                read.sequenceNew[_i].mismatches.forEach(function (mm) {\n                    if (mm.type === 'insertion') {\n                        mm.pos = nodeWidth - mm.pos;\n                        mm.seq = getReverseComplement(mm.seq);\n                    } else if (mm.type === 'deletion') {\n                        mm.pos = nodeWidth - mm.pos - mm.length;\n                    } else if (mm.type === 'substitution') {\n                        mm.pos = nodeWidth - mm.pos - mm.seq.length;\n                        mm.seq = getReverseComplement(mm.seq);\n                    }\n                    if (mm.hasOwnProperty('seq')) {\n                        mm.seq = mm.seq.split('').reverse().join('');\n                    }\n                });\n            };\n            for (var _i = 0; _i < read.sequenceNew.length; _i += 1) {\n                _loop(_i);\n            }\n            var temp = read.firstNodeOffset;\n            var seqLength = nodes[nodeMap.get(read.sequence[0])].sequenceLength;\n            read.firstNodeOffset = seqLength - read.finalNodeCoverLength;\n            seqLength = nodes[nodeMap.get(read.sequence[read.sequence.length - 1])].sequenceLength;\n            read.finalNodeCoverLength = seqLength - temp;\n        }\n    });\n}\nfunction getReverseComplement(s) {\n    var result = '';\n    for (var i = s.length - 1; i >= 0; i -= 1) {\n        switch (s.charAt(i)) {\n        case 'A':\n            result += 'T';\n            break;\n        case 'T':\n            result += 'A';\n            break;\n        case 'C':\n            result += 'G';\n            break;\n        case 'G':\n            result += 'C';\n            break;\n        default:\n            result += 'N';\n        }\n    }\n    return result;\n}\nfunction generateTrackIndexSequencesNEW(tracksOrReads) {\n    tracksOrReads.forEach(function (track) {\n        track.indexSequence = [];\n        track.sequence.forEach(function (edit) {\n            if (edit.nodeName.charAt(0) === '-') {\n                track.indexSequence.push(-nodeMap.get(edit.nodeName.substr(1)));\n            } else {\n                track.indexSequence.push(nodeMap.get(edit.nodeName));\n            }\n        });\n    });\n}\nfunction generateTrackIndexSequences(tracksOrReads) {\n    tracksOrReads.forEach(function (track) {\n        track.indexSequence = [];\n        track.sequence.forEach(function (nodeName) {\n            if (nodeName.charAt(0) === '-') {\n                track.indexSequence.push(-nodeMap.get(nodeName.substr(1)));\n            } else {\n                track.indexSequence.push(nodeMap.get(nodeName));\n            }\n        });\n    });\n}\nfunction removeUnusedNodes(allNodes) {\n    var dNodes = allNodes.slice(0);\n    var i = void 0;\n    for (i = dNodes.length - 1; i >= 0; i -= 1) {\n        if (!dNodes[i].hasOwnProperty('x')) {\n            dNodes.splice(i, 1);\n        }\n    }\n    return dNodes;\n}\nfunction getImageDimensions() {\n    maxXCoordinate = -99;\n    minYCoordinate = 99;\n    maxYCoordinate = -99;\n    nodes.forEach(function (node) {\n        if (node.hasOwnProperty('x')) {\n            maxXCoordinate = Math.max(maxXCoordinate, node.x + 20 + node.pixelWidth);\n        }\n        if (node.hasOwnProperty('y')) {\n            minYCoordinate = Math.min(minYCoordinate, node.y - 10);\n            maxYCoordinate = Math.max(maxYCoordinate, node.y + node.contentHeight + 10);\n        }\n    });\n    tracks.forEach(function (track) {\n        track.path.forEach(function (segment) {\n            maxYCoordinate = Math.max(maxYCoordinate, segment.y + track.width);\n            minYCoordinate = Math.min(minYCoordinate, segment.y);\n        });\n    });\n}\nfunction alignSVG() {\n    svg.attr('height', maxYCoordinate - minYCoordinate + 50);\n    svg.attr('width', $(svgID).parent().width());\n    function zoomed() {\n        var transform = d3.event.transform;\n        transform.y = (25 - minYCoordinate) * transform.k;\n        svg.attr('transform', transform);\n        var svg2 = d3.select(svgID);\n        svg2.attr('height', (maxYCoordinate - minYCoordinate + 50) * d3.event.transform.k);\n        svg2.attr('width', document.getElementById('tubeMapSVG').clientWidth);\n    }\n    exports.zoom = zoom = d3.zoom().scaleExtent([\n        $(svgID).parent().width() / maxXCoordinate,\n        8\n    ]).translateExtent([\n        [\n            -1,\n            minYCoordinate - 25\n        ],\n        [\n            maxXCoordinate + 2,\n            maxYCoordinate + 25\n        ]\n    ]).on('zoom', zoomed);\n    svg = svg.call(zoom).on('dblclick.zoom', null).append('g');\n    d3.select(svgID).call(zoom.transform, d3.zoomIdentity.translate(0, 25 - minYCoordinate));\n}\nfunction zoomBy(zoomFactor) {\n    var minZoom = $(svgID).parent().width() / maxXCoordinate;\n    var maxZoom = 8;\n    var width = document.getElementById(svgID.substring(1)).parentElement.clientWidth;\n    var transform = d3.zoomTransform(d3.select(svgID).node());\n    var translateK = Math.min(maxZoom, Math.max(transform.k * zoomFactor, minZoom));\n    var translateX = width / 2 - (width / 2 - transform.x) * translateK / transform.k;\n    translateX = Math.min(translateX, 1 * translateK);\n    translateX = Math.max(translateX, width - (maxXCoordinate + 2) * translateK);\n    var translateY = (25 - minYCoordinate) * translateK;\n    d3.select(svgID).transition().duration(750).call(zoom.transform, d3.zoomIdentity.translate(translateX, translateY).scale(translateK));\n}\nfunction generateNodeMap() {\n    nodeMap = new Map();\n    nodes.forEach(function (node, index) {\n        nodeMap.set(node.name, index);\n    });\n    return nodeMap;\n}\nfunction generateNodeSuccessors() {\n    var current = void 0;\n    var follower = void 0;\n    nodes.forEach(function (node) {\n        node.successors = [];\n        node.predecessors = [];\n    });\n    tracks.forEach(function (track) {\n        for (var i = 0; i < track.indexSequence.length - 1; i += 1) {\n            current = Math.abs(track.indexSequence[i]);\n            follower = Math.abs(track.indexSequence[i + 1]);\n            if (nodes[current].successors.indexOf(follower) === -1) {\n                nodes[current].successors.push(follower);\n            }\n            if (nodes[follower].predecessors.indexOf(current) === -1) {\n                nodes[follower].predecessors.push(current);\n            }\n        }\n    });\n    if (reads && config.showReads) {\n        reads.forEach(function (track) {\n            for (var i = 0; i < track.indexSequence.length - 1; i += 1) {\n                current = Math.abs(track.indexSequence[i]);\n                follower = Math.abs(track.indexSequence[i + 1]);\n                if (nodes[current].successors.indexOf(follower) === -1) {\n                    nodes[current].successors.push(follower);\n                }\n                if (nodes[follower].predecessors.indexOf(current) === -1) {\n                    nodes[follower].predecessors.push(current);\n                }\n            }\n        });\n    }\n}\nfunction generateNodeOrderOfSingleTrack(sequence) {\n    var forwardOrder = 0;\n    var backwardOrder = 0;\n    var currentNode = void 0;\n    var minOrder = 0;\n    sequence.forEach(function (nodeIndex) {\n        if (nodeIndex < 0) {\n            currentNode = nodes[Math.abs(nodeIndex)];\n            if (!currentNode.hasOwnProperty('order')) {\n                currentNode.order = backwardOrder;\n            }\n            if (currentNode.order < minOrder)\n                minOrder = currentNode.order;\n            forwardOrder = currentNode.order;\n            backwardOrder = currentNode.order - 1;\n        } else {\n            currentNode = nodes[nodeIndex];\n            if (!currentNode.hasOwnProperty('order')) {\n                currentNode.order = forwardOrder;\n            }\n            forwardOrder = currentNode.order + 1;\n            backwardOrder = currentNode.order;\n        }\n    });\n    if (minOrder < 0) {\n        increaseOrderForAllNodes(-minOrder);\n    }\n}\nfunction generateNodeOrderTrackBeginning(sequence) {\n    var anchorIndex = 0;\n    var currentOrder = void 0;\n    var currentNode = void 0;\n    var minOrder = 0;\n    var increment = void 0;\n    while (anchorIndex < sequence.length && !nodes[Math.abs(sequence[anchorIndex])].hasOwnProperty('order')) {\n        anchorIndex += 1;\n    }\n    if (anchorIndex >= sequence.length) {\n        return null;\n    }\n    if (sequence[anchorIndex] >= 0) {\n        currentOrder = nodes[sequence[anchorIndex]].order - 1;\n        increment = -1;\n    } else {\n        currentOrder = nodes[-sequence[anchorIndex]].order + 1;\n        increment = 1;\n    }\n    for (var j = anchorIndex - 1; j >= 0; j -= 1) {\n        currentNode = nodes[Math.abs(sequence[j])];\n        if (!currentNode.hasOwnProperty('order')) {\n            currentNode.order = currentOrder;\n            minOrder = Math.min(minOrder, currentOrder);\n            currentOrder += increment;\n        }\n    }\n    if (minOrder < 0) {\n        increaseOrderForAllNodes(-minOrder);\n    }\n    return anchorIndex;\n}\nfunction generateNodeOrder() {\n    var modifiedSequence = void 0;\n    var currentOrder = void 0;\n    var currentNode = void 0;\n    var rightIndex = void 0;\n    var leftIndex = void 0;\n    var minOrder = 0;\n    var tracksAndReads = void 0;\n    if (reads && config.showReads)\n        tracksAndReads = tracks.concat(reads);\n    else\n        tracksAndReads = tracks;\n    nodes.forEach(function (node) {\n        delete node.order;\n    });\n    generateNodeOrderOfSingleTrack(tracks[0].indexSequence);\n    for (var i = 1; i < tracksAndReads.length; i += 1) {\n        if (DEBUG)\n            console.log('generating order for track ' + (i + 1));\n        rightIndex = generateNodeOrderTrackBeginning(tracksAndReads[i].indexSequence);\n        if (rightIndex === null) {\n            tracksAndReads.splice(i, 1);\n            reads.splice(i - tracks.length, 1);\n            i -= 1;\n            continue;\n        }\n        modifiedSequence = uninvert(tracksAndReads[i].indexSequence);\n        while (rightIndex < modifiedSequence.length) {\n            leftIndex = rightIndex;\n            rightIndex += 1;\n            while (rightIndex < modifiedSequence.length && !nodes[modifiedSequence[rightIndex]].hasOwnProperty('order')) {\n                rightIndex += 1;\n            }\n            if (rightIndex < modifiedSequence.length) {\n                currentOrder = nodes[modifiedSequence[leftIndex]].order + 1;\n                for (var j = leftIndex + 1; j < rightIndex; j += 1) {\n                    nodes[modifiedSequence[j]].order = currentOrder;\n                    currentOrder += 1;\n                }\n                if (nodes[modifiedSequence[rightIndex]].order > nodes[modifiedSequence[leftIndex]].order) {\n                    if (nodes[modifiedSequence[rightIndex]].order < currentOrder) {\n                        increaseOrderForSuccessors(modifiedSequence[rightIndex], modifiedSequence[rightIndex - 1], currentOrder);\n                    }\n                } else {\n                    if (tracksAndReads[i].indexSequence[rightIndex] >= 0 && !isSuccessor(modifiedSequence[rightIndex], modifiedSequence[leftIndex])) {\n                        increaseOrderForSuccessors(modifiedSequence[rightIndex], modifiedSequence[rightIndex - 1], currentOrder);\n                    } else {\n                        if (tracksAndReads[i].sequence[leftIndex] < 0 || nodes[modifiedSequence[leftIndex + 1]].degree < 2 && nodes[modifiedSequence[rightIndex]].order < nodes[modifiedSequence[leftIndex]].order) {\n                            currentOrder = nodes[modifiedSequence[leftIndex]].order - 1;\n                            for (var _j2 = leftIndex + 1; _j2 < rightIndex; _j2 += 1) {\n                                nodes[modifiedSequence[_j2]].order = currentOrder;\n                                currentOrder -= 1;\n                            }\n                        }\n                    }\n                }\n            } else {\n                if (tracksAndReads[i].sequence[leftIndex] >= 0) {\n                    currentOrder = nodes[modifiedSequence[leftIndex]].order + 1;\n                    for (var _j3 = leftIndex + 1; _j3 < modifiedSequence.length; _j3 += 1) {\n                        currentNode = nodes[modifiedSequence[_j3]];\n                        if (!currentNode.hasOwnProperty('order')) {\n                            currentNode.order = currentOrder;\n                            currentOrder += 1;\n                        }\n                    }\n                } else {\n                    currentOrder = nodes[modifiedSequence[leftIndex]].order - 1;\n                    for (var _j4 = leftIndex + 1; _j4 < modifiedSequence.length; _j4 += 1) {\n                        currentNode = nodes[modifiedSequence[_j4]];\n                        if (!currentNode.hasOwnProperty('order')) {\n                            currentNode.order = currentOrder;\n                            minOrder = Math.min(minOrder, currentOrder);\n                            currentOrder -= 1;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    if (minOrder < 0)\n        increaseOrderForAllNodes(-minOrder);\n}\nfunction isSuccessor(first, second) {\n    var visited = new Array(numberOfNodes).fill(false);\n    var stack = [];\n    stack.push(first);\n    visited[first] = true;\n    while (stack.length > 0) {\n        var current = stack.pop();\n        if (current === second)\n            return true;\n        for (var i = 0; i < nodes[current].successors.length; i += 1) {\n            var childIndex = nodes[current].successors[i];\n            if (!visited[childIndex]) {\n                visited[childIndex] = true;\n                stack.push(childIndex);\n            }\n        }\n    }\n    return false;\n}\nfunction getMaxOrder() {\n    var max = -1;\n    nodes.forEach(function (node) {\n        if (node.hasOwnProperty('order') && node.order > max)\n            max = node.order;\n    });\n    return max;\n}\nfunction uninvert(sequence) {\n    var result = [];\n    for (var i = 0; i < sequence.length; i += 1) {\n        if (sequence[i] >= 0) {\n            result.push(sequence[i]);\n        } else {\n            result.push(-sequence[i]);\n        }\n    }\n    return result;\n}\nfunction increaseOrderForAllNodes(amount) {\n    nodes.forEach(function (node) {\n        if (node.hasOwnProperty('order'))\n            node.order += amount;\n    });\n}\nfunction increaseOrderForSuccessors(startingNode, tabuNode, newOrder) {\n    var increasedOrders = new Map();\n    var queue = [];\n    queue.push([\n        startingNode,\n        newOrder\n    ]);\n    var _loop2 = function _loop2() {\n        var current = queue.shift();\n        var currentNode = current[0];\n        var currentOrder = current[1];\n        if (nodes[currentNode].hasOwnProperty('order') && nodes[currentNode].order < currentOrder) {\n            if (!increasedOrders.has(currentNode) || increasedOrders.get(currentNode) < currentOrder) {\n                increasedOrders.set(currentNode, currentOrder);\n                nodes[currentNode].successors.forEach(function (successor) {\n                    if (nodes[successor].order > nodes[currentNode].order && successor !== tabuNode) {\n                        queue.push([\n                            successor,\n                            currentOrder + 1\n                        ]);\n                    }\n                });\n                if (currentNode !== startingNode) {\n                    nodes[currentNode].predecessors.forEach(function (predecessor) {\n                        if (nodes[predecessor].order > currentNode.order && predecessor !== tabuNode) {\n                            queue.push([\n                                predecessor,\n                                currentOrder + 1\n                            ]);\n                        }\n                    });\n                }\n            }\n        }\n    };\n    while (queue.length > 0) {\n        _loop2();\n    }\n    increasedOrders.forEach(function (value, key) {\n        nodes[key].order = value;\n    });\n}\nfunction generateNodeDegree() {\n    nodes.forEach(function (node) {\n        node.tracks = [];\n    });\n    tracks.forEach(function (track) {\n        track.indexSequence.forEach(function (nodeIndex) {\n            nodes[Math.abs(nodeIndex)].tracks.push(track.id);\n        });\n    });\n    nodes.forEach(function (node) {\n        if (node.hasOwnProperty('tracks'))\n            node.degree = node.tracks.length;\n    });\n}\nfunction switchNodeOrientation() {\n    var toSwitch = new Map();\n    var nodeName = void 0;\n    var prevNode = void 0;\n    var nextNode = void 0;\n    var currentNode = void 0;\n    for (var i = 1; i < tracks.length; i += 1) {\n        for (var j = 0; j < tracks[i].sequence.length; j += 1) {\n            nodeName = tracks[i].sequence[j];\n            if (nodeName.charAt(0) === '-')\n                nodeName = nodeName.substr(1);\n            currentNode = nodes[nodeMap.get(nodeName)];\n            if (tracks[0].sequence.indexOf(nodeName) === -1) {\n                if (j > 0) {\n                    if (tracks[i].sequence[j - 1].charAt(0) !== '-') {\n                        prevNode = nodes[nodeMap.get(tracks[i].sequence[j - 1])];\n                    } else {\n                        prevNode = nodes[nodeMap.get(tracks[i].sequence[j - 1].substr(1))];\n                    }\n                }\n                if (j < tracks[i].sequence.length - 1) {\n                    if (tracks[i].sequence[j + 1].charAt(0) !== '-') {\n                        nextNode = nodes[nodeMap.get(tracks[i].sequence[j + 1])];\n                    } else {\n                        nextNode = nodes[nodeMap.get(tracks[i].sequence[j + 1].substr(1))];\n                    }\n                }\n                if ((j === 0 || prevNode.order < currentNode.order) && (j === tracks[i].sequence.length - 1 || currentNode.order < nextNode.order)) {\n                    if (!toSwitch.has(nodeName))\n                        toSwitch.set(nodeName, 0);\n                    if (tracks[i].sequence[j].charAt(0) === '-') {\n                        toSwitch.set(nodeName, toSwitch.get(nodeName) + 1);\n                    } else {\n                        toSwitch.set(nodeName, toSwitch.get(nodeName) - 1);\n                    }\n                }\n                if ((j === 0 || prevNode.order > currentNode.order) && (j === tracks[i].sequence.length - 1 || currentNode.order > nextNode.order)) {\n                    if (!toSwitch.has(nodeName))\n                        toSwitch.set(nodeName, 0);\n                    if (tracks[i].sequence[j].charAt(0) === '-') {\n                        toSwitch.set(nodeName, toSwitch.get(nodeName) - 1);\n                    } else {\n                        toSwitch.set(nodeName, toSwitch.get(nodeName) + 1);\n                    }\n                }\n            }\n        }\n    }\n    tracks.forEach(function (track, trackIndex) {\n        track.sequence.forEach(function (node, nodeIndex) {\n            nodeName = node;\n            if (nodeName.charAt(0) === '-')\n                nodeName = nodeName.substr(1);\n            if (toSwitch.has(nodeName) && toSwitch.get(nodeName) > 0) {\n                if (node.charAt(0) === '-') {\n                    tracks[trackIndex].sequence[nodeIndex] = node.substr(1);\n                } else {\n                    tracks[trackIndex].sequence[nodeIndex] = '-' + node;\n                }\n            }\n        });\n    });\n    toSwitch.forEach(function (value, key) {\n        if (value > 0) {\n            currentNode = nodeMap.get(key);\n            nodes[currentNode].seq = nodes[currentNode].seq.split('').reverse().join('');\n        }\n    });\n}\nfunction generateNodeXCoords() {\n    var currentX = 0;\n    var nextX = 20;\n    var currentOrder = -1;\n    var sortedNodes = nodes.slice();\n    sortedNodes.sort(compareNodesByOrder);\n    var extra = calculateExtraSpace();\n    sortedNodes.forEach(function (node) {\n        if (node.hasOwnProperty('order')) {\n            if (node.order > currentOrder) {\n                currentOrder = node.order;\n                currentX = nextX + 10 * extra[node.order];\n            }\n            node.x = currentX;\n            nextX = Math.max(nextX, currentX + 40 + node.pixelWidth);\n        }\n    });\n}\nfunction calculateExtraSpace() {\n    var leftSideEdges = [];\n    var rightSideEdges = [];\n    var extra = [];\n    for (var i = 0; i <= maxOrder; i += 1) {\n        leftSideEdges.push(0);\n        rightSideEdges.push(0);\n    }\n    tracks.forEach(function (track) {\n        for (var _i2 = 1; _i2 < track.path.length; _i2 += 1) {\n            if (track.path[_i2].order === track.path[_i2 - 1].order) {\n                if (track.path[_i2].isForward === true) {\n                    leftSideEdges[track.path[_i2].order] += 1;\n                } else {\n                    rightSideEdges[track.path[_i2].order] += 1;\n                }\n            }\n        }\n    });\n    extra.push(Math.max(0, leftSideEdges[0] - 1));\n    for (var _i3 = 1; _i3 <= maxOrder; _i3 += 1) {\n        extra.push(Math.max(0, leftSideEdges[_i3] - 1) + Math.max(0, rightSideEdges[_i3 - 1] - 1));\n    }\n    return extra;\n}\nfunction generateLaneAssignment() {\n    var segmentNumber = void 0;\n    var currentNodeIndex = void 0;\n    var currentNodeIsForward = void 0;\n    var currentNode = void 0;\n    var previousNode = void 0;\n    var previousNodeIsForward = void 0;\n    var prevSegmentPerOrderPerTrack = [];\n    var isPositive = function isPositive(n) {\n        return ((n = +n) || 1 / n) >= 0;\n    };\n    for (var i = 0; i <= maxOrder; i += 1) {\n        assignments[i] = [];\n        prevSegmentPerOrderPerTrack[i] = [];\n        for (var j = 0; j < numberOfTracks; j += 1) {\n            prevSegmentPerOrderPerTrack[i][j] = null;\n        }\n    }\n    tracks.forEach(function (track, trackNo) {\n        currentNodeIndex = Math.abs(track.indexSequence[0]);\n        currentNodeIsForward = isPositive(track.indexSequence[0]);\n        currentNode = nodes[currentNodeIndex];\n        track.path = [];\n        track.path.push({\n            order: currentNode.order,\n            lane: null,\n            isForward: currentNodeIsForward,\n            node: currentNodeIndex\n        });\n        addToAssignment(currentNode.order, currentNodeIndex, trackNo, 0, prevSegmentPerOrderPerTrack);\n        segmentNumber = 1;\n        for (var _i4 = 1; _i4 < track.sequence.length; _i4 += 1) {\n            previousNode = currentNode;\n            previousNodeIsForward = currentNodeIsForward;\n            currentNodeIndex = Math.abs(track.indexSequence[_i4]);\n            currentNodeIsForward = isPositive(track.indexSequence[_i4]);\n            currentNode = nodes[currentNodeIndex];\n            if (currentNode.order > previousNode.order) {\n                if (!previousNodeIsForward) {\n                    track.path.push({\n                        order: previousNode.order,\n                        lane: null,\n                        isForward: true,\n                        node: null\n                    });\n                    addToAssignment(previousNode.order, null, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                }\n                for (var _j5 = previousNode.order + 1; _j5 < currentNode.order; _j5 += 1) {\n                    track.path.push({\n                        order: _j5,\n                        lane: null,\n                        isForward: true,\n                        node: null\n                    });\n                    addToAssignment(_j5, null, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                }\n                if (!currentNodeIsForward) {\n                    track.path.push({\n                        order: currentNode.order,\n                        lane: null,\n                        isForward: true,\n                        node: null\n                    });\n                    addToAssignment(currentNode.order, null, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                    track.path.push({\n                        order: currentNode.order,\n                        lane: null,\n                        isForward: false,\n                        node: currentNodeIndex\n                    });\n                    addToAssignment(currentNode.order, currentNodeIndex, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                } else {\n                    track.path.push({\n                        order: currentNode.order,\n                        lane: null,\n                        isForward: true,\n                        node: currentNodeIndex\n                    });\n                    addToAssignment(currentNode.order, currentNodeIndex, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                }\n            } else if (currentNode.order < previousNode.order) {\n                if (previousNodeIsForward) {\n                    track.path.push({\n                        order: previousNode.order,\n                        lane: null,\n                        isForward: false,\n                        node: null\n                    });\n                    addToAssignment(previousNode.order, null, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                }\n                for (var _j6 = previousNode.order - 1; _j6 > currentNode.order; _j6 -= 1) {\n                    track.path.push({\n                        order: _j6,\n                        lane: null,\n                        isForward: false,\n                        node: null\n                    });\n                    addToAssignment(_j6, null, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                }\n                if (currentNodeIsForward) {\n                    track.path.push({\n                        order: currentNode.order,\n                        lane: null,\n                        isForward: false,\n                        node: null\n                    });\n                    addToAssignment(currentNode.order, null, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                    track.path.push({\n                        order: currentNode.order,\n                        lane: null,\n                        isForward: true,\n                        node: currentNodeIndex\n                    });\n                    addToAssignment(currentNode.order, currentNodeIndex, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                } else {\n                    track.path.push({\n                        order: currentNode.order,\n                        lane: null,\n                        isForward: false,\n                        node: currentNodeIndex\n                    });\n                    addToAssignment(currentNode.order, currentNodeIndex, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                }\n            } else {\n                if (currentNodeIsForward !== previousNodeIsForward) {\n                    track.path.push({\n                        order: currentNode.order,\n                        lane: null,\n                        isForward: currentNodeIsForward,\n                        node: currentNodeIndex\n                    });\n                    addToAssignment(currentNode.order, currentNodeIndex, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                } else {\n                    track.path.push({\n                        order: currentNode.order,\n                        lane: null,\n                        isForward: !currentNodeIsForward,\n                        node: null\n                    });\n                    addToAssignment(currentNode.order, null, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                    track.path.push({\n                        order: currentNode.order,\n                        lane: null,\n                        isForward: currentNodeIsForward,\n                        node: currentNodeIndex\n                    });\n                    addToAssignment(currentNode.order, currentNodeIndex, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                }\n            }\n        }\n    });\n    for (var _i5 = 0; _i5 <= maxOrder; _i5 += 1) {\n        generateSingleLaneAssignment(assignments[_i5], _i5);\n    }\n}\nfunction addToAssignment(order, nodeIndex, trackNo, segmentID, prevSegmentPerOrderPerTrack) {\n    var compareToFromSame = prevSegmentPerOrderPerTrack[order][trackNo];\n    if (nodeIndex === null) {\n        assignments[order].push({\n            type: 'single',\n            node: null,\n            tracks: [{\n                    trackID: trackNo,\n                    segmentID: segmentID,\n                    compareToFromSame: compareToFromSame\n                }]\n        });\n        prevSegmentPerOrderPerTrack[order][trackNo] = assignments[order][assignments[order].length - 1].tracks[0];\n    } else {\n        for (var i = 0; i < assignments[order].length; i += 1) {\n            if (assignments[order][i].node === nodeIndex) {\n                assignments[order][i].type = 'multiple';\n                assignments[order][i].tracks.push({\n                    trackID: trackNo,\n                    segmentID: segmentID,\n                    compareToFromSame: compareToFromSame\n                });\n                prevSegmentPerOrderPerTrack[order][trackNo] = assignments[order][i].tracks[assignments[order][i].tracks.length - 1];\n                return;\n            }\n        }\n        assignments[order].push({\n            type: 'single',\n            node: nodeIndex,\n            tracks: [{\n                    trackID: trackNo,\n                    segmentID: segmentID,\n                    compareToFromSame: compareToFromSame\n                }]\n        });\n        prevSegmentPerOrderPerTrack[order][trackNo] = assignments[order][assignments[order].length - 1].tracks[0];\n    }\n}\nfunction getIdealLanesAndCoords(assignment, order) {\n    var index = void 0;\n    assignment.forEach(function (node) {\n        node.idealLane = 0;\n        node.tracks.forEach(function (track) {\n            if (track.segmentID === 0) {\n                track.idealLane = track.trackID;\n                track.idealY = null;\n            } else {\n                if (tracks[track.trackID].path[track.segmentID - 1].order === order - 1) {\n                    track.idealLane = tracks[track.trackID].path[track.segmentID - 1].lane;\n                    track.idealY = tracks[track.trackID].path[track.segmentID - 1].y;\n                } else if (track.segmentID < tracks[track.trackID].path.length - 1 && tracks[track.trackID].path[track.segmentID + 1].order === order - 1) {\n                    track.idealLane = tracks[track.trackID].path[track.segmentID + 1].lane;\n                    track.idealY = tracks[track.trackID].path[track.segmentID + 1].y;\n                } else {\n                    index = track.segmentID - 1;\n                    while (index >= 0 && tracks[track.trackID].path[index].order !== order - 1) {\n                        index -= 1;\n                    }\n                    if (index < 0) {\n                        track.idealLane = track.trackID;\n                        track.idealY = null;\n                    } else {\n                        track.idealLane = tracks[track.trackID].path[index].lane;\n                        track.idealY = tracks[track.trackID].path[index].y;\n                    }\n                }\n            }\n            node.idealLane += track.idealLane;\n        });\n        node.idealLane /= node.tracks.length;\n    });\n}\nfunction generateSingleLaneAssignment(assignment, order) {\n    var currentLane = 0;\n    var potentialAdjustmentValues = new Set();\n    var currentY = 20;\n    var prevNameIsNull = false;\n    var prevTrack = -1;\n    getIdealLanesAndCoords(assignment, order);\n    assignment.sort(compareByIdealLane);\n    assignment.forEach(function (node) {\n        if (node.node !== null) {\n            nodes[node.node].topLane = currentLane;\n            if (prevNameIsNull)\n                currentY -= 10;\n            nodes[node.node].y = currentY;\n            nodes[node.node].contentHeight = 0;\n            prevNameIsNull = false;\n        } else {\n            if (prevNameIsNull)\n                currentY -= 25;\n            else if (currentY > 20)\n                currentY -= 10;\n            prevNameIsNull = true;\n        }\n        node.tracks.sort(compareByIdealLane);\n        node.tracks.forEach(function (track) {\n            track.lane = currentLane;\n            if (track.trackID === prevTrack && node.node === null && prevNameIsNull) {\n                currentY += 10;\n            }\n            tracks[track.trackID].path[track.segmentID].lane = currentLane;\n            tracks[track.trackID].path[track.segmentID].y = currentY;\n            if (track.idealY !== null) {\n                potentialAdjustmentValues.add(track.idealY - currentY);\n            }\n            currentLane += 1;\n            currentY += tracks[track.trackID].width;\n            if (node.node !== null) {\n                nodes[node.node].contentHeight += tracks[track.trackID].width;\n            }\n            prevTrack = track.trackID;\n        });\n        currentY += 25;\n    });\n    adjustVertically(assignment, potentialAdjustmentValues);\n}\nfunction adjustVertically(assignment, potentialAdjustmentValues) {\n    var verticalAdjustment = 0;\n    var minAdjustmentCost = Number.MAX_SAFE_INTEGER;\n    potentialAdjustmentValues.forEach(function (moveBy) {\n        if (getVerticalAdjustmentCost(assignment, moveBy) < minAdjustmentCost) {\n            minAdjustmentCost = getVerticalAdjustmentCost(assignment, moveBy);\n            verticalAdjustment = moveBy;\n        }\n    });\n    assignment.forEach(function (node) {\n        if (node.node !== null) {\n            nodes[node.node].y += verticalAdjustment;\n        }\n        node.tracks.forEach(function (track) {\n            tracks[track.trackID].path[track.segmentID].y += verticalAdjustment;\n        });\n    });\n}\nfunction adjustVertically3(node, adjustBy) {\n    if (node.hasOwnProperty('order')) {\n        assignments[node.order].forEach(function (assignmentNode) {\n            if (assignmentNode.node !== null) {\n                var aNode = nodes[assignmentNode.node];\n                if (aNode !== node && aNode.y > node.y) {\n                    aNode.y += adjustBy;\n                    assignmentNode.tracks.forEach(function (track) {\n                        tracks[track.trackID].path[track.segmentID].y += adjustBy;\n                    });\n                }\n            } else {\n                assignmentNode.tracks.forEach(function (track) {\n                    if (tracks[track.trackID].path[track.segmentID].y >= node.y) {\n                        tracks[track.trackID].path[track.segmentID].y += adjustBy;\n                    }\n                });\n            }\n        });\n        if (nodesPerOrder[node.order].length > 0) {\n            nodesPerOrder[node.order].forEach(function (nodeIndex) {\n                if (nodes[nodeIndex] !== node && nodes[nodeIndex].y > node.y) {\n                    nodes[nodeIndex].y += adjustBy;\n                }\n            });\n        }\n    }\n}\nfunction getVerticalAdjustmentCost(assignment, moveBy) {\n    var result = 0;\n    assignment.forEach(function (node) {\n        node.tracks.forEach(function (track) {\n            if (track.idealY !== null && tracks[track.trackID].type !== 'read') {\n                result += Math.abs(track.idealY - moveBy - tracks[track.trackID].path[track.segmentID].y) * tracks[track.trackID].width;\n            }\n        });\n    });\n    return result;\n}\nfunction compareByIdealLane(a, b) {\n    if (a.hasOwnProperty('idealLane')) {\n        if (b.hasOwnProperty('idealLane')) {\n            if (a.idealLane < b.idealLane)\n                return -1;\n            else if (a.idealLane > b.idealLane)\n                return 1;\n            return 0;\n        }\n        return -1;\n    }\n    if (b.hasOwnProperty('idealLane')) {\n        return 1;\n    }\n    return 0;\n}\nfunction compareNodesByOrder(a, b) {\n    if (a === null) {\n        if (b === null)\n            return 0;\n        return -1;\n    }\n    if (b === null)\n        return 1;\n    if (a.hasOwnProperty('order')) {\n        if (b.hasOwnProperty('order')) {\n            if (a.order < b.order)\n                return -1;\n            else if (a.order > b.order)\n                return 1;\n            if (a.hasOwnProperty('y') && b.hasOwnProperty('y')) {\n                if (a.y < b.y)\n                    return -1;\n                else if (a.y > b.y)\n                    return 1;\n            }\n            return 0;\n        }\n        return -1;\n    }\n    if (b.hasOwnProperty('order'))\n        return 1;\n    return 0;\n}\nfunction addTrackFeatures() {\n    var nodeStart = void 0;\n    var nodeEnd = void 0;\n    var feature = {};\n    bed.forEach(function (line) {\n        var i = 0;\n        while (i < numberOfTracks && tracks[i].name !== line.track) {\n            i += 1;\n        }\n        if (i < numberOfTracks) {\n            nodeStart = 0;\n            tracks[i].path.forEach(function (node) {\n                if (node.node !== null) {\n                    feature = {};\n                    if (nodes[node.node].hasOwnProperty('sequenceLength')) {\n                        nodeEnd = nodeStart + nodes[node.node].sequenceLength - 1;\n                    } else {\n                        nodeEnd = nodeStart + nodes[node.node].width - 1;\n                    }\n                    if (nodeStart >= line.start && nodeStart <= line.end) {\n                        feature.start = 0;\n                    }\n                    if (nodeStart < line.start && nodeEnd >= line.start) {\n                        feature.start = line.start - nodeStart;\n                    }\n                    if (nodeEnd <= line.end && nodeEnd >= line.start) {\n                        feature.end = nodeEnd - nodeStart;\n                        if (nodeEnd < line.end)\n                            feature.continue = true;\n                    }\n                    if (nodeEnd > line.end && nodeStart <= line.end) {\n                        feature.end = line.end - nodeStart;\n                    }\n                    if (feature.hasOwnProperty('start')) {\n                        feature.type = line.type;\n                        feature.name = line.name;\n                        if (!node.hasOwnProperty('features'))\n                            node.features = [];\n                        node.features.push(feature);\n                    }\n                    nodeStart = nodeEnd + 1;\n                }\n            });\n        }\n    });\n}\nfunction calculateTrackWidth() {\n    var allAreFour = true;\n    tracks.forEach(function (track) {\n        if (track.hasOwnProperty('freq')) {\n            track.width = Math.round((Math.log(track.freq) + 1) * 4);\n        } else {\n            track.width = 15;\n            if (track.hasOwnProperty('type') && track.type === 'read') {\n                track.width = 4;\n            }\n        }\n        if (track.width !== 4) {\n            allAreFour = false;\n        }\n    });\n    if (allAreFour) {\n        tracks.forEach(function (track) {\n            if (track.hasOwnProperty('freq')) {\n                track.width = 15;\n            }\n        });\n    }\n}\nfunction useColorScheme(x) {\n    config.colorScheme = x;\n    svg = d3.select(svgID);\n    var tr = createTubeMap();\n    if (!config.hideLegendFlag)\n        drawLegend(tr);\n}\nfunction assignColorSets() {\n    haplotypeColors = getColorSet(config.haplotypeColors);\n    forwardReadColors = getColorSet(config.forwardReadColors);\n    reverseReadColors = getColorSet(config.reverseReadColors);\n    exonColors = getColorSet(config.exonColors);\n}\nfunction getColorSet(colorSetName) {\n    switch (colorSetName) {\n    case 'plainColors':\n        return plainColors;\n    case 'reds':\n        return reds;\n    case 'blues':\n        return blues;\n    case 'greys':\n        return greys;\n    case 'lightColors':\n        return lightColors;\n    default:\n        return greys;\n    }\n}\nfunction generateTrackColor(track, highlight) {\n    if (typeof highlight === 'undefined')\n        highlight = 'plain';\n    var trackColor = void 0;\n    if (track.hasOwnProperty('type') && track.type === 'read') {\n        if (track.hasOwnProperty('is_reverse') && track.is_reverse === true) {\n            trackColor = reverseReadColors[track.id % reverseReadColors.length];\n        } else {\n            trackColor = forwardReadColors[track.id % forwardReadColors.length];\n        }\n    } else {\n        if (config.showExonsFlag === false || highlight !== 'plain') {\n            trackColor = haplotypeColors[track.id % haplotypeColors.length];\n        } else {\n            trackColor = exonColors[track.id % exonColors.length];\n        }\n    }\n    return trackColor;\n}\nfunction generateTrackColorOLD(track, highlight) {\n    if (typeof highlight === 'undefined')\n        highlight = 'plain';\n    var trackColor = void 0;\n    if (track.hasOwnProperty('type') && track.type === 'read') {\n        if (track.hasOwnProperty('is_reverse') && track.is_reverse === true) {\n            trackColor = blues[track.id % blues.length];\n        } else {\n            trackColor = reds[track.id % reds.length];\n        }\n    } else {\n        if (config.colorScheme === 0) {\n            if (config.showExonsFlag === false || highlight !== 'plain') {\n                trackColor = plainColors[track.id % plainColors.length];\n            } else {\n                trackColor = lightColors[track.id % lightColors.length];\n            }\n        } else if (config.colorScheme === 1) {\n            if (config.showExonsFlag === false || highlight === 'plain') {\n                trackColor = greys[track.id % greys.length];\n            } else {\n                trackColor = reds[track.id % reds.length];\n            }\n        }\n    }\n    return trackColor;\n}\nfunction getReadXStart(read) {\n    var node = nodes[read.path[0].node];\n    if (read.path[0].isForward) {\n        return getXCoordinateOfBaseWithinNode(node, read.firstNodeOffset);\n    }\n    return getXCoordinateOfBaseWithinNode(node, node.sequenceLength - read.firstNodeOffset);\n}\nfunction getReadXEnd(read) {\n    var node = nodes[read.path[read.path.length - 1].node];\n    if (read.path[read.path.length - 1].isForward) {\n        return getXCoordinateOfBaseWithinNode(node, read.finalNodeCoverLength);\n    }\n    return getXCoordinateOfBaseWithinNode(node, node.sequenceLength - read.finalNodeCoverLength);\n}\nfunction getXCoordinateOfBaseWithinNode(node, base) {\n    if (base > node.sequenceLength)\n        return null;\n    var nodeLeftX = node.x - 4;\n    var nodeRightX = node.x + node.pixelWidth + 4;\n    return nodeLeftX + base / node.sequenceLength * (nodeRightX - nodeLeftX);\n}\nfunction generateSVGShapesFromPath() {\n    var xStart = void 0;\n    var xEnd = void 0;\n    var yStart = void 0;\n    var yEnd = void 0;\n    var trackColor = void 0;\n    var highlight = void 0;\n    var dummy = void 0;\n    var reversalFlag = void 0;\n    for (var i = 0; i <= maxOrder; i += 1) {\n        extraLeft.push(0);\n        extraRight.push(0);\n    }\n    var orderStartX = [];\n    var orderEndX = [];\n    nodes.forEach(function (node) {\n        if (node.hasOwnProperty('order')) {\n            orderStartX[node.order] = node.x;\n            if (orderEndX[node.order] === undefined) {\n                orderEndX[node.order] = node.x + node.pixelWidth;\n            } else {\n                orderEndX[node.order] = Math.max(orderEndX[node.order], node.x + node.pixelWidth);\n            }\n        }\n    });\n    tracks.forEach(function (track) {\n        highlight = 'plain';\n        trackColor = generateTrackColor(track, highlight);\n        yStart = track.path[0].y;\n        if (track.type !== 'read') {\n            if (track.sequence[0].charAt(0) === '-') {\n                xStart = orderEndX[track.path[0].order] + 20;\n            } else {\n                xStart = orderStartX[track.path[0].order] - 20;\n            }\n        } else {\n            xStart = getReadXStart(track);\n        }\n        for (var _i6 = 0; _i6 < track.path.length; _i6 += 1) {\n            if (track.path[_i6].y === yStart) {\n                if (track.path[_i6].hasOwnProperty('features')) {\n                    reversalFlag = _i6 > 0 && track.path[_i6 - 1].order === track.path[_i6].order;\n                    dummy = createFeatureRectangle(track.path[_i6], orderStartX[track.path[_i6].order], orderEndX[track.path[_i6].order], highlight, track, xStart, yStart, trackColor, reversalFlag);\n                    highlight = dummy.highlight;\n                    xStart = dummy.xStart;\n                }\n            } else {\n                if (track.path[_i6 - 1].isForward) {\n                    xEnd = orderEndX[track.path[_i6 - 1].order];\n                } else {\n                    xEnd = orderStartX[track.path[_i6 - 1].order];\n                }\n                if (xEnd !== xStart) {\n                    trackColor = generateTrackColor(track, highlight);\n                    trackRectangles.push({\n                        xStart: Math.min(xStart, xEnd),\n                        yStart: yStart,\n                        xEnd: Math.max(xStart, xEnd),\n                        yEnd: yStart + track.width - 1,\n                        color: trackColor,\n                        id: track.id,\n                        type: track.type\n                    });\n                }\n                if (track.path[_i6].order - 1 === track.path[_i6 - 1].order) {\n                    xStart = xEnd;\n                    xEnd = orderStartX[track.path[_i6].order];\n                    yEnd = track.path[_i6].y;\n                    trackColor = generateTrackColor(track, highlight);\n                    trackCurves.push({\n                        xStart: xStart,\n                        yStart: yStart,\n                        xEnd: xEnd + 1,\n                        yEnd: yEnd,\n                        width: track.width,\n                        color: trackColor,\n                        laneChange: Math.abs(track.path[_i6].lane - track.path[_i6 - 1].lane),\n                        id: track.id,\n                        type: track.type\n                    });\n                    xStart = xEnd;\n                    yStart = yEnd;\n                } else if (track.path[_i6].order + 1 === track.path[_i6 - 1].order) {\n                    xStart = xEnd;\n                    xEnd = orderEndX[track.path[_i6].order];\n                    yEnd = track.path[_i6].y;\n                    trackColor = generateTrackColor(track, highlight);\n                    trackCurves.push({\n                        xStart: xStart + 1,\n                        yStart: yStart,\n                        xEnd: xEnd,\n                        yEnd: yEnd,\n                        width: track.width,\n                        color: trackColor,\n                        laneChange: Math.abs(track.path[_i6].lane - track.path[_i6 - 1].lane),\n                        id: track.id,\n                        type: track.type\n                    });\n                    xStart = xEnd;\n                    yStart = yEnd;\n                } else {\n                    if (track.path[_i6 - 1].isForward) {\n                        yEnd = track.path[_i6].y;\n                        generateForwardToReverse(xEnd, yStart, yEnd, track.width, trackColor, track.id, track.path[_i6].order, track.type);\n                        xStart = orderEndX[track.path[_i6].order];\n                        yStart = track.path[_i6].y;\n                    } else {\n                        yEnd = track.path[_i6].y;\n                        generateReverseToForward(xEnd, yStart, yEnd, track.width, trackColor, track.id, track.path[_i6].order, track.type);\n                        xStart = orderStartX[track.path[_i6].order];\n                        yStart = track.path[_i6].y;\n                    }\n                }\n                if (track.path[_i6].hasOwnProperty('features')) {\n                    reversalFlag = track.path[_i6 - 1].order === track.path[_i6].order;\n                    dummy = createFeatureRectangle(track.path[_i6], orderStartX[track.path[_i6].order], orderEndX[track.path[_i6].order], highlight, track, xStart, yStart, trackColor, reversalFlag);\n                    highlight = dummy.highlight;\n                    xStart = dummy.xStart;\n                }\n            }\n        }\n        if (track.type !== 'read') {\n            if (!track.path[track.path.length - 1].isForward) {\n                xEnd = orderStartX[track.path[track.path.length - 1].order] - 20;\n            } else {\n                xEnd = orderEndX[track.path[track.path.length - 1].order] + 20;\n            }\n        } else {\n            xEnd = getReadXEnd(track);\n        }\n        trackRectangles.push({\n            xStart: Math.min(xStart, xEnd),\n            yStart: yStart,\n            xEnd: Math.max(xStart, xEnd),\n            yEnd: yStart + track.width - 1,\n            color: trackColor,\n            id: track.id,\n            type: track.type\n        });\n    });\n}\nfunction createFeatureRectangle(node, nodeXStart, nodeXEnd, highlight, track, rectXStart, yStart, trackColor, reversalFlag) {\n    var nodeWidth = void 0;\n    var currentHighlight = highlight;\n    var c = void 0;\n    var co = void 0;\n    var featureXStart = void 0;\n    var featureXEnd = void 0;\n    nodeXStart -= 8;\n    nodeXEnd += 8;\n    if (nodes[node.node].hasOwnProperty('sequenceLength')) {\n        nodeWidth = nodes[node.node].sequenceLength;\n    } else {\n        nodeWidth = nodes[node.node].width;\n    }\n    node.features.sort(function (a, b) {\n        return a.start - b.start;\n    });\n    node.features.forEach(function (feature) {\n        if (currentHighlight !== feature.type) {\n            c = generateTrackColor(track, currentHighlight);\n            if (node.isForward === true) {\n                featureXStart = nodeXStart + Math.round(feature.start * (nodeXEnd - nodeXStart + 1) / nodeWidth);\n                if (reversalFlag && featureXStart < nodeXStart + 8) {\n                    featureXEnd = nodeXStart + Math.round((feature.end + 1) * (nodeXEnd - nodeXStart + 1) / nodeWidth) - 1;\n                    co = generateTrackColor(track, feature.type);\n                    trackRectanglesStep3.push({\n                        xStart: featureXStart,\n                        yStart: yStart,\n                        xEnd: featureXEnd,\n                        yEnd: yStart + track.width - 1,\n                        color: co,\n                        id: track.id,\n                        type: track.type\n                    });\n                }\n                if (featureXStart > rectXStart + 1) {\n                    trackRectanglesStep3.push({\n                        xStart: rectXStart,\n                        yStart: yStart,\n                        xEnd: featureXStart - 1,\n                        yEnd: yStart + track.width - 1,\n                        color: c,\n                        id: track.id,\n                        type: track.type\n                    });\n                }\n            } else {\n                featureXStart = nodeXEnd - Math.round(feature.start * (nodeXEnd - nodeXStart + 1) / nodeWidth);\n                if (reversalFlag && featureXStart > nodeXEnd - 8) {\n                    featureXEnd = nodeXEnd - Math.round((feature.end + 1) * (nodeXEnd - nodeXStart + 1) / nodeWidth) - 1;\n                    co = generateTrackColor(track, feature.type);\n                    trackRectanglesStep3.push({\n                        xStart: featureXEnd,\n                        yStart: yStart,\n                        xEnd: featureXStart,\n                        yEnd: yStart + track.width - 1,\n                        color: co,\n                        id: track.id,\n                        type: track.type\n                    });\n                }\n                if (rectXStart > featureXStart + 1) {\n                    trackRectanglesStep3.push({\n                        xStart: featureXStart + 1,\n                        yStart: yStart,\n                        xEnd: rectXStart,\n                        yEnd: yStart + track.width - 1,\n                        color: c,\n                        id: track.id,\n                        type: track.type\n                    });\n                }\n            }\n            rectXStart = featureXStart;\n            currentHighlight = feature.type;\n        }\n        if (feature.end < nodeWidth - 1 || !feature.hasOwnProperty('continue')) {\n            c = generateTrackColor(track, currentHighlight);\n            if (node.isForward === true) {\n                featureXEnd = nodeXStart + Math.round((feature.end + 1) * (nodeXEnd - nodeXStart + 1) / nodeWidth) - 1;\n                trackRectanglesStep3.push({\n                    xStart: rectXStart,\n                    yStart: yStart,\n                    xEnd: featureXEnd,\n                    yEnd: yStart + track.width - 1,\n                    color: c,\n                    id: track.id,\n                    type: track.type\n                });\n            } else {\n                featureXEnd = nodeXEnd - Math.round((feature.end + 1) * (nodeXEnd - nodeXStart + 1) / nodeWidth) - 1;\n                trackRectanglesStep3.push({\n                    xStart: featureXEnd,\n                    yStart: yStart,\n                    xEnd: rectXStart,\n                    yEnd: yStart + track.width - 1,\n                    color: c,\n                    id: track.id,\n                    type: track.type\n                });\n            }\n            rectXStart = featureXEnd + 1;\n            currentHighlight = 'plain';\n        }\n    });\n    return {\n        xStart: rectXStart,\n        highlight: currentHighlight\n    };\n}\nfunction generateForwardToReverse(x, yStart, yEnd, trackWidth, trackColor, trackID, order, type) {\n    x += 10 * extraRight[order];\n    var yTop = Math.min(yStart, yEnd);\n    var yBottom = Math.max(yStart, yEnd);\n    var radius = 7;\n    trackVerticalRectangles.push({\n        xStart: x - 10 * extraRight[order],\n        yStart: yStart,\n        xEnd: x + 5,\n        yEnd: yStart + trackWidth - 1,\n        color: trackColor,\n        id: trackID,\n        type: type\n    });\n    trackVerticalRectangles.push({\n        xStart: x + 5 + radius,\n        yStart: yTop + trackWidth + radius - 1,\n        xEnd: x + 5 + radius + Math.min(7, trackWidth) - 1,\n        yEnd: yBottom - radius + 1,\n        color: trackColor,\n        id: trackID,\n        type: type\n    });\n    trackVerticalRectangles.push({\n        xStart: x - 10 * extraRight[order],\n        yStart: yEnd,\n        xEnd: x + 5,\n        yEnd: yEnd + trackWidth - 1,\n        color: trackColor,\n        id: trackID,\n        type: type\n    });\n    var d = 'M ' + (x + 5) + ' ' + yBottom;\n    d += ' Q ' + (x + 5 + radius) + ' ' + yBottom + ' ' + (x + 5 + radius) + ' ' + (yBottom - radius);\n    d += ' H ' + (x + 5 + radius + Math.min(7, trackWidth));\n    d += ' Q ' + (x + 5 + radius + Math.min(7, trackWidth)) + ' ' + (yBottom + trackWidth) + ' ' + (x + 5) + ' ' + (yBottom + trackWidth);\n    d += ' Z ';\n    trackCorners.push({\n        path: d,\n        color: trackColor,\n        id: trackID,\n        type: type\n    });\n    d = 'M ' + (x + 5) + ' ' + yTop;\n    d += ' Q ' + (x + 5 + radius + Math.min(7, trackWidth)) + ' ' + yTop + ' ' + (x + 5 + radius + Math.min(7, trackWidth)) + ' ' + (yTop + trackWidth + radius);\n    d += ' H ' + (x + 5 + radius);\n    d += ' Q ' + (x + 5 + radius) + ' ' + (yTop + trackWidth) + ' ' + (x + 5) + ' ' + (yTop + trackWidth);\n    d += ' Z ';\n    trackCorners.push({\n        path: d,\n        color: trackColor,\n        id: trackID,\n        type: type\n    });\n    extraRight[order] += 1;\n}\nfunction generateReverseToForward(x, yStart, yEnd, trackWidth, trackColor, trackID, order, type) {\n    var yTop = Math.min(yStart, yEnd);\n    var yBottom = Math.max(yStart, yEnd);\n    var radius = 7;\n    x -= 10 * extraLeft[order];\n    trackVerticalRectangles.push({\n        xStart: x - 6,\n        yStart: yStart,\n        xEnd: x + 10 * extraLeft[order],\n        yEnd: yStart + trackWidth - 1,\n        color: trackColor,\n        id: trackID,\n        type: type\n    });\n    trackVerticalRectangles.push({\n        xStart: x - 5 - radius - Math.min(7, trackWidth),\n        yStart: yTop + trackWidth + radius - 1,\n        xEnd: x - 5 - radius - 1,\n        yEnd: yBottom - radius + 1,\n        color: trackColor,\n        id: trackID,\n        type: type\n    });\n    trackVerticalRectangles.push({\n        xStart: x - 6,\n        yStart: yEnd,\n        xEnd: x + 10 * extraLeft[order],\n        yEnd: yEnd + trackWidth - 1,\n        color: trackColor,\n        id: trackID,\n        type: type\n    });\n    var d = 'M ' + (x - 5) + ' ' + yBottom;\n    d += ' Q ' + (x - 5 - radius) + ' ' + yBottom + ' ' + (x - 5 - radius) + ' ' + (yBottom - radius);\n    d += ' H ' + (x - 5 - radius - Math.min(7, trackWidth));\n    d += ' Q ' + (x - 5 - radius - Math.min(7, trackWidth)) + ' ' + (yBottom + trackWidth) + ' ' + (x - 5) + ' ' + (yBottom + trackWidth);\n    d += ' Z ';\n    trackCorners.push({\n        path: d,\n        color: trackColor,\n        id: trackID,\n        type: type\n    });\n    d = 'M ' + (x - 5) + ' ' + yTop;\n    d += ' Q ' + (x - 5 - radius - Math.min(7, trackWidth)) + ' ' + yTop + ' ' + (x - 5 - radius - Math.min(7, trackWidth)) + ' ' + (yTop + trackWidth + radius);\n    d += ' H ' + (x - 5 - radius);\n    d += ' Q ' + (x - 5 - radius) + ' ' + (yTop + trackWidth) + ' ' + (x - 5) + ' ' + (yTop + trackWidth);\n    d += ' Z ';\n    trackCorners.push({\n        path: d,\n        color: trackColor,\n        id: trackID,\n        type: type\n    });\n    extraLeft[order] += 1;\n}\nfunction drawReversalsByColor(corners, rectangles, type) {\n    if (typeof type === 'undefined')\n        type = 'haplo';\n    var co = new Set();\n    rectangles.forEach(function (rect) {\n        co.add(rect.color);\n    });\n    co.forEach(function (c) {\n        drawTrackRectangles(rectangles.filter(filterObjectByAttribute('color', c)), type);\n        drawTrackCorners(corners.filter(filterObjectByAttribute('color', c)), type);\n    });\n}\nfunction drawNodes(dNodes) {\n    var x = void 0;\n    var y = void 0;\n    dNodes.forEach(function (node) {\n        node.d = 'M ' + (node.x - 9) + ' ' + node.y + ' Q ' + (node.x - 9) + ' ' + (node.y - 9) + ' ' + node.x + ' ' + (node.y - 9);\n        x = node.x;\n        y = node.y - 9;\n        if (node.width > 1) {\n            x += node.pixelWidth;\n            node.d += ' L ' + x + ' ' + y;\n        }\n        node.d += ' Q ' + (x + 9) + ' ' + y + ' ' + (x + 9) + ' ' + (y + 9);\n        x += 9;\n        y += 9;\n        if (node.contentHeight > 0) {\n            y += node.contentHeight - 0;\n            node.d += ' L ' + x + ' ' + y;\n        }\n        node.d += ' Q ' + x + ' ' + (y + 9) + ' ' + (x - 9) + ' ' + (y + 9);\n        x -= 9;\n        y += 9;\n        if (node.width > 1) {\n            x -= node.pixelWidth;\n            node.d += ' L ' + x + ' ' + y;\n        }\n        node.d += ' Q ' + (x - 9) + ' ' + y + ' ' + (x - 9) + ' ' + (y - 9);\n        x -= 9;\n        y -= 9;\n        if (node.contentHeight > 0) {\n            y -= node.contentHeight - 0;\n            node.d += ' L ' + x + ' ' + y;\n        }\n    });\n    svg.selectAll('.node').data(dNodes).enter().append('path').attr('id', function (d) {\n        return d.name;\n    }).attr('d', function (d) {\n        return d.d;\n    }).on('mouseover', nodeMouseOver).on('mouseout', nodeMouseOut).on('dblclick', nodeDoubleClick).style('fill', '#fff').style('fill-opacity', config.showExonsFlag ? '0.4' : '0.6').style('stroke', 'black').style('stroke-width', '2px').append('svg:title').text(function (d) {\n        return d.name;\n    });\n}\nfunction drawLabels(dNodes) {\n    if (config.nodeWidthOption === 0) {\n        svg.selectAll('text').data(dNodes).enter().append('text').attr('x', function (d) {\n            return d.x - 4;\n        }).attr('y', function (d) {\n            return d.y + 4;\n        }).text(function (d) {\n            return d.seq;\n        }).attr('font-family', 'Courier, \"Lucida Console\", monospace').attr('font-size', '14px').attr('fill', 'black').style('pointer-events', 'none');\n    }\n}\nfunction drawRuler() {\n    var rulerTrackIndex = 0;\n    while (tracks[rulerTrackIndex].name !== trackForRuler) {\n        rulerTrackIndex += 1;\n    }\n    var rulerTrack = tracks[rulerTrackIndex];\n    svg.append('line').attr('x1', 0).attr('y1', minYCoordinate - 10).attr('x2', maxXCoordinate).attr('y2', minYCoordinate - 10).attr('stroke-width', 1).attr('stroke', 'black');\n    var markingInterval = 100;\n    if (config.nodeWidthOption === 0)\n        markingInterval = 20;\n    var indexOfFirstBaseInNode = rulerTrack.indexOfFirstBase;\n    var atLeastOneMarkingDrawn = false;\n    var xCoordOfPreviousMarking = -100;\n    if (config.nodeWidthOption !== 0) {\n        var firstNode = nodes[rulerTrack.indexSequence[0]];\n        xCoordOfPreviousMarking = getXCoordinateOfBaseWithinNode(firstNode, 0);\n        drawRulerMarking(indexOfFirstBaseInNode, xCoordOfPreviousMarking);\n        atLeastOneMarkingDrawn = true;\n    }\n    rulerTrack.indexSequence.forEach(function (nodeIndex) {\n        var currentNode = nodes[nodeIndex];\n        var nextMarking = Math.ceil(indexOfFirstBaseInNode / markingInterval) * markingInterval;\n        while (nextMarking < indexOfFirstBaseInNode + currentNode.sequenceLength) {\n            var xCoordOfMarking = getXCoordinateOfBaseWithinNode(currentNode, nextMarking - indexOfFirstBaseInNode);\n            if (xCoordOfPreviousMarking + 80 <= xCoordOfMarking) {\n                drawRulerMarking(nextMarking, xCoordOfMarking);\n                atLeastOneMarkingDrawn = true;\n                xCoordOfPreviousMarking = xCoordOfMarking;\n            }\n            nextMarking += markingInterval;\n        }\n        indexOfFirstBaseInNode += nodes[nodeIndex].sequenceLength;\n    });\n    if (!atLeastOneMarkingDrawn) {\n        drawRulerMarking(rulerTrack.indexOfFirstBase, nodes[rulerTrack.indexSequence[0]].x - 4);\n    }\n}\nfunction drawRulerMarking(sequencePosition, xCoordinate) {\n    svg.append('text').attr('x', xCoordinate).attr('y', minYCoordinate - 13).text('|' + sequencePosition).attr('font-family', 'Courier, \"Lucida Console\", monospace').attr('font-size', '12px').attr('fill', 'black').style('pointer-events', 'none');\n}\nfunction filterObjectByAttribute(attribute, value) {\n    return function (item) {\n        return item[attribute] === value;\n    };\n}\nfunction drawTrackRectangles(rectangles, type) {\n    if (typeof type === 'undefined')\n        type = 'haplo';\n    rectangles = rectangles.filter(filterObjectByAttribute('type', type));\n    svg.selectAll('trackRectangles').data(rectangles).enter().append('rect').attr('x', function (d) {\n        return d.xStart;\n    }).attr('y', function (d) {\n        return d.yStart;\n    }).attr('width', function (d) {\n        return d.xEnd - d.xStart + 1;\n    }).attr('height', function (d) {\n        return d.yEnd - d.yStart + 1;\n    }).style('fill', function (d) {\n        return d.color;\n    }).attr('trackID', function (d) {\n        return d.id;\n    }).attr('class', function (d) {\n        return 'track' + d.id;\n    }).attr('color', function (d) {\n        return d.color;\n    }).on('mouseover', trackMouseOver).on('mouseout', trackMouseOut).on('dblclick', trackDoubleClick);\n}\nfunction compareCurvesByLineChanges(a, b) {\n    if (a[6] < b[6])\n        return -1;\n    else if (a[6] > b[6])\n        return 1;\n    return 0;\n}\nfunction defineSVGPatterns() {\n    var defs = svg.append('defs');\n    var pattern = defs.append('pattern').attrs({\n            id: 'patternA',\n            width: '7',\n            height: '7',\n            patternUnits: 'userSpaceOnUse',\n            patternTransform: 'rotate(45)'\n        });\n    pattern.append('rect').attrs({\n        x: '0',\n        y: '0',\n        width: '7',\n        height: '7',\n        fill: '#FFFFFF'\n    });\n    pattern.append('rect').attrs({\n        x: '0',\n        y: '0',\n        width: '3',\n        height: '3',\n        fill: '#505050'\n    });\n    pattern.append('rect').attrs({\n        x: '0',\n        y: '4',\n        width: '3',\n        height: '3',\n        fill: '#505050'\n    });\n    pattern.append('rect').attrs({\n        x: '4',\n        y: '0',\n        width: '3',\n        height: '3',\n        fill: '#505050'\n    });\n    pattern.append('rect').attrs({\n        x: '4',\n        y: '4',\n        width: '3',\n        height: '3',\n        fill: '#505050'\n    });\n    pattern = defs.append('pattern').attrs({\n        id: 'patternB',\n        width: '8',\n        height: '8',\n        patternUnits: 'userSpaceOnUse',\n        patternTransform: 'rotate(45)'\n    });\n    pattern.append('rect').attrs({\n        x: '0',\n        y: '0',\n        width: '8',\n        height: '8',\n        fill: '#FFFFFF'\n    });\n    pattern.append('rect').attrs({\n        x: '0',\n        y: '0',\n        width: '3',\n        height: '3',\n        fill: '#1f77b4'\n    });\n    pattern.append('rect').attrs({\n        x: '0',\n        y: '5',\n        width: '3',\n        height: '3',\n        fill: '#1f77b4'\n    });\n    pattern.append('rect').attrs({\n        x: '5',\n        y: '0',\n        width: '3',\n        height: '3',\n        fill: '#1f77b4'\n    });\n    pattern.append('rect').attrs({\n        x: '5',\n        y: '5',\n        width: '3',\n        height: '3',\n        fill: '#1f77b4'\n    });\n    pattern = defs.append('pattern').attrs({\n        id: 'plaid0',\n        width: '6',\n        height: '6',\n        patternUnits: 'userSpaceOnUse',\n        patternTransform: 'rotate(45)'\n    });\n    pattern.append('rect').attrs({\n        x: '0',\n        y: '0',\n        width: '6',\n        height: '6',\n        fill: '#FFFFFF'\n    });\n    pattern.append('rect').attrs({\n        x: '0',\n        y: '0',\n        width: '2',\n        height: '2',\n        fill: '#1f77b4'\n    });\n    pattern.append('rect').attrs({\n        x: '0',\n        y: '4',\n        width: '2',\n        height: '2',\n        fill: '#1f77b4'\n    });\n    pattern.append('rect').attrs({\n        x: '4',\n        y: '0',\n        width: '2',\n        height: '2',\n        fill: '#1f77b4'\n    });\n    pattern.append('rect').attrs({\n        x: '4',\n        y: '4',\n        width: '2',\n        height: '2',\n        fill: '#1f77b4'\n    });\n    pattern = defs.append('pattern').attrs({\n        id: 'plaid1',\n        width: '6',\n        height: '6',\n        patternUnits: 'userSpaceOnUse',\n        patternTransform: 'rotate(45)'\n    });\n    pattern.append('rect').attrs({\n        x: '0',\n        y: '0',\n        width: '6',\n        height: '6',\n        fill: '#FFFFFF'\n    });\n    pattern.append('rect').attrs({\n        x: '0',\n        y: '0',\n        width: '2',\n        height: '2',\n        fill: '#ff7f0e'\n    });\n    pattern.append('rect').attrs({\n        x: '0',\n        y: '4',\n        width: '2',\n        height: '2',\n        fill: '#ff7f0e'\n    });\n    pattern.append('rect').attrs({\n        x: '4',\n        y: '0',\n        width: '2',\n        height: '2',\n        fill: '#ff7f0e'\n    });\n    pattern.append('rect').attrs({\n        x: '4',\n        y: '4',\n        width: '2',\n        height: '2',\n        fill: '#ff7f0e'\n    });\n    pattern = defs.append('pattern').attrs({\n        id: 'plaid2',\n        width: '6',\n        height: '6',\n        patternUnits: 'userSpaceOnUse',\n        patternTransform: 'rotate(45)'\n    });\n    pattern.append('rect').attrs({\n        x: '0',\n        y: '0',\n        width: '6',\n        height: '6',\n        fill: '#FFFFFF'\n    });\n    pattern.append('rect').attrs({\n        x: '0',\n        y: '0',\n        width: '2',\n        height: '2',\n        fill: '#2ca02c'\n    });\n    pattern.append('rect').attrs({\n        x: '0',\n        y: '4',\n        width: '2',\n        height: '2',\n        fill: '#2ca02c'\n    });\n    pattern.append('rect').attrs({\n        x: '4',\n        y: '0',\n        width: '2',\n        height: '2',\n        fill: '#2ca02c'\n    });\n    pattern.append('rect').attrs({\n        x: '4',\n        y: '4',\n        width: '2',\n        height: '2',\n        fill: '#2ca02c'\n    });\n    pattern = defs.append('pattern').attrs({\n        id: 'plaid3',\n        width: '6',\n        height: '6',\n        patternUnits: 'userSpaceOnUse',\n        patternTransform: 'rotate(45)'\n    });\n    pattern.append('rect').attrs({\n        x: '0',\n        y: '0',\n        width: '6',\n        height: '6',\n        fill: '#FFFFFF'\n    });\n    pattern.append('rect').attrs({\n        x: '0',\n        y: '0',\n        width: '2',\n        height: '2',\n        fill: '#d62728'\n    });\n    pattern.append('rect').attrs({\n        x: '0',\n        y: '4',\n        width: '2',\n        height: '2',\n        fill: '#d62728'\n    });\n    pattern.append('rect').attrs({\n        x: '4',\n        y: '0',\n        width: '2',\n        height: '2',\n        fill: '#d62728'\n    });\n    pattern.append('rect').attrs({\n        x: '4',\n        y: '4',\n        width: '2',\n        height: '2',\n        fill: '#d62728'\n    });\n    pattern = defs.append('pattern').attrs({\n        id: 'plaid4',\n        width: '6',\n        height: '6',\n        patternUnits: 'userSpaceOnUse',\n        patternTransform: 'rotate(45)'\n    });\n    pattern.append('rect').attrs({\n        x: '0',\n        y: '0',\n        width: '6',\n        height: '6',\n        fill: '#FFFFFF'\n    });\n    pattern.append('rect').attrs({\n        x: '0',\n        y: '0',\n        width: '2',\n        height: '2',\n        fill: '#9467bd'\n    });\n    pattern.append('rect').attrs({\n        x: '0',\n        y: '4',\n        width: '2',\n        height: '2',\n        fill: '#9467bd'\n    });\n    pattern.append('rect').attrs({\n        x: '4',\n        y: '0',\n        width: '2',\n        height: '2',\n        fill: '#9467bd'\n    });\n    pattern.append('rect').attrs({\n        x: '4',\n        y: '4',\n        width: '2',\n        height: '2',\n        fill: '#9467bd'\n    });\n    pattern = defs.append('pattern').attrs({\n        id: 'plaid5',\n        width: '6',\n        height: '6',\n        patternUnits: 'userSpaceOnUse',\n        patternTransform: 'rotate(45)'\n    });\n    pattern.append('rect').attrs({\n        x: '0',\n        y: '0',\n        width: '6',\n        height: '6',\n        fill: '#FFFFFF'\n    });\n    pattern.append('rect').attrs({\n        x: '0',\n        y: '0',\n        width: '2',\n        height: '2',\n        fill: '#8c564b'\n    });\n    pattern.append('rect').attrs({\n        x: '0',\n        y: '4',\n        width: '2',\n        height: '2',\n        fill: '#8c564b'\n    });\n    pattern.append('rect').attrs({\n        x: '4',\n        y: '0',\n        width: '2',\n        height: '2',\n        fill: '#8c564b'\n    });\n    pattern.append('rect').attrs({\n        x: '4',\n        y: '4',\n        width: '2',\n        height: '2',\n        fill: '#8c564b'\n    });\n}\nfunction drawTrackCurves(type) {\n    if (typeof type === 'undefined')\n        type = 'haplo';\n    var myTrackCurves = trackCurves.filter(filterObjectByAttribute('type', type));\n    myTrackCurves.sort(compareCurvesByLineChanges);\n    myTrackCurves.forEach(function (curve) {\n        var xMiddle = (curve.xStart + curve.xEnd) / 2;\n        var d = 'M ' + curve.xStart + ' ' + curve.yStart;\n        d += ' C ' + xMiddle + ' ' + curve.yStart + ' ' + xMiddle + ' ' + curve.yEnd + ' ' + curve.xEnd + ' ' + curve.yEnd;\n        d += ' V ' + (curve.yEnd + curve.width);\n        d += ' C ' + xMiddle + ' ' + (curve.yEnd + curve.width) + ' ' + xMiddle + ' ' + (curve.yStart + curve.width) + ' ' + curve.xStart + ' ' + (curve.yStart + curve.width);\n        d += ' Z';\n        curve.path = d;\n    });\n    svg.selectAll('trackCurves').data(trackCurves).enter().append('path').attr('d', function (d) {\n        return d.path;\n    }).style('fill', function (d) {\n        return d.color;\n    }).attr('trackID', function (d) {\n        return d.id;\n    }).attr('class', function (d) {\n        return 'track' + d.id;\n    }).attr('color', function (d) {\n        return d.color;\n    }).on('mouseover', trackMouseOver).on('mouseout', trackMouseOut).on('dblclick', trackDoubleClick);\n}\nfunction drawTrackCorners(corners, type) {\n    if (typeof type === 'undefined')\n        type = 'haplo';\n    corners = corners.filter(filterObjectByAttribute('type', type));\n    svg.selectAll('trackCorners').data(corners).enter().append('path').attr('d', function (d) {\n        return d.path;\n    }).style('fill', function (d) {\n        return d.color;\n    }).attr('trackID', function (d) {\n        return d.id;\n    }).attr('class', function (d) {\n        return 'track' + d.id;\n    }).attr('color', function (d) {\n        return d.color;\n    }).on('mouseover', trackMouseOver).on('mouseout', trackMouseOut).on('dblclick', trackDoubleClick);\n}\nfunction drawLegend() {\n    var content = '<table class=\"table-sm table-condensed table-nonfluid\"><thead><tr><th>Color</th><th>Trackname</th><th>Show Track</th></tr></thead>';\n    var listeners = [];\n    for (var i = 0; i < tracks.length; i += 1) {\n        if (tracks[i].type === 'haplo') {\n            content += '<tr><td style=\"text-align:right\"><div class=\"color-box\" style=\"background-color: ' + generateTrackColor(tracks[i], 'exon') + ';\"></div></td>';\n            if (tracks[i].hasOwnProperty('name')) {\n                content += '<td>' + tracks[i].name + '</td>';\n            } else {\n                content += '<td>' + tracks[i].id + '</td>';\n            }\n            content += '<td><input type=\"checkbox\" checked=true id=\"showTrack' + i + '\"></td>';\n            listeners.push(i);\n        }\n    }\n    content += '</table';\n    $('#legendDiv').html(content);\n    listeners.forEach(function (i) {\n        document.getElementById('showTrack' + i).addEventListener('click', function () {\n            return changeTrackVisibility(i);\n        }, false);\n    });\n}\nfunction trackMouseOver() {\n    var trackID = d3.select(this).attr('trackID');\n    d3.selectAll('.track' + trackID).style('fill', 'url(#patternA)');\n}\nfunction nodeMouseOver() {\n    d3.select(this).style('stroke-width', '4px');\n}\nfunction trackMouseOut() {\n    var trackID = d3.select(this).attr('trackID');\n    d3.selectAll('.track' + trackID).each(function clearTrackHighlight() {\n        var c = d3.select(this).attr('color');\n        d3.select(this).style('fill', c);\n    });\n}\nfunction nodeMouseOut() {\n    d3.select(this).style('stroke-width', '2px');\n}\nfunction trackDoubleClick() {\n    var trackID = d3.select(this).attr('trackID');\n    var index = 0;\n    while (index < inputTracks.length && inputTracks[index].id !== Number(trackID)) {\n        index += 1;\n    }\n    if (index >= inputTracks.length)\n        return;\n    if (DEBUG)\n        console.log('moving index: ' + index);\n    moveTrackToFirstPosition(index);\n    createTubeMap();\n}\nfunction nodeDoubleClick() {\n    var nodeID = d3.select(this).attr('id');\n    if (config.clickableNodesFlag) {\n        if (reads && config.showReads) {\n            document.getElementById('hgvmNodeID').value = nodeID;\n            document.getElementById('hgvmPostButton').click();\n        } else {\n            document.getElementById('nodeID').value = nodeID;\n            document.getElementById('postButton').click();\n        }\n    }\n}\nfunction vgExtractNodes(vg) {\n    var result = [];\n    vg.node.forEach(function (node) {\n        result.push({\n            name: '' + node.id,\n            sequenceLength: node.sequence.length,\n            seq: node.sequence\n        });\n    });\n    return result;\n}\nfunction generateNodeWidth() {\n    nodes.forEach(function (node) {\n        if (!node.hasOwnProperty('sequenceLength')) {\n            node.sequenceLength = node.seq.length;\n        }\n    });\n    switch (config.nodeWidthOption) {\n    case 1:\n        nodes.forEach(function (node) {\n            node.width = 1 + Math.log(node.sequenceLength) / Math.log(2);\n            node.pixelWidth = Math.round((node.width - 1) * 8.401);\n        });\n        break;\n    case 2:\n        nodes.forEach(function (node) {\n            node.width = node.sequenceLength / 100;\n            node.pixelWidth = Math.round((node.width - 1) * 8.401);\n        });\n        break;\n    default:\n        nodes.forEach(function (node) {\n            node.width = node.sequenceLength;\n            svg.append('text').attr('x', 0).attr('y', 100).attr('id', 'dummytext').text(node.seq.substr(1)).attr('font-family', 'Courier, \"Lucida Console\", monospace').attr('font-size', '14px').attr('fill', 'black').style('pointer-events', 'none');\n            node.pixelWidth = Math.round(document.getElementById('dummytext').getComputedTextLength());\n            $('#dummytext').remove();\n        });\n    }\n}\nfunction vgExtractTracks(vg) {\n    var result = [];\n    vg.path.forEach(function (path, index) {\n        var sequence = [];\n        var isCompletelyReverse = true;\n        path.mapping.forEach(function (pos) {\n            if (pos.position.hasOwnProperty('is_reverse') && pos.position.is_reverse === true) {\n                sequence.push('-' + pos.position.node_id);\n            } else {\n                sequence.push('' + pos.position.node_id);\n                isCompletelyReverse = false;\n            }\n        });\n        if (isCompletelyReverse) {\n            sequence.reverse();\n            sequence.forEach(function (node, index2) {\n                sequence[index2] = node.substr(1);\n            });\n        }\n        var track = {};\n        track.id = index;\n        track.sequence = sequence;\n        if (path.hasOwnProperty('freq'))\n            track.freq = path.freq;\n        if (path.hasOwnProperty('name'))\n            track.name = path.name;\n        if (path.hasOwnProperty('indexOfFirstBase')) {\n            track.indexOfFirstBase = Number(path.indexOfFirstBase);\n        }\n        result.push(track);\n    });\n    return result;\n}\nfunction compareReadsByLeftEnd(a, b) {\n    var leftNodeA = void 0;\n    var leftNodeB = void 0;\n    var leftIndexA = void 0;\n    var leftIndexB = void 0;\n    if (a.sequence[0].charAt(0) === '-') {\n        if (a.sequence[a.sequence.length - 1].charAt(0) === '-') {\n            leftNodeA = a.sequence[a.sequence.length - 1].substr(1);\n            leftIndexA = nodes[nodeMap.get(leftNodeA)].sequenceLength - a.finalNodeCoverLength;\n        } else {\n            leftNodeA = a.sequence[a.sequence.length - 1];\n            leftIndexA = 0;\n        }\n    } else {\n        leftNodeA = a.sequence[0];\n        leftIndexA = a.firstNodeOffset;\n    }\n    if (b.sequence[0].charAt(0) === '-') {\n        if (b.sequence[b.sequence.length - 1].charAt(0) === '-') {\n            leftNodeB = b.sequence[b.sequence.length - 1].substr(1);\n            leftIndexB = nodes[nodeMap.get(leftNodeB)].sequenceLength - b.finalNodeCoverLength;\n        } else {\n            leftNodeB = b.sequence[b.sequence.length - 1];\n            leftIndexB = 0;\n        }\n    } else {\n        leftNodeB = b.sequence[0];\n        leftIndexB = b.firstNodeOffset;\n    }\n    if (leftNodeA < leftNodeB)\n        return -1;\n    else if (leftNodeA > leftNodeB)\n        return 1;\n    if (leftIndexA < leftIndexB)\n        return -1;\n    else if (leftIndexA > leftIndexB)\n        return 1;\n    return 0;\n}\nfunction compareReadsByLeftEnd2(a, b) {\n    if (nodes[a.indexSequence[0]].order < nodes[b.indexSequence[0]].order) {\n        return -1;\n    } else if (nodes[a.indexSequence[0]].order > nodes[b.indexSequence[0]].order) {\n        return 1;\n    }\n    if (a.firstNodeOffset < b.firstNodeOffset)\n        return -1;\n    else if (a.firstNodeOffset > b.firstNodeOffset)\n        return 1;\n    if (nodes[a.indexSequence[a.indexSequence.length - 1]].order < nodes[b.indexSequence[b.indexSequence.length - 1]].order) {\n        return -1;\n    } else if (nodes[a.indexSequence[a.indexSequence.length - 1]].order > nodes[b.indexSequence[b.indexSequence.length - 1]].order) {\n        return 1;\n    }\n    if (a.finalNodeCoverLength < b.finalNodeCoverLength)\n        return -1;\n    else if (a.finalNodeCoverLength > b.finalNodeCoverLength)\n        return 1;\n    return 0;\n}\nfunction vgExtractReads(myNodes, myTracks, myReads) {\n    if (DEBUG) {\n        console.log('Reads:');\n        console.log(myReads);\n    }\n    var extracted = [];\n    var nodeNames = [];\n    myNodes.forEach(function (node) {\n        nodeNames.push(node.name, 10);\n    });\n    var _loop3 = function _loop3(i) {\n        var read = myReads[i];\n        var sequence = [];\n        var sequenceNew = [];\n        var firstIndex = -1;\n        var lastIndex = -1;\n        read.path.mapping.forEach(function (pos, j) {\n            if (nodeNames.indexOf(pos.position.node_id) > -1) {\n                var edit = {};\n                var offset = 0;\n                if (pos.position.hasOwnProperty('is_reverse') && pos.position.is_reverse === true) {\n                    sequence.push('-' + pos.position.node_id);\n                    edit.nodeName = '-' + pos.position.node_id;\n                } else {\n                    sequence.push('' + pos.position.node_id);\n                    edit.nodeName = pos.position.node_id.toString();\n                }\n                if (firstIndex < 0) {\n                    firstIndex = j;\n                    if (pos.position.hasOwnProperty('offset')) {\n                        pos.position.offset = parseInt(pos.position.offset, 10);\n                        offset = pos.position.offset;\n                    }\n                }\n                lastIndex = j;\n                var mismatches = [];\n                var posWithinNode = offset;\n                pos.edit.forEach(function (element) {\n                    if (element.hasOwnProperty('to_length') && !element.hasOwnProperty('from_length')) {\n                        mismatches.push({\n                            type: 'insertion',\n                            pos: posWithinNode,\n                            seq: element.sequence\n                        });\n                    } else if (!element.hasOwnProperty('to_length') && element.hasOwnProperty('from_length')) {\n                        mismatches.push({\n                            type: 'deletion',\n                            pos: posWithinNode,\n                            length: element.from_length\n                        });\n                    } else if (element.hasOwnProperty('sequence')) {\n                        if (element.sequence.length > 1) {\n                            if (DEBUG) {\n                                console.log('found substitution at read ' + i + ', node ' + j + ' = ' + pos.position.node_id + ', seq = ' + element.sequence);\n                            }\n                        }\n                        mismatches.push({\n                            type: 'substitution',\n                            pos: posWithinNode,\n                            seq: element.sequence\n                        });\n                    }\n                    if (element.hasOwnProperty('from_length')) {\n                        posWithinNode += element.from_length;\n                    }\n                });\n                edit.mismatches = mismatches;\n                sequenceNew.push(edit);\n            }\n        });\n        if (sequence.length === 0) {\n            if (DEBUG) {\n                console.log('read ' + i + ' is empty');\n            }\n        } else {\n            var track = {};\n            track.id = myTracks.length + extracted.length;\n            track.sequence = sequence;\n            track.sequenceNew = sequenceNew;\n            track.type = 'read';\n            if (read.path.hasOwnProperty('freq'))\n                track.freq = read.path.freq;\n            if (read.path.hasOwnProperty('name'))\n                track.name = read.path.name;\n            track.firstNodeOffset = 0;\n            if (read.path.mapping[firstIndex].position.hasOwnProperty('offset')) {\n                track.firstNodeOffset = read.path.mapping[firstIndex].position.offset;\n            }\n            var finalNodeEdit = read.path.mapping[lastIndex].edit;\n            track.finalNodeCoverLength = 0;\n            if (read.path.mapping[lastIndex].position.hasOwnProperty('offset')) {\n                track.finalNodeCoverLength += read.path.mapping[lastIndex].position.offset;\n            }\n            finalNodeEdit.forEach(function (edit) {\n                if (edit.hasOwnProperty('from_length')) {\n                    track.finalNodeCoverLength += edit.from_length;\n                }\n            });\n            extracted.push(track);\n        }\n    };\n    for (var i = 0; i < myReads.length; i += 1) {\n        _loop3(i);\n    }\n    return extracted;\n}\nfunction mergeNodes() {\n    var nodeName = void 0;\n    var nodeName2 = void 0;\n    var pred = [];\n    var succ = [];\n    for (var i = 0; i < nodes.length; i += 1) {\n        pred.push(new Set());\n        succ.push(new Set());\n    }\n    var tracksAndReads = void 0;\n    if (reads && config.showReads)\n        tracksAndReads = tracks.concat(reads);\n    else\n        tracksAndReads = tracks;\n    tracksAndReads.forEach(function (track) {\n        for (var _i7 = 0; _i7 < track.sequence.length; _i7 += 1) {\n            if (track.sequence[_i7].charAt(0) !== '-') {\n                if (_i7 > 0) {\n                    nodeName = track.sequence[_i7 - 1];\n                    pred[nodeMap.get(track.sequence[_i7])].add(nodeName);\n                    if (nodeName.charAt(0) === '-') {\n                        pred[nodeMap.get(track.sequence[_i7])].add(nodeName.substr(1));\n                    }\n                } else if (track.type === 'haplo') {\n                    pred[nodeMap.get(track.sequence[_i7])].add('None');\n                }\n                if (_i7 < track.sequence.length - 1) {\n                    nodeName = track.sequence[_i7 + 1];\n                    succ[nodeMap.get(track.sequence[_i7])].add(nodeName);\n                    if (nodeName.charAt(0) === '-') {\n                        succ[nodeMap.get(track.sequence[_i7])].add(nodeName.substr(1));\n                    }\n                } else if (track.type === 'haplo') {\n                    succ[nodeMap.get(track.sequence[_i7])].add('None');\n                }\n            } else {\n                nodeName = track.sequence[_i7].substr(1);\n                if (_i7 > 0) {\n                    nodeName2 = track.sequence[_i7 - 1];\n                    if (nodeName2.charAt(0) === '-') {\n                        succ[nodeMap.get(nodeName)].add(nodeName2.substr(1));\n                    } else {\n                        succ[nodeMap.get(nodeName)].add(nodeName2);\n                        succ[nodeMap.get(nodeName)].add('-' + nodeName2);\n                    }\n                } else if (track.type === 'haplo') {\n                    succ[nodeMap.get(nodeName)].add('None');\n                }\n                if (_i7 < track.sequence.length - 1) {\n                    nodeName2 = track.sequence[_i7 + 1];\n                    if (nodeName2.charAt(0) === '-') {\n                        pred[nodeMap.get(nodeName)].add(nodeName2.substr(1));\n                    } else {\n                        pred[nodeMap.get(nodeName)].add(nodeName2);\n                        pred[nodeMap.get(nodeName)].add('-' + nodeName2);\n                    }\n                } else if (track.type === 'haplo') {\n                    pred[nodeMap.get(nodeName)].add('None');\n                }\n            }\n        }\n    });\n    for (var _i8 = 0; _i8 < nodes.length; _i8 += 1) {\n        succ[_i8] = Array.from(succ[_i8]);\n        pred[_i8] = Array.from(pred[_i8]);\n    }\n    if (reads && config.showReads) {\n        var sortedNodes = nodes.slice();\n        sortedNodes.sort(compareNodesByOrder);\n        var mergeOffset = new Map();\n        var mergeOrigin = new Map();\n        sortedNodes.forEach(function (node) {\n            var predecessor = mergeableWithPred(nodeMap.get(node.name), pred, succ);\n            if (predecessor) {\n                mergeOffset.set(node.name, mergeOffset.get(predecessor) + nodes[nodeMap.get(predecessor)].sequenceLength);\n                mergeOrigin.set(node.name, mergeOrigin.get(predecessor));\n            } else {\n                mergeOffset.set(node.name, 0);\n                mergeOrigin.set(node.name, node.name);\n            }\n        });\n        reads.forEach(function (read) {\n            read.firstNodeOffset += mergeOffset.get(read.sequence[0]);\n            read.finalNodeCoverLength += mergeOffset.get(read.sequence[read.sequence.length - 1]);\n            for (var _i9 = read.sequence.length - 1; _i9 >= 0; _i9 -= 1) {\n                if (mergeableWithPred(nodeMap.get(read.sequence[_i9]), pred, succ)) {\n                    (function () {\n                        var predecessor = mergeableWithPred(nodeMap.get(read.sequence[_i9]), pred, succ);\n                        if (mergeableWithSucc(nodeMap.get(predecessor), pred, succ)) {\n                            if (_i9 > 0) {\n                                read.sequence.splice(_i9, 1);\n                                read.sequenceNew[_i9].mismatches.forEach(function (mismatch) {\n                                    mismatch.pos += nodes[nodeMap.get(predecessor)].sequenceLength;\n                                });\n                                read.sequenceNew[_i9 - 1].mismatches = read.sequenceNew[_i9 - 1].mismatches.concat(read.sequenceNew[_i9].mismatches);\n                                read.sequenceNew.splice(_i9, 1);\n                            } else {\n                                read.sequence[0] = mergeOrigin.get(read.sequence[0]);\n                                read.sequenceNew[_i9].mismatches.forEach(function (mismatch) {\n                                    mismatch.pos += mergeOffset.get(read.sequenceNew[0].nodeName);\n                                });\n                                read.sequenceNew[0].nodeName = mergeOrigin.get(read.sequenceNew[0].nodeName);\n                            }\n                        }\n                    }());\n                }\n            }\n        });\n    }\n    for (var _i10 = 0; _i10 < nodes.length; _i10 += 1) {\n        if (mergeableWithSucc(_i10, pred, succ) && !mergeableWithPred(_i10, pred, succ)) {\n            var donor = _i10;\n            while (mergeableWithSucc(donor, pred, succ)) {\n                donor = succ[donor][0];\n                if (donor.charAt(0) === '-')\n                    donor = donor.substr(1);\n                donor = nodeMap.get(donor);\n                if (nodes[_i10].hasOwnProperty('sequenceLength')) {\n                    nodes[_i10].sequenceLength += nodes[donor].sequenceLength;\n                } else {\n                    nodes[_i10].width += nodes[donor].width;\n                }\n                nodes[_i10].seq += nodes[donor].seq;\n            }\n        }\n    }\n    tracks.forEach(function (track) {\n        for (var _i11 = track.sequence.length - 1; _i11 >= 0; _i11 -= 1) {\n            nodeName = track.sequence[_i11];\n            if (nodeName.charAt(0) === '-')\n                nodeName = nodeName.substr(1);\n            var nodeIndex = nodeMap.get(nodeName);\n            if (mergeableWithPred(nodeIndex, pred, succ)) {\n                track.sequence.splice(_i11, 1);\n            }\n        }\n    });\n    for (var _i12 = nodes.length - 1; _i12 >= 0; _i12 -= 1) {\n        if (mergeableWithPred(_i12, pred, succ)) {\n            nodes.splice(_i12, 1);\n        }\n    }\n}\nfunction mergeableWithPred(index, pred, succ) {\n    if (pred[index].length !== 1)\n        return false;\n    if (pred[index][0] === 'None')\n        return false;\n    var predecessor = pred[index][0];\n    if (predecessor.charAt(0) === '-')\n        predecessor = predecessor.substr(1);\n    var predecessorIndex = nodeMap.get(predecessor);\n    if (succ[predecessorIndex].length !== 1)\n        return false;\n    if (succ[predecessorIndex][0] === 'None')\n        return false;\n    return predecessor;\n}\nfunction mergeableWithSucc(index, pred, succ) {\n    if (succ[index].length !== 1)\n        return false;\n    if (succ[index][0] === 'None')\n        return false;\n    var successor = succ[index][0];\n    if (successor.charAt(0) === '-')\n        successor = successor.substr(1);\n    var successorIndex = nodeMap.get(successor);\n    if (pred[successorIndex].length !== 1)\n        return false;\n    if (pred[successorIndex][0] === 'None')\n        return false;\n    return true;\n}\nfunction drawMismatches() {\n    tracks.forEach(function (read, trackIdx) {\n        if (read.type === 'read') {\n            read.sequenceNew.forEach(function (element, i) {\n                element.mismatches.forEach(function (mm) {\n                    var nodeIndex = nodeMap.get(element.nodeName);\n                    var node = nodes[nodeIndex];\n                    var x = getXCoordinateOfBaseWithinNode(node, mm.pos);\n                    var pathIndex = i;\n                    while (read.path[pathIndex].node !== nodeIndex) {\n                        pathIndex += 1;\n                    }\n                    var y = read.path[pathIndex].y;\n                    if (mm.type === 'insertion') {\n                        if (config.showSoftClips || (mm.pos !== read.firstNodeOffset || i !== 0) && (mm.pos !== read.finalNodeCoverLength || i !== read.sequenceNew.length - 1)) {\n                            drawInsertion(x - 3, y + 7, mm.seq, node.y);\n                        }\n                    } else if (mm.type === 'deletion') {\n                        var x2 = getXCoordinateOfBaseWithinNode(node, mm.pos + mm.length);\n                        drawDeletion(x, x2, y + 4, node.y);\n                    } else if (mm.type === 'substitution') {\n                        var _x = getXCoordinateOfBaseWithinNode(node, mm.pos + mm.seq.length);\n                        drawSubstitution(x + 1, _x, y + 7, node.y, mm.seq);\n                    }\n                });\n            });\n        }\n    });\n}\nfunction drawInsertion(x, y, seq, nodeY) {\n    svg.append('text').attr('x', x).attr('y', y).text('*').attr('font-family', 'Courier, \"Lucida Console\", monospace').attr('font-size', '12px').attr('fill', 'black').attr('nodeY', nodeY).on('mouseover', insertionMouseOver).on('mouseout', insertionMouseOut).append('svg:title').text(seq);\n}\nfunction drawSubstitution(x1, x2, y, nodeY, seq) {\n    svg.append('text').attr('x', x1).attr('y', y).text(seq).attr('font-family', 'Courier, \"Lucida Console\", monospace').attr('font-size', '12px').attr('fill', 'black').attr('nodeY', nodeY).attr('rightX', x2).on('mouseover', substitutionMouseOver).on('mouseout', substitutionMouseOut);\n}\nfunction drawDeletion(x1, x2, y, nodeY) {\n    svg.append('line').attr('x1', x1).attr('y1', y - 1).attr('x2', x2).attr('y2', y - 1).attr('stroke-width', 7).attr('stroke', 'grey').attr('nodeY', nodeY).on('mouseover', deletionMouseOver).on('mouseout', deletionMouseOut);\n}\nfunction insertionMouseOver() {\n    d3.select(this).attr('fill', 'red');\n    var x = Number(d3.select(this).attr('x'));\n    var y = Number(d3.select(this).attr('y'));\n    var yTop = Number(d3.select(this).attr('nodeY'));\n    svg.append('line').attr('class', 'insertionHighlight').attr('x1', x + 4).attr('y1', y - 10).attr('x2', x + 4).attr('y2', yTop + 5).attr('stroke-width', 1).attr('stroke', 'black');\n}\nfunction deletionMouseOver() {\n    d3.select(this).attr('stroke', 'red');\n    var x1 = Number(d3.select(this).attr('x1'));\n    var x2 = Number(d3.select(this).attr('x2'));\n    var y = Number(d3.select(this).attr('y1'));\n    var yTop = Number(d3.select(this).attr('nodeY'));\n    svg.append('line').attr('class', 'deletionHighlight').attr('x1', x1).attr('y1', y - 3).attr('x2', x1).attr('y2', yTop + 5).attr('stroke-width', 1).attr('stroke', 'black');\n    svg.append('line').attr('class', 'deletionHighlight').attr('x1', x2).attr('y1', y - 3).attr('x2', x2).attr('y2', yTop + 5).attr('stroke-width', 1).attr('stroke', 'black');\n}\nfunction substitutionMouseOver() {\n    d3.select(this).attr('fill', 'red');\n    var x1 = Number(d3.select(this).attr('x'));\n    var x2 = Number(d3.select(this).attr('rightX'));\n    var y = Number(d3.select(this).attr('y'));\n    var yTop = Number(d3.select(this).attr('nodeY'));\n    svg.append('line').attr('class', 'substitutionHighlight').attr('x1', x1 - 1).attr('y1', y - 7).attr('x2', x1 - 1).attr('y2', yTop + 5).attr('stroke-width', 1).attr('stroke', 'black');\n    svg.append('line').attr('class', 'substitutionHighlight').attr('x1', x2 + 1).attr('y1', y - 7).attr('x2', x2 + 1).attr('y2', yTop + 5).attr('stroke-width', 1).attr('stroke', 'black');\n}\nfunction insertionMouseOut() {\n    d3.select(this).attr('fill', 'black');\n    d3.selectAll('.insertionHighlight').remove();\n}\nfunction deletionMouseOut() {\n    d3.select(this).attr('stroke', 'grey');\n    d3.selectAll('.deletionHighlight').remove();\n}\nfunction substitutionMouseOut() {\n    d3.select(this).attr('fill', 'black');\n    d3.selectAll('.substitutionHighlight').remove();\n}","module.exports={\n  \"BACKEND_URL\": false,\n  \"DATA_SOURCES\": [\n    {\n      \"name\": \"snp1kg-BRCA1\",\n      \"xgFile\": \"snp1kg-BRCA1.vg.xg\",\n      \"gamFile\": \"NA12878-BRCA1.sorted.gam\",\n      \"anchorTrackName\": \"17\",\n      \"useMountedPath\": false,\n      \"defaultPosition\": \"1\"\n    },\n    {\n      \"name\": \"cactus\",\n      \"xgFile\": \"cactus.vg.xg\",\n      \"gamFile\": \"cactus-NA12879.sorted.gam\",\n      \"anchorTrackName\": \"ref\",\n      \"useMountedPath\": false,\n      \"defaultPosition\": \"1\"\n    },\n    {\n      \"name\": \"vg \\\"small\\\" example\",\n      \"xgFile\": \"x.vg.xg\",\n      \"gbwtFile\": \"x.vg.gbwt\",\n      \"anchorTrackName\": \"x\",\n      \"useMountedPath\": false,\n      \"defaultPosition\": \"1\"\n    }\n  ]\n}\n","module.exports={\n  \"BACKEND_URL\": \"https://api.wbeyer.com\",\n  // \"BACKEND_URL\": \"http://104.42.76.233:3000\", // tubeMapsDev\n  \"DATA_SOURCES\": [\n    {\n      \"name\": \"Human Chromosome 1\",\n      \"xgFile\": \"chr1.xg\",\n      \"gbwtFile\": \"snp1kg_1.gbwt\",\n      \"gamFile\": \"chunk_0_1_0_249250620.sorted.gam\",\n      \"anchorTrackName\": \"1\",\n      \"useMountedPath\": true,\n      \"defaultPosition\": \"20000\"\n    }\n  ]\n}\n","// JSON Konstruktor für die Überprüfung ob ein Objekt JSON ist\r\nvar jsonC = {}.constructor ;\r\n\r\nvar isJSON = function(json){\r\n\tif(json && json.constructor === jsonC){\r\n\t\treturn true ;\r\n\t}else{\r\n\t\treturn false ;\r\n\t}\r\n}\r\n\r\nexports.isJSON = isJSON ;\r\n\r\n\r\nvar mergeJSON = function(json1, json2){\r\n\tvar result = null ;\r\n\tif(isJSON(json2)){\r\n\t\tresult = {} ;\r\n\t\tif(isJSON(json1)){\r\n\t\t\tfor(var key in json1){\r\n\t\t\t\tresult[key] = json1[key] ;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor(var key in json2){\r\n\t\t\tif(typeof result[key] === \"object\" && typeof json2 === \"object\"){\r\n\t\t\t\tresult[key] = mergeJSON(result[key], json2[key]) ;\r\n\t\t\t}else{\r\n\t\t\t\tresult[key] = json2[key] ;\r\n\t\t\t}\r\n\t\t}\r\n\t}else if(Array.isArray(json1) && Array.isArray(json2)){\r\n\t\tresult = json1 ;\r\n\r\n\t\tfor(var i = 0; i < json2.length; i++){\r\n\t\t\tif(result.indexOf(json2[i]) === -1){\r\n\t\t\t\tresult[result.length] = json2[i] ;\r\n\t\t\t}\r\n\t\t}\r\n\t}else{\r\n\t\tresult = json2 ;\r\n\t}\r\n\r\n\treturn result ;\r\n}\r\n\r\nexports.merge = mergeJSON ;\r\n"]}
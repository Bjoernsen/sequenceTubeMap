{"version":3,"sources":["../.tmp/scripts/node_modules/browser-pack/_prelude.js","../.tmp/scripts/app/scripts/demo-data.js","../.tmp/scripts/app/scripts/examples.js","../.tmp/scripts/app/scripts/tubemap.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","Object","defineProperty","value","inputNodes","name","width","seq","inputTracks1","id","indexOfFirstBase","sequence","freq","inputTracks2","inputTracks3","inputTracks4","inputTracks5","inputTracks6","bed1","track","start","end","type","k3138","read1","read2","read3","read4","read5","demoReads","demoReads2","notch2Simpl100Bed","notch2Simpl1000Bed","_interopRequireWildcard","obj","__esModule","newObj","key","prototype","hasOwnProperty","default","readsFromStringToArray","readsString","lines","split","result","forEach","line","push","JSON","parse","_tubemap","tubeMap","_demoData","data","document","getElementById","onclick","checked","setMergeNodesFlag","setNodeWidthOption","setShowReadsFlag","setSoftClipsFlag","radios","getElementsByClassName","trackType","console","log","colorSet","this","setColorSet","svgN","svgData","XMLSerializer","serializeToString","svgBlob","Blob","svgUrl","URL","createObjectURL","downloadLink","createElement","href","download","body","appendChild","click","removeChild","create","svgID","nodes","tracks","bed","$","removeClass","vg","vgExtractNodes","vgExtractTracks","reads","vgExtractReads","window","onload","params","svg","d3","select","stringify","inputTracks","inputReads","config","clickableNodesFlag","clickableNodes","hideLegendFlag","hideLegend","createTubeMap","drawLegend","moveTrackToFirstPosition","index","unshift","splice","straightenTrack","j","nodesToInvert","currentSequence","nodeName","charAt","substr","indexOf","node","reverse","join","changeTrackVisibility","trackID","hidden","changeExonVisibility","showExonsFlag","mergeNodesFlag","showSoftClips","showReads","nodeWidthOption","undefined","trackRectangles","trackCurves","trackCorners","trackVerticalRectangles","trackRectanglesStep3","assignments","extraLeft","extraRight","maxYCoordinate","minYCoordinate","maxXCoordinate","trackForRuler","selectAll","remove","assignColorSets","nodeMap","generateNodeMap","generateTrackIndexSequences","generateNodeWidth","generateNodeSuccessors","generateNodeOrder","reverseReversedReads","mergeNodes","numberOfNodes","numberOfTracks","generateNodeDegree","DEBUG","maxOrder","getMaxOrder","calculateTrackWidth","generateLaneAssignment","addTrackFeatures","generateNodeXCoords","generateReadOnlyNodeAttributes","placeReads","concat","generateSVGShapesFromPath","getImageDimensions","alignSVG","defineSVGPatterns","drawTrackRectangles","drawTrackCurves","drawReversalsByColor","dNodes","removeUnusedNodes","drawNodes","drawLabels","drawRuler","drawMismatches","nodesPerOrder","orderY","Map","has","order","set","Math","max","y","contentHeight","get","assignReadsToNodes","incomingReads","outgoingReads","internalReads","read","idx","path","element","pathIdx","generateBasicPathsForReads","sortedNodes","slice","sort","compareNodesByOrder","compareReadIncomingSegmentsByComingFrom","currentY","occupiedUntil","readElement","setOccupiedUntil","maxY","compareReadOutgoingSegmentsByGoingTo","occupiedFrom","firstNodeOffset","incReadElementIndices","incRead","incReadPathElement","compareInternalReads","readIdx","currentRead","finalNodeCoverLength","heightIncrease","adjustVertically3","bottomY","calculateBottomY","elementsWithoutNode","readIndex","pathIndex","previousY","compareNoNodeReadsByPreviousY","segment","map","sequenceLength","b","segmentA","segmentB","pathIndexA","pathIndexB","nodeA","nodeB","beginDiff","pathA","pathB","idxA","idxB","currentNodeIndex","currentNodeIsForward","currentNode","previousNode","previousNodeIsForward","isPositive","abs","indexSequence","isForward","_j","pos","is_reverse","sequenceNew","_i","nodeWidth","mismatches","mm","getReverseComplement","temp","seqLength","s","tracksOrReads","allNodes","x","pixelWidth","min","zoomed","transform","event","k","attr","svg2","clientWidth","parent","zoom","scaleExtent","translateExtent","on","append","zoomIdentity","translate","zoomBy","zoomFactor","minZoom","substring","parentElement","zoomTransform","translateK","translateX","translateY","transition","duration","scale","current","follower","successors","predecessors","generateNodeOrderOfSingleTrack","forwardOrder","backwardOrder","minOrder","nodeIndex","increaseOrderForAllNodes","generateNodeOrderTrackBeginning","anchorIndex","currentOrder","increment","modifiedSequence","rightIndex","leftIndex","tracksAndReads","uninvert","increaseOrderForSuccessors","isSuccessor","degree","_j2","_j3","_j4","first","second","visited","Array","fill","stack","pop","childIndex","amount","startingNode","tabuNode","newOrder","increasedOrders","queue","shift","successor","predecessor","currentX","nextX","extra","calculateExtraSpace","leftSideEdges","rightSideEdges","_i2","_i3","segmentNumber","prevSegmentPerOrderPerTrack","trackNo","lane","addToAssignment","_i4","_j5","_j6","_i5","generateSingleLaneAssignment","segmentID","compareToFromSame","getIdealLanesAndCoords","assignment","idealLane","idealY","currentLane","potentialAdjustmentValues","Set","prevNameIsNull","prevTrack","compareByIdealLane","topLane","add","adjustVertically","verticalAdjustment","minAdjustmentCost","Number","MAX_SAFE_INTEGER","moveBy","getVerticalAdjustmentCost","adjustBy","assignmentNode","aNode","nodeStart","nodeEnd","feature","continue","features","allAreFour","round","useColorScheme","colorScheme","haplotypeColors","getColorSet","forwardReadColors","reverseReadColors","exonColors","colorSetName","plainColors","reds","blues","greys","lightColors","generateTrackColor","highlight","getReadXStart","getXCoordinateOfBaseWithinNode","getReadXEnd","base","nodeLeftX","nodeRightX","xStart","xEnd","yStart","yEnd","trackColor","dummy","reversalFlag","orderStartX","orderEndX","_i6","createFeatureRectangle","color","laneChange","generateForwardToReverse","generateReverseToForward","nodeXStart","nodeXEnd","rectXStart","currentHighlight","co","featureXStart","featureXEnd","trackWidth","yTop","yBottom","d","corners","rectangles","rect","filter","filterObjectByAttribute","drawTrackCorners","enter","nodeMouseOver","nodeMouseOut","nodeDoubleClick","style","text","rulerTrackIndex","rulerTrack","markingInterval","indexOfFirstBaseInNode","atLeastOneMarkingDrawn","xCoordOfPreviousMarking","firstNode","drawRulerMarking","nextMarking","ceil","xCoordOfMarking","sequencePosition","xCoordinate","attribute","item","trackMouseOver","trackMouseOut","trackDoubleClick","compareCurvesByLineChanges","defs","pattern","attrs","height","patternUnits","patternTransform","myTrackCurves","curve","xMiddle","content","listeners","html","addEventListener","each","nodeID","getComputedTextLength","isCompletelyReverse","mapping","position","node_id","index2","myNodes","myTracks","myReads","extracted","nodeNames","firstIndex","lastIndex","edit","offset","toString","parseInt","posWithinNode","from_length","finalNodeEdit","nodeName2","pred","succ","_i7","_i8","from","mergeOffset","mergeOrigin","mergeableWithPred","_i9","mergeableWithSucc","mismatch","_i10","donor","_i11","_i12","predecessorIndex","successorIndex","trackIdx","drawInsertion","x2","drawDeletion","_x","drawSubstitution","nodeY","insertionMouseOver","insertionMouseOut","x1","substitutionMouseOver","substitutionMouseOut","deletionMouseOver","deletionMouseOut"],"mappings":"CAAA,WAAA,QAAAA,GAAAC,EAAAC,EAAAC,GAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,GAAAE,GAAA,kBAAAC,UAAAA,OAAA,KAAAF,GAAAC,EAAA,MAAAA,GAAAF,GAAA,EAAA,IAAAI,EAAA,MAAAA,GAAAJ,GAAA,EAAA,IAAAK,GAAA,GAAAC,OAAA,uBAAAN,EAAA,IAAA,MAAAK,GAAAE,KAAA,mBAAAF,EAAA,GAAAG,GAAAX,EAAAG,IAAAS,WAAAb,GAAAI,GAAA,GAAAU,KAAAF,EAAAC,QAAA,SAAAd,GAAA,MAAAI,GAAAH,EAAAI,GAAA,GAAAL,IAAAA,IAAAa,EAAAA,EAAAC,QAAAd,EAAAC,EAAAC,EAAAC,GAAA,MAAAD,GAAAG,GAAAS,QAAA,IAAA,GAAAL,GAAA,kBAAAD,UAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAa,OAAAX,IAAAD,EAAAD,EAAAE,GAAA,OAAAD,GAAA,MAAAJ,OAAAiB,GAAA,SAAAT,EAAAU,EAAAJ,GCAA,YACAK,QAAAC,eAAAN,EAAA,cAAAO,OAAA,GACAP,GAAAQ,aAEAC,KAAA,IACAC,MAAA,EACAC,IAAA,MAGAF,KAAA,IACAC,MAAA,EACAC,IAAA,OAGAF,KAAA,IACAC,MAAA,EACAC,IAAA,MAGAF,KAAA,IACAC,MAAA,EACAC,IAAA,QAGAF,KAAA,IACAC,MAAA,EACAC,IAAA,MAGAF,KAAA,IACAC,MAAA,EACAC,IAAA,MAGAF,KAAA,IACAC,MAAA,EACAC,IAAA,QAGAF,KAAA,IACAC,MAAA,EACAC,IAAA,MAGAF,KAAA,IACAC,MAAA,EACAC,IAAA,MAGAF,KAAA,IACAC,MAAA,EACAC,IAAA,QAGAF,KAAA,IACAC,MAAA,EACAC,IAAA,MAGAF,KAAA,IACAC,MAAA,EACAC,IAAA,MAGAF,KAAA,IACAC,MAAA,EACAC,IAAA,MAGAF,KAAA,IACAC,MAAA,EACAC,IAAA,MAGAF,KAAA,IACAC,MAAA,EACAC,IAAA,MAGAF,KAAA,IACAC,MAAA,EACAC,IAAA,OAGAF,KAAA,IACAC,MAAA,EACAC,IAAA,MAGAF,KAAA,IACAC,MAAA,EACAC,IAAA,OAGAF,KAAA,IACAC,MAAA,EACAC,IAAA,OAGAF,KAAA,IACAC,MAAA,EACAC,IAAA,QAGAF,KAAA,IACAC,MAAA,EACAC,IAAA,MAGAF,KAAA,IACAC,MAAA,EACAC,IAAA,MAGAF,KAAA,IACAC,MAAA,EACAC,IAAA,aAGAF,KAAA,IACAC,MAAA,EACAC,IAAA,MAGAF,KAAA,IACAC,MAAA,EACAC,IAAA,MAGAF,KAAA,IACAC,MAAA,EACAC,IAAA,MAGAF,KAAA,KACAC,MAAA,EACAC,IAAA,QAGAF,KAAA,KACAC,MAAA,EACAC,IAAA,MAGAF,KAAA,KACAC,MAAA,EACAC,IAAA,MAGAF,KAAA,KACAC,MAAA,EACAC,IAAA,MAGAF,KAAA,KACAC,MAAA,EACAC,IAAA,MAGAF,KAAA,KACAC,MAAA,EACAC,IAAA,MAGAF,KAAA,KACAC,MAAA,EACAC,IAAA,QAGAX,EAAAY,eAEAC,GAAA,EACAJ,KAAA,UACAK,iBAAA,EACAC,UACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,KACA,MAEAC,KAAA,MAGAH,GAAA,EACAJ,KAAA,UACAM,UACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,KACA,MAEAC,KAAA,KAGAH,GAAA,EACAJ,KAAA,UACAM,UACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,KACA,MAEAC,KAAA,MAGAH,GAAA,EACAJ,KAAA,UACAM,UACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,KACA,MAEAC,KAAA,IAGAH,GAAA,EACAJ,KAAA,UACAM,UACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,KACA,MAEAC,KAAA,IAGAhB,EAAAiB,eAEAJ,GAAA,EACAJ,KAAA,UACAK,iBAAA,EACAC,UACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,MAEAC,KAAA,MAGAH,GAAA,EACAJ,KAAA,UACAM,UACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,MAEAC,KAAA,MAGAH,GAAA,EACAJ,KAAA,UACAM,UACA,IACA,IACA,IACA,IACA,KACA,KACA,KACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,IACA,IACA,IACA,MACA,KACA,MAEAC,KAAA,KAGAH,GAAA,EACAJ,KAAA,UACAM,UACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,KACA,KACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,KACA,MAEAC,KAAA,KAGAH,GAAA,EACAJ,KAAA,UACAM,UACA,IACA,IACA,IACA,KACA,KACA,KACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,KACA,MAEAC,KAAA,IAGAhB,EAAAkB,eAEAL,GAAA,EACAJ,KAAA,UACAK,iBAAA,EACAC,UACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,KACA,QAIAF,GAAA,EACAJ,KAAA,UACAM,UACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,KACA,QAIAF,GAAA,EACAJ,KAAA,UACAM,UACA,IACA,IACA,IACA,KACA,IACA,KACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,IACA,IACA,IACA,MACA,MACA,KACA,QAIAF,GAAA,EACAJ,KAAA,UACAM,UACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,KACA,KACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,KACA,QAIAF,GAAA,EACAJ,KAAA,UACAM,UACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,KACA,QAIAf,EAAAmB,eAEAN,GAAA,EACAJ,KAAA,UACAK,iBAAA,EACAC,UACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,KACA,QAIAF,GAAA,EACAJ,KAAA,UACAM,UACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,KACA,QAIAF,GAAA,EACAJ,KAAA,UACAM,UACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,KACA,QAIAF,GAAA,EACAJ,KAAA,UACAM,UACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,KACA,QAIAF,GAAA,EACAJ,KAAA,UACAM,UACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,KACA,QAIAf,EAAAoB,eAEAP,GAAA,EACAJ,KAAA,UACAK,iBAAA,EACAC,UACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,KACA,QAIAF,GAAA,EACAJ,KAAA,UACAM,UACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,KACA,QAIAF,GAAA,EACAJ,KAAA,UACAM,UACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,KACA,QAIAF,GAAA,EACAJ,KAAA,UACAM,UACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,KACA,QAIAF,GAAA,EACAJ,KAAA,UACAM,UACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,KACA,QAIAf,EAAAqB,eAEAR,GAAA,EACAJ,KAAA,KACAK,iBAAA,EACAC,UACA,IACA,IACA,IACA,OAIAF,GAAA,EACAJ,KAAA,KACAM,UACA,IACA,KACA,KACA,QAIAF,GAAA,EACAJ,KAAA,KACAM,UACA,IACA,KACA,KACA,QAIAf,EAAAsB,OAEAC,MAAA,UACAC,MAAA,GACAC,IAAA,GACAC,KAAA,OACAjB,KAAA,UAGAc,MAAA,UACAC,MAAA,GACAC,IAAA,GACAC,KAAA,OACAjB,KAAA,UAGAc,MAAA,UACAC,MAAA,GACAC,IAAA,GACAC,KAAA,OACAjB,KAAA,UAGAc,MAAA,UACAC,MAAA,GACAC,IAAA,GACAC,KAAA,OACAjB,KAAA,UAGAc,MAAA,UACAC,MAAA,EACAC,IAAA,EACAC,KAAA,OACAjB,KAAA,UAGAc,MAAA,UACAC,MAAA,EACAC,IAAA,GACAC,KAAA,OACAjB,KAAA,UAGAT,EAAA2B,MAAA,q/uBACA3B,EAAA4B,MAAA,qrBACA5B,EAAA6B,MAAA,2eACA7B,EAAA8B,MAAA;6jGACA9B,EAAA+B,MAAA,qjGACA/B,EAAAgC,MAAA,i9FACAhC,EAAAiC,UAAA,ugUACAjC,EAAAkC,WAAA,spBACAlC,EAAAmC,oBAEAZ,MAAA,SACAC,MAAA,MACAC,IAAA,MACAC,KAAA,OACAjB,KAAA,UAGAc,MAAA,SACAC,MAAA,MACAC,IAAA,MACAC,KAAA,OACAjB,KAAA,UAGAc,MAAA,SACAC,MAAA,MACAC,IAAA,MACAC,KAAA,OACAjB,KAAA,UAGAc,MAAA,SACAC,MAAA,MACAC,IAAA,MACAC,KAAA,OACAjB,KAAA,UAGAc,MAAA,SACAC,MAAA,MACAC,IAAA,MACAC,KAAA,OACAjB,KAAA,UAGAc,MAAA,YACAC,MAAA,MACAC,IAAA,MACAC,KAAA,OACAjB,KAAA,UAGAc,MAAA,YACAC,MAAA,MACAC,IAAA,MACAC,KAAA,OACAjB,KAAA,UAGAc,MAAA,YACAC,MAAA,MACAC,IAAA,MACAC,KAAA,OACAjB,KAAA,UAGAc,MAAA,YACAC,MAAA,MACAC,IAAA,MACAC,KAAA,OACAjB,KAAA,UAGAc,MAAA,YACAC,MAAA,MACAC,IAAA,MACAC,KAAA,OACAjB,KAAA,UAGAc,MAAA,YACAC,MAAA,MACAC,IAAA,MACAC,KAAA,OACAjB,KAAA,UAGAc,MAAA,YACAC,MAAA,MACAC,IAAA,MACAC,KAAA,OACAjB,KAAA,UAGAc,MAAA,YACAC,MAAA,MACAC,IAAA,MACAC,KAAA,OACAjB,KAAA,UAGAc,MAAA,YACAC,MAAA,MACAC,IAAA,MACAC,KAAA,OACAjB,KAAA,UAGAc,MAAA,YACAC,MAAA,MACAC,IAAA,MACAC,KAAA,OACAjB,KAAA,UAGAc,MAAA,YACAC,MAAA,MACAC,IAAA,MACAC,KAAA,OACAjB,KAAA,UAGAc,MAAA,YACAC,MAAA,MACAC,IAAA,MACAC,KAAA,OACAjB,KAAA,UAGAc,MAAA,YACAC,MAAA,MACAC,IAAA,MACAC,KAAA,OACAjB,KAAA,UAGAc,MAAA,YACAC,MAAA,MACAC,IAAA,MACAC,KAAA,OACAjB,KAAA,UAGAc,MAAA,YACAC,MAAA,MACAC,IAAA,MACAC,KAAA,OACAjB,KAAA,UAGAc,MAAA,YACAC,MAAA,MACAC,IAAA,MACAC,KAAA,OACAjB,KAAA,UAGAc,MAAA,YACAC,MAAA,MACAC,IAAA,MACAC,KAAA,OACAjB,KAAA,UAGAc,MAAA,YACAC,MAAA,MACAC,IAAA,MACAC,KAAA,OACAjB,KAAA,UAGAc,MAAA,YACAC,MAAA,MACAC,IAAA,MACAC,KAAA,OACAjB,KAAA,UAGAc,MAAA,YACAC,MAAA,MACAC,IAAA,MACAC,KAAA,OACAjB,KAAA,UAGAT,EAAAoC,qBAEAb,MAAA,SACAC,MAAA,MACAC,IAAA,MACAC,KAAA,OACAjB,KAAA,UAGAc,MAAA,SACAC,MAAA,MACAC,IAAA,MACAC,KAAA,OACAjB,KAAA,UAGAc,MAAA,SACAC,MAAA,MACAC,IAAA,MACAC,KAAA,OACAjB,KAAA,UAGAc,MAAA,SACAC,MAAA,MACAC,IAAA,MACAC,KAAA,OACAjB,KAAA,UAGAc,MAAA,SACAC,MAAA,MACAC,IAAA,MACAC,KAAA,OACAjB,KAAA,UAGAc,MAAA,YACAC,MAAA,MACAC,IAAA,MACAC,KAAA,OACAjB,KAAA,UAGAc,MAAA,YACAC,MAAA,MACAC,IAAA,MACAC,KAAA,OACAjB,KAAA,UAGAc,MAAA,YACAC,MAAA,MACAC,IAAA,MACAC,KAAA,OACAjB,KAAA,UAGAc,MAAA,YACAC,MAAA,MACAC,IAAA,MACAC,KAAA,OACAjB,KAAA,UAGAc,MAAA,YACAC,MAAA,MACAC,IAAA,MACAC,KAAA,OACAjB,KAAA,UAGAc,MAAA,YACAC,MAAA,MACAC,IAAA,MACAC,KAAA,OACAjB,KAAA,UAGAc,MAAA,YACAC,MAAA,MACAC,IAAA,MACAC,KAAA,OACAjB,KAAA,UAGAc,MAAA,YACAC,MAAA,MACAC,IAAA,MACAC,KAAA,OACAjB,KAAA,UAGAc,MAAA,YACAC,MAAA,MACAC,IAAA,MACAC,KAAA,OACAjB,KAAA,UAGAc,MAAA,YACAC,MAAA,MACAC,IAAA,MACAC,KAAA,OACAjB,KAAA,UAGAc,MAAA,YACAC,MAAA,MACAC,IAAA,MACAC,KAAA,OACAjB,KAAA,UAGAc,MAAA,YACAC,MAAA,MACAC,IAAA,MACAC,KAAA,OACAjB,KAAA,UAGAc,MAAA,YACAC,MAAA,MACAC,IAAA,MACAC,KAAA,OACAjB,KAAA,UAGAc,MAAA,YACAC,MAAA,MACAC,IAAA,MACAC,KAAA,OACAjB,KAAA,UAGAc,MAAA,YACAC,MAAA,MACAC,IAAA,MACAC,KAAA,OACAjB,KAAA,UAGAc,MAAA,YACAC,MAAA,MACAC,IAAA,MACAC,KAAA,OACAjB,KAAA,UAGAc,MAAA,YACAC,MAAA,MACAC,IA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","file":"examples.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","'use strict';\nObject.defineProperty(exports, '__esModule', { value: true });\nvar inputNodes = exports.inputNodes = [\n        {\n            name: 'A',\n            width: 1,\n            seq: 'A'\n        },\n        {\n            name: 'B',\n            width: 2,\n            seq: 'AA'\n        },\n        {\n            name: 'C',\n            width: 1,\n            seq: 'T'\n        },\n        {\n            name: 'D',\n            width: 3,\n            seq: 'GGG'\n        },\n        {\n            name: 'E',\n            width: 1,\n            seq: 'A'\n        },\n        {\n            name: 'F',\n            width: 1,\n            seq: 'G'\n        },\n        {\n            name: 'G',\n            width: 3,\n            seq: 'ATG'\n        },\n        {\n            name: 'H',\n            width: 1,\n            seq: 'T'\n        },\n        {\n            name: 'I',\n            width: 1,\n            seq: 'C'\n        },\n        {\n            name: 'J',\n            width: 3,\n            seq: 'TAA'\n        },\n        {\n            name: 'K',\n            width: 1,\n            seq: 'C'\n        },\n        {\n            name: 'L',\n            width: 1,\n            seq: 'G'\n        },\n        {\n            name: 'M',\n            width: 1,\n            seq: 'C'\n        },\n        {\n            name: 'N',\n            width: 1,\n            seq: 'A'\n        },\n        {\n            name: 'O',\n            width: 1,\n            seq: 'C'\n        },\n        {\n            name: 'P',\n            width: 2,\n            seq: 'AA'\n        },\n        {\n            name: 'Q',\n            width: 1,\n            seq: 'T'\n        },\n        {\n            name: 'R',\n            width: 3,\n            seq: 'CG'\n        },\n        {\n            name: 'S',\n            width: 2,\n            seq: 'GA'\n        },\n        {\n            name: 'T',\n            width: 3,\n            seq: 'GTT'\n        },\n        {\n            name: 'U',\n            width: 1,\n            seq: 'A'\n        },\n        {\n            name: 'V',\n            width: 1,\n            seq: 'G'\n        },\n        {\n            name: 'W',\n            width: 8,\n            seq: 'TTGTCTCT'\n        },\n        {\n            name: 'X',\n            width: 1,\n            seq: 'T'\n        },\n        {\n            name: 'Y',\n            width: 1,\n            seq: 'C'\n        },\n        {\n            name: 'Z',\n            width: 1,\n            seq: 'A'\n        },\n        {\n            name: 'AA',\n            width: 3,\n            seq: 'CGA'\n        },\n        {\n            name: 'AB',\n            width: 1,\n            seq: 'T'\n        },\n        {\n            name: 'AC',\n            width: 1,\n            seq: 'G'\n        },\n        {\n            name: 'AD',\n            width: 1,\n            seq: 'A'\n        },\n        {\n            name: 'AE',\n            width: 1,\n            seq: 'G'\n        },\n        {\n            name: 'AF',\n            width: 1,\n            seq: 'T'\n        },\n        {\n            name: 'AG',\n            width: 3,\n            seq: 'GTG'\n        }\n    ];\nvar inputTracks1 = exports.inputTracks1 = [\n        {\n            id: 0,\n            name: 'Track A',\n            indexOfFirstBase: 1,\n            sequence: [\n                'A',\n                'B',\n                'D',\n                'E',\n                'G',\n                'H',\n                'J',\n                'K',\n                'M',\n                'N',\n                'P',\n                'Q',\n                'S',\n                'U',\n                'W',\n                'X',\n                'Z',\n                'AA',\n                'AE',\n                'AG'\n            ],\n            freq: 3000\n        },\n        {\n            id: 1,\n            name: 'Track B',\n            sequence: [\n                'A',\n                'B',\n                'D',\n                'E',\n                'G',\n                'H',\n                'J',\n                'K',\n                'M',\n                'N',\n                'Q',\n                'S',\n                'U',\n                'AA',\n                'AE',\n                'AG'\n            ],\n            freq: 15\n        },\n        {\n            id: 2,\n            name: 'Track C',\n            sequence: [\n                'A',\n                'B',\n                'D',\n                'E',\n                'G',\n                'H',\n                'J',\n                'K',\n                'M',\n                'N',\n                'P',\n                'Q',\n                'S',\n                'V',\n                'W',\n                'X',\n                'Z',\n                'AB',\n                'AE',\n                'AG'\n            ],\n            freq: 300\n        },\n        {\n            id: 3,\n            name: 'Track D',\n            sequence: [\n                'B',\n                'C',\n                'D',\n                'E',\n                'G',\n                'H',\n                'J',\n                'L',\n                'M',\n                'N',\n                'P',\n                'R',\n                'S',\n                'U',\n                'W',\n                'Y',\n                'Z',\n                'AC',\n                'AF',\n                'AG'\n            ],\n            freq: 4\n        },\n        {\n            id: 4,\n            name: 'Track E',\n            sequence: [\n                'B',\n                'D',\n                'F',\n                'G',\n                'I',\n                'J',\n                'L',\n                'M',\n                'O',\n                'P',\n                'Q',\n                'S',\n                'T',\n                'V',\n                'W',\n                'Y',\n                'Z',\n                'AD',\n                'AF',\n                'AG'\n            ],\n            freq: 2\n        }\n    ];\nvar inputTracks2 = exports.inputTracks2 = [\n        {\n            id: 0,\n            name: 'Track A',\n            indexOfFirstBase: 1,\n            sequence: [\n                'A',\n                'B',\n                'D',\n                'E',\n                'G',\n                'H',\n                'J',\n                'K',\n                'M',\n                'N',\n                'P',\n                'Q',\n                'S',\n                'U',\n                'W',\n                'X',\n                'Z',\n                'AA',\n                'AG'\n            ],\n            freq: 4000\n        },\n        {\n            id: 1,\n            name: 'Track B',\n            sequence: [\n                'A',\n                'B',\n                'D',\n                'E',\n                'G',\n                'H',\n                'J',\n                'K',\n                'M',\n                'N',\n                'Q',\n                'S',\n                'U',\n                'AA',\n                'AG'\n            ],\n            freq: 150\n        },\n        {\n            id: 2,\n            name: 'Track C',\n            sequence: [\n                'A',\n                'B',\n                'D',\n                'F',\n                '-H',\n                '-G',\n                '-E',\n                'J',\n                'K',\n                'M',\n                'N',\n                'P',\n                'Q',\n                'S',\n                'AB',\n                'V',\n                'W',\n                'X',\n                '-AA',\n                '-Z',\n                'AG'\n            ],\n            freq: 30\n        },\n        {\n            id: 3,\n            name: 'Track D',\n            sequence: [\n                'B',\n                'C',\n                'D',\n                'E',\n                'G',\n                'H',\n                'J',\n                'L',\n                '-P',\n                '-N',\n                '-M',\n                'R',\n                'S',\n                'U',\n                'W',\n                'Y',\n                'Z',\n                'AC',\n                'AF',\n                'AG'\n            ],\n            freq: 10\n        },\n        {\n            id: 4,\n            name: 'Track E',\n            sequence: [\n                'B',\n                'D',\n                'F',\n                '-J',\n                '-I',\n                '-G',\n                'L',\n                'M',\n                'O',\n                'P',\n                'Q',\n                'S',\n                'T',\n                'V',\n                'W',\n                'Y',\n                'Z',\n                'AD',\n                'AF',\n                'AG'\n            ],\n            freq: 3\n        }\n    ];\nvar inputTracks3 = exports.inputTracks3 = [\n        {\n            id: 0,\n            name: 'Track A',\n            indexOfFirstBase: 1,\n            sequence: [\n                'A',\n                'B',\n                'D',\n                'E',\n                'G',\n                'H',\n                'J',\n                'K',\n                'M',\n                'N',\n                'P',\n                'Q',\n                'S',\n                'U',\n                'W',\n                'X',\n                'Z',\n                'AA',\n                'AE',\n                'AG'\n            ]\n        },\n        {\n            id: 1,\n            name: 'Track B',\n            sequence: [\n                'A',\n                'B',\n                'D',\n                'E',\n                'G',\n                'H',\n                'J',\n                'K',\n                'M',\n                'N',\n                'Q',\n                'S',\n                'U',\n                'AA',\n                'AE',\n                'AG'\n            ]\n        },\n        {\n            id: 2,\n            name: 'Track C',\n            sequence: [\n                'A',\n                'B',\n                'D',\n                '-H',\n                'G',\n                '-E',\n                'J',\n                'K',\n                'M',\n                'N',\n                'P',\n                'Q',\n                'S',\n                'AB',\n                'V',\n                'W',\n                'X',\n                '-AE',\n                '-AA',\n                '-Z',\n                'AG'\n            ]\n        },\n        {\n            id: 3,\n            name: 'Track D',\n            sequence: [\n                'B',\n                'C',\n                'D',\n                'E',\n                'G',\n                'H',\n                'J',\n                'L',\n                '-P',\n                '-N',\n                '-M',\n                'R',\n                'S',\n                'U',\n                'W',\n                'Y',\n                'Z',\n                'AC',\n                'AF',\n                'AG'\n            ]\n        },\n        {\n            id: 4,\n            name: 'Track E',\n            sequence: [\n                'B',\n                'D',\n                'F',\n                'G',\n                'I',\n                'J',\n                'L',\n                'M',\n                'O',\n                'P',\n                'Q',\n                'S',\n                'T',\n                'V',\n                'W',\n                'Y',\n                'Z',\n                'AD',\n                'AF',\n                'AG'\n            ]\n        }\n    ];\nvar inputTracks4 = exports.inputTracks4 = [\n        {\n            id: 0,\n            name: 'Track A',\n            indexOfFirstBase: 1,\n            sequence: [\n                'A',\n                'B',\n                'D',\n                'E',\n                'G',\n                'H',\n                'J',\n                'K',\n                'M',\n                'N',\n                'P',\n                'Q',\n                'S',\n                'U',\n                'W',\n                'X',\n                'Z',\n                'AA',\n                'AE',\n                'AG'\n            ]\n        },\n        {\n            id: 1,\n            name: 'Track B',\n            sequence: [\n                'A',\n                'B',\n                'D',\n                'E',\n                'G',\n                'H',\n                'J',\n                'K',\n                'M',\n                'J',\n                'N',\n                'Q',\n                'S',\n                'U',\n                'AA',\n                'AE',\n                'AG'\n            ]\n        },\n        {\n            id: 2,\n            name: 'Track C',\n            sequence: [\n                'A',\n                'B',\n                'D',\n                'E',\n                'G',\n                'H',\n                'J',\n                'K',\n                'M',\n                'N',\n                'P',\n                'Q',\n                'S',\n                'V',\n                'W',\n                'X',\n                'Z',\n                'AB',\n                'AE',\n                'AG'\n            ]\n        },\n        {\n            id: 3,\n            name: 'Track D',\n            sequence: [\n                'B',\n                'C',\n                'D',\n                'E',\n                'D',\n                'E',\n                'G',\n                'H',\n                'J',\n                'L',\n                'M',\n                'N',\n                'P',\n                'R',\n                'S',\n                'U',\n                'W',\n                'Y',\n                'Z',\n                'AC',\n                'AF',\n                'AG'\n            ]\n        },\n        {\n            id: 4,\n            name: 'Track E',\n            sequence: [\n                'B',\n                'D',\n                'F',\n                'G',\n                'I',\n                'J',\n                'L',\n                'M',\n                'O',\n                'P',\n                'Q',\n                'S',\n                'T',\n                'V',\n                'W',\n                'Y',\n                'Z',\n                'AD',\n                'AF',\n                'AG'\n            ]\n        }\n    ];\nvar inputTracks5 = exports.inputTracks5 = [\n        {\n            id: 0,\n            name: 'Track A',\n            indexOfFirstBase: 1,\n            sequence: [\n                'A',\n                'B',\n                'D',\n                'E',\n                'G',\n                'H',\n                'J',\n                'K',\n                'M',\n                'N',\n                'P',\n                'Q',\n                'S',\n                'U',\n                'W',\n                'X',\n                'Z',\n                'AA',\n                'AE',\n                'AG'\n            ]\n        },\n        {\n            id: 1,\n            name: 'Track B',\n            sequence: [\n                'A',\n                'B',\n                'D',\n                'E',\n                'G',\n                'H',\n                'J',\n                'Q',\n                'K',\n                'M',\n                'N',\n                'S',\n                'U',\n                'AA',\n                'AE',\n                'AG'\n            ]\n        },\n        {\n            id: 2,\n            name: 'Track C',\n            sequence: [\n                'A',\n                'B',\n                'D',\n                'E',\n                'G',\n                'H',\n                'J',\n                'K',\n                'M',\n                'N',\n                'P',\n                'Q',\n                'S',\n                'V',\n                'W',\n                'X',\n                'Z',\n                'AB',\n                'AE',\n                'AG'\n            ]\n        },\n        {\n            id: 3,\n            name: 'Track D',\n            sequence: [\n                'B',\n                'C',\n                'D',\n                'H',\n                'E',\n                'G',\n                'J',\n                'L',\n                'M',\n                'N',\n                'P',\n                'R',\n                'S',\n                'U',\n                'W',\n                'Y',\n                'Z',\n                'AC',\n                'AF',\n                'AG'\n            ]\n        },\n        {\n            id: 4,\n            name: 'Track E',\n            sequence: [\n                'B',\n                'D',\n                'F',\n                'G',\n                'I',\n                'J',\n                'L',\n                'M',\n                'O',\n                'P',\n                'Q',\n                'S',\n                'T',\n                'V',\n                'W',\n                'Y',\n                'Z',\n                'AD',\n                'AF',\n                'AG'\n            ]\n        }\n    ];\nvar inputTracks6 = exports.inputTracks6 = [\n        {\n            id: 0,\n            name: 'F1',\n            indexOfFirstBase: 1,\n            sequence: [\n                'E',\n                'D',\n                'C',\n                'B'\n            ]\n        },\n        {\n            id: 1,\n            name: 'R1',\n            sequence: [\n                'A',\n                '-B',\n                '-C',\n                '-D'\n            ]\n        },\n        {\n            id: 2,\n            name: 'R2',\n            sequence: [\n                'A',\n                '-B',\n                '-C',\n                '-D'\n            ]\n        }\n    ];\nvar bed1 = exports.bed1 = [\n        {\n            track: 'Track A',\n            start: 23,\n            end: 27,\n            type: 'exon',\n            name: 'exon1'\n        },\n        {\n            track: 'Track A',\n            start: 29,\n            end: 30,\n            type: 'exon',\n            name: 'exon1'\n        },\n        {\n            track: 'Track A',\n            start: 17,\n            end: 20,\n            type: 'exon',\n            name: 'exon4'\n        },\n        {\n            track: 'Track A',\n            start: 37,\n            end: 37,\n            type: 'exon',\n            name: 'exon2'\n        },\n        {\n            track: 'Track A',\n            start: 0,\n            end: 1,\n            type: 'exon',\n            name: 'exon3'\n        },\n        {\n            track: 'Track C',\n            start: 7,\n            end: 12,\n            type: 'exon',\n            name: 'exon3'\n        }\n    ];\nvar k3138 = exports.k3138 = '\\n{\"node\": [{\"sequence\": \"G\", \"id\": 1},\\n{\"sequence\": \"AGGT\", \"id\": 2},\\n{\"sequence\": \"T\", \"id\": 3},\\n{\"sequence\": \"A\", \"id\": 4},\\n{\"sequence\": \"CCCACTCCATAAGGTA\", \"id\": 5},\\n{\"sequence\": \"G\", \"id\": 6},\\n{\"sequence\": \"T\", \"id\": 7},\\n{\"sequence\": \"TTCAGCACCG\", \"id\": 8},\\n{\"sequence\": \"CCGTGTCCCGGCCGGGTCGCGGGGAGCCC\", \"id\": 9},\\n{\"sequence\": \"C\", \"id\": 10}, {\"sequence\": \"G\", \"id\": 11}, {\"sequence\": \"GG\", \"id\": 12}, {\"sequence\": \"TACATCGCAGTGGGCTACGTGGACGACACGCA\", \"id\": 13}, {\"sequence\": \"GTTCGTGCGGTTCGACAGCGACGCGGCGACTC\", \"id\": 14}, {\"sequence\": \"CGAGGA\", \"id\": 15}, {\"sequence\": \"T\", \"id\": 16}, {\"sequence\": \"C\", \"id\": 17}, {\"sequence\": \"GTAGCCGCAG\", \"id\": 18}, {\"sequence\": \"G\", \"id\": 19}, {\"sequence\": \"T\", \"id\": 20}, {\"sequence\": \"CGC\", \"id\": 21}, {\"sequence\": \"A\", \"id\": 22}, {\"sequence\": \"C\", \"id\": 23}, {\"sequence\": \"GTGGTTGGAG\", \"id\": 24}, {\"sequence\": \"CAGGA\", \"id\": 25}, {\"sequence\": \"G\", \"id\": 26}, {\"sequence\": \"T\", \"id\": 27}, {\"sequence\": \"GGACCGGAGTATTGGGACCGGAGCAC\", \"id\": 28}, {\"sequence\": \"AC\", \"id\": 29}, {\"sequence\": \"G\", \"id\": 30}, {\"sequence\": \"C\", \"id\": 31}, {\"sequence\": \"GAACATCAGGCCCGCGCACAGACTGACAA\", \"id\": 32}, {\"sequence\": \"GAGTGAACCTGCCCATGCCGCGCCGCTACTAC\", \"id\": 33}, {\"sequence\": \"CACCAGAGCTAGGCCGGTGAATGACCCCGGCC\", \"id\": 34}, {\"sequence\": \"TGGGGCGAAGGTCACGACCCCTCCTCATCCCC\", \"id\": 35}, {\"sequence\": \"CACGGACG\", \"id\": 36}, {\"sequence\": \"T\", \"id\": 37}, {\"sequence\": \"C\", \"id\": 38}, {\"sequence\": \"CCCGGGTCCCCCCCGCGAGTCTC\", \"id\": 39}, {\"sequence\": \"CGGCTCC\", \"id\": 40}],\\n\"edge\": [{\"from\": 2, \"to\": 3}, {\"from\": 2, \"to\": 4}, {\"from\": 3, \"to\": 5}, {\"from\": 4, \"to\": 5}, {\"from\": 5, \"to\": 6}, {\"from\": 5, \"to\": 7}, {\"from\": 6, \"to\": 8}, {\"from\": 7, \"to\": 8}, {\"from\": 8, \"to\": 9}, {\"from\": 9, \"to\": 10}, {\"from\": 9, \"to\": 11}, {\"from\": 10, \"to\": 12}, {\"from\": 11, \"to\": 12}, {\"from\": 12, \"to\": 13}, {\"from\": 13, \"to\": 14}, {\"from\": 14, \"to\": 15}, {\"from\": 15, \"to\": 16}, {\"from\": 15, \"to\": 17}, {\"from\": 16, \"to\": 18}, {\"from\": 17, \"to\": 18}, {\"from\": 18, \"to\": 19}, {\"from\": 18, \"to\": 20}, {\"from\": 19, \"to\": 21}, {\"from\": 20, \"to\": 21}, {\"from\": 21, \"to\": 22}, {\"from\": 21, \"to\": 23}, {\"from\": 22, \"to\": 24}, {\"from\": 23, \"to\": 24}, {\"from\": 24, \"to\": 25}, {\"from\": 25, \"to\": 26}, {\"from\": 25, \"to\": 27}, {\"from\": 26, \"to\": 28}, {\"from\": 27, \"to\": 28}, {\"from\": 28, \"to\": 29}, {\"from\": 29, \"to\": 30}, {\"from\": 29, \"to\": 31}, {\"from\": 30, \"to\": 32}, {\"from\": 31, \"to\": 32}, {\"from\": 32, \"to\": 33}, {\"from\": 33, \"to\": 34}, {\"from\": 34, \"to\": 35}, {\"from\": 35, \"to\": 36}, {\"from\": 36, \"to\": 37}, {\"from\": 36, \"to\": 38}, {\"from\": 37, \"to\": 39}, {\"from\": 38, \"to\": 39}, {\"from\": 39, \"to\": 40}],\\n\\n \"path\": [\\n {\"name\": \"gi|157734152:29694183-29697368\", \"mapping\": [{\"position\": {\"node_id\": 2}, \"edit\": [{\"to_length\": 4, \"from_length\": 4}]}, {\"position\": {\"node_id\": 3}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 5}, \"edit\": [{\"to_length\": 16, \"from_length\": 16}]}, {\"position\": {\"node_id\": 6}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 8}, \"edit\": [{\"to_length\": 10, \"from_length\": 10}]}, {\"position\": {\"node_id\": 9}, \"edit\": [{\"to_length\": 29, \"from_length\": 29}]}, {\"position\": {\"node_id\": 10}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 12}, \"edit\": [{\"to_length\": 2, \"from_length\": 2}]}, {\"position\": {\"node_id\": 13}, \"edit\": [{\"to_length\": 32, \"from_length\": 32}]}, {\"position\": {\"node_id\": 14}, \"edit\": [{\"to_length\": 32, \"from_length\": 32}]}, {\"position\": {\"node_id\": 15}, \"edit\": [{\"to_length\": 6, \"from_length\": 6}]}, {\"position\": {\"node_id\": 16}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 18}, \"edit\": [{\"to_length\": 10, \"from_length\": 10}]}, {\"position\": {\"node_id\": 19}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 21}, \"edit\": [{\"to_length\": 3, \"from_length\": 3}]}, {\"position\": {\"node_id\": 22}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 24}, \"edit\": [{\"to_length\": 10, \"from_length\": 10}]}, {\"position\": {\"node_id\": 25}, \"edit\": [{\"to_length\": 5, \"from_length\": 5}]}, {\"position\": {\"node_id\": 26}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 28}, \"edit\": [{\"to_length\": 26, \"from_length\": 26}]}, {\"position\": {\"node_id\": 29}, \"edit\": [{\"to_length\": 2, \"from_length\": 2}]}, {\"position\": {\"node_id\": 30}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 32}, \"edit\": [{\"to_length\": 29, \"from_length\": 29}]}, {\"position\": {\"node_id\": 33}, \"edit\": [{\"to_length\": 32, \"from_length\": 32}]}, {\"position\": {\"node_id\": 34}, \"edit\": [{\"to_length\": 32, \"from_length\": 32}]}, {\"position\": {\"node_id\": 35}, \"edit\": [{\"to_length\": 32, \"from_length\": 32}]}, {\"position\": {\"node_id\": 36}, \"edit\": [{\"to_length\": 8, \"from_length\": 8}]}, {\"position\": {\"node_id\": 37}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 39}, \"edit\": [{\"to_length\": 23, \"from_length\": 23}]}, {\"position\": {\"node_id\": 40}, \"edit\": [{\"to_length\": 7, \"from_length\": 7}]} ]},\\n {\"name\": \"gi|528476637:29896324-29899509\", \"mapping\": [{\"position\": {\"node_id\": 2}, \"edit\": [{\"to_length\": 4, \"from_length\": 4}]}, {\"position\": {\"node_id\": 3}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 5}, \"edit\": [{\"to_length\": 16, \"from_length\": 16}]}, {\"position\": {\"node_id\": 6}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 8}, \"edit\": [{\"to_length\": 10, \"from_length\": 10}]}, {\"position\": {\"node_id\": 9}, \"edit\": [{\"to_length\": 29, \"from_length\": 29}]}, {\"position\": {\"node_id\": 11}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 12}, \"edit\": [{\"to_length\": 2, \"from_length\": 2}]}, {\"position\": {\"node_id\": 13}, \"edit\": [{\"to_length\": 32, \"from_length\": 32}]}, {\"position\": {\"node_id\": 14}, \"edit\": [{\"to_length\": 32, \"from_length\": 32}]}, {\"position\": {\"node_id\": 15}, \"edit\": [{\"to_length\": 6, \"from_length\": 6}]}, {\"position\": {\"node_id\": 16}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 18}, \"edit\": [{\"to_length\": 10, \"from_length\": 10}]}, {\"position\": {\"node_id\": 19}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 21}, \"edit\": [{\"to_length\": 3, \"from_length\": 3}]}, {\"position\": {\"node_id\": 23}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 24}, \"edit\": [{\"to_length\": 10, \"from_length\": 10}]}, {\"position\": {\"node_id\": 25}, \"edit\": [{\"to_length\": 5, \"from_length\": 5}]}, {\"position\": {\"node_id\": 26}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 28}, \"edit\": [{\"to_length\": 26, \"from_length\": 26}]}, {\"position\": {\"node_id\": 29}, \"edit\": [{\"to_length\": 2, \"from_length\": 2}]}, {\"position\": {\"node_id\": 30}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 32}, \"edit\": [{\"to_length\": 29, \"from_length\": 29}]}, {\"position\": {\"node_id\": 33}, \"edit\": [{\"to_length\": 32, \"from_length\": 32}]}, {\"position\": {\"node_id\": 34}, \"edit\": [{\"to_length\": 32, \"from_length\": 32}]}, {\"position\": {\"node_id\": 35}, \"edit\": [{\"to_length\": 32, \"from_length\": 32}]}, {\"position\": {\"node_id\": 36}, \"edit\": [{\"to_length\": 8, \"from_length\": 8}]}, {\"position\": {\"node_id\": 37}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 39}, \"edit\": [{\"to_length\": 23, \"from_length\": 23}]}, {\"position\": {\"node_id\": 40}, \"edit\": [{\"to_length\": 7, \"from_length\": 7}]}]},\\n {\"name\": \"gi|568815454:1186335-1189520\", \"mapping\": [{\"position\": {\"node_id\": 2}, \"edit\": [{\"to_length\": 4, \"from_length\": 4}]}, {\"position\": {\"node_id\": 4}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 5}, \"edit\": [{\"to_length\": 16, \"from_length\": 16}]}, {\"position\": {\"node_id\": 7}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 8}, \"edit\": [{\"to_length\": 10, \"from_length\": 10}]}, {\"position\": {\"node_id\": 9}, \"edit\": [{\"to_length\": 29, \"from_length\": 29}]}, {\"position\": {\"node_id\": 10}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 12}, \"edit\": [{\"to_length\": 2, \"from_length\": 2}]}, {\"position\": {\"node_id\": 13}, \"edit\": [{\"to_length\": 32, \"from_length\": 32}]}, {\"position\": {\"node_id\": 14}, \"edit\": [{\"to_length\": 32, \"from_length\": 32}]}, {\"position\": {\"node_id\": 15}, \"edit\": [{\"to_length\": 6, \"from_length\": 6}]}, {\"position\": {\"node_id\": 16}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 18}, \"edit\": [{\"to_length\": 10, \"from_length\": 10}]}, {\"position\": {\"node_id\": 19}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 21}, \"edit\": [{\"to_length\": 3, \"from_length\": 3}]}, {\"position\": {\"node_id\": 22}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 24}, \"edit\": [{\"to_length\": 10, \"from_length\": 10}]}, {\"position\": {\"node_id\": 25}, \"edit\": [{\"to_length\": 5, \"from_length\": 5}]}, {\"position\": {\"node_id\": 27}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 28}, \"edit\": [{\"to_length\": 26, \"from_length\": 26}]}, {\"position\": {\"node_id\": 29}, \"edit\": [{\"to_length\": 2, \"from_length\": 2}]}, {\"position\": {\"node_id\": 30}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 32}, \"edit\": [{\"to_length\": 29, \"from_length\": 29}]}, {\"position\": {\"node_id\": 33}, \"edit\": [{\"to_length\": 32, \"from_length\": 32}]}, {\"position\": {\"node_id\": 34}, \"edit\": [{\"to_length\": 32, \"from_length\": 32}]}, {\"position\": {\"node_id\": 35}, \"edit\": [{\"to_length\": 32, \"from_length\": 32}]}, {\"position\": {\"node_id\": 36}, \"edit\": [{\"to_length\": 8, \"from_length\": 8}]}, {\"position\": {\"node_id\": 37}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 39}, \"edit\": [{\"to_length\": 23, \"from_length\": 23}]}, {\"position\": {\"node_id\": 40}, \"edit\": [{\"to_length\": 7, \"from_length\": 7}]}]},\\n {\"name\": \"gi|568815529:1408009-1411194\", \"mapping\": [{\"position\": {\"node_id\": 2}, \"edit\": [{\"to_length\": 4, \"from_length\": 4}]}, {\"position\": {\"node_id\": 4}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 5}, \"edit\": [{\"to_length\": 16, \"from_length\": 16}]}, {\"position\": {\"node_id\": 7}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 8}, \"edit\": [{\"to_length\": 10, \"from_length\": 10}]}, {\"position\": {\"node_id\": 9}, \"edit\": [{\"to_length\": 29, \"from_length\": 29}]}, {\"position\": {\"node_id\": 10}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 12}, \"edit\": [{\"to_length\": 2, \"from_length\": 2}]}, {\"position\": {\"node_id\": 13}, \"edit\": [{\"to_length\": 32, \"from_length\": 32}]}, {\"position\": {\"node_id\": 14}, \"edit\": [{\"to_length\": 32, \"from_length\": 32}]}, {\"position\": {\"node_id\": 15}, \"edit\": [{\"to_length\": 6, \"from_length\": 6}]}, {\"position\": {\"node_id\": 16}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 18}, \"edit\": [{\"to_length\": 10, \"from_length\": 10}]}, {\"position\": {\"node_id\": 19}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 21}, \"edit\": [{\"to_length\": 3, \"from_length\": 3}]}, {\"position\": {\"node_id\": 22}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 24}, \"edit\": [{\"to_length\": 10, \"from_length\": 10}]}, {\"position\": {\"node_id\": 25}, \"edit\": [{\"to_length\": 5, \"from_length\": 5}]}, {\"position\": {\"node_id\": 27}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 28}, \"edit\": [{\"to_length\": 26, \"from_length\": 26}]}, {\"position\": {\"node_id\": 29}, \"edit\": [{\"to_length\": 2, \"from_length\": 2}]}, {\"position\": {\"node_id\": 30}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 32}, \"edit\": [{\"to_length\": 29, \"from_length\": 29}]}, {\"position\": {\"node_id\": 33}, \"edit\": [{\"to_length\": 32, \"from_length\": 32}]}, {\"position\": {\"node_id\": 34}, \"edit\": [{\"to_length\": 32, \"from_length\": 32}]}, {\"position\": {\"node_id\": 35}, \"edit\": [{\"to_length\": 32, \"from_length\": 32}]}, {\"position\": {\"node_id\": 36}, \"edit\": [{\"to_length\": 8, \"from_length\": 8}]}, {\"position\": {\"node_id\": 37}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 39}, \"edit\": [{\"to_length\": 23, \"from_length\": 23}]}, {\"position\": {\"node_id\": 40}, \"edit\": [{\"to_length\": 7, \"from_length\": 7}]}]},\\n {\"name\": \"gi|568815551:1183812-1186995\", \"mapping\": [{\"position\": {\"node_id\": 2}, \"edit\": [{\"to_length\": 4, \"from_length\": 4}]}, {\"position\": {\"node_id\": 3}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 5}, \"edit\": [{\"to_length\": 16, \"from_length\": 16}]}, {\"position\": {\"node_id\": 6}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 8}, \"edit\": [{\"to_length\": 10, \"from_length\": 10}]}, {\"position\": {\"node_id\": 9}, \"edit\": [{\"to_length\": 29, \"from_length\": 29}]}, {\"position\": {\"node_id\": 10}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 12}, \"edit\": [{\"to_length\": 2, \"from_length\": 2}]}, {\"position\": {\"node_id\": 13}, \"edit\": [{\"to_length\": 32, \"from_length\": 32}]}, {\"position\": {\"node_id\": 14}, \"edit\": [{\"to_length\": 32, \"from_length\": 32}]}, {\"position\": {\"node_id\": 15}, \"edit\": [{\"to_length\": 6, \"from_length\": 6}]}, {\"position\": {\"node_id\": 16}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 18}, \"edit\": [{\"to_length\": 10, \"from_length\": 10}]}, {\"position\": {\"node_id\": 19}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 21}, \"edit\": [{\"to_length\": 3, \"from_length\": 3}]}, {\"position\": {\"node_id\": 23}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 24}, \"edit\": [{\"to_length\": 10, \"from_length\": 10}]}, {\"position\": {\"node_id\": 25}, \"edit\": [{\"to_length\": 5, \"from_length\": 5}]}, {\"position\": {\"node_id\": 26}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 28}, \"edit\": [{\"to_length\": 26, \"from_length\": 26}]}, {\"position\": {\"node_id\": 29}, \"edit\": [{\"to_length\": 2, \"from_length\": 2}]}, {\"position\": {\"node_id\": 30}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 32}, \"edit\": [{\"to_length\": 29, \"from_length\": 29}]}, {\"position\": {\"node_id\": 33}, \"edit\": [{\"to_length\": 32, \"from_length\": 32}]}, {\"position\": {\"node_id\": 34}, \"edit\": [{\"to_length\": 32, \"from_length\": 32}]}, {\"position\": {\"node_id\": 35}, \"edit\": [{\"to_length\": 32, \"from_length\": 32}]}, {\"position\": {\"node_id\": 36}, \"edit\": [{\"to_length\": 8, \"from_length\": 8}]}, {\"position\": {\"node_id\": 37}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 39}, \"edit\": [{\"to_length\": 23, \"from_length\": 23}]}, {\"position\": {\"node_id\": 40}, \"edit\": [{\"to_length\": 7, \"from_length\": 7}]}]},\\n {\"name\": \"gi|568815561:1183022-1186203\", \"mapping\": [{\"position\": {\"node_id\": 2}, \"edit\": [{\"to_length\": 4, \"from_length\": 4}]}, {\"position\": {\"node_id\": 4}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 5}, \"edit\": [{\"to_length\": 16, \"from_length\": 16}]}, {\"position\": {\"node_id\": 7}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 8}, \"edit\": [{\"to_length\": 10, \"from_length\": 10}]}, {\"position\": {\"node_id\": 9}, \"edit\": [{\"to_length\": 29, \"from_length\": 29}]}, {\"position\": {\"node_id\": 10}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 12}, \"edit\": [{\"to_length\": 2, \"from_length\": 2}]}, {\"position\": {\"node_id\": 13}, \"edit\": [{\"to_length\": 32, \"from_length\": 32}]}, {\"position\": {\"node_id\": 14}, \"edit\": [{\"to_length\": 32, \"from_length\": 32}]}, {\"position\": {\"node_id\": 15}, \"edit\": [{\"to_length\": 6, \"from_length\": 6}]}, {\"position\": {\"node_id\": 16}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 18}, \"edit\": [{\"to_length\": 10, \"from_length\": 10}]}, {\"position\": {\"node_id\": 19}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 21}, \"edit\": [{\"to_length\": 3, \"from_length\": 3}]}, {\"position\": {\"node_id\": 23}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 24}, \"edit\": [{\"to_length\": 10, \"from_length\": 10}]}, {\"position\": {\"node_id\": 25}, \"edit\": [{\"to_length\": 5, \"from_length\": 5}]}, {\"position\": {\"node_id\": 26}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 28}, \"edit\": [{\"to_length\": 26, \"from_length\": 26}]}, {\"position\": {\"node_id\": 29}, \"edit\": [{\"to_length\": 2, \"from_length\": 2}]}, {\"position\": {\"node_id\": 31}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 32}, \"edit\": [{\"to_length\": 29, \"from_length\": 29}]}, {\"position\": {\"node_id\": 33}, \"edit\": [{\"to_length\": 32, \"from_length\": 32}]}, {\"position\": {\"node_id\": 34}, \"edit\": [{\"to_length\": 32, \"from_length\": 32}]}, {\"position\": {\"node_id\": 35}, \"edit\": [{\"to_length\": 32, \"from_length\": 32}]}, {\"position\": {\"node_id\": 36}, \"edit\": [{\"to_length\": 8, \"from_length\": 8}]}, {\"position\": {\"node_id\": 38}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 39}, \"edit\": [{\"to_length\": 23, \"from_length\": 23}]}, {\"position\": {\"node_id\": 40}, \"edit\": [{\"to_length\": 7, \"from_length\": 7}]}]},\\n {\"name\": \"gi|568815567:1183447-1186629\", \"mapping\": [{\"position\": {\"node_id\": 2}, \"edit\": [{\"to_length\": 4, \"from_length\": 4}]}, {\"position\": {\"node_id\": 3}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 5}, \"edit\": [{\"to_length\": 16, \"from_length\": 16}]}, {\"position\": {\"node_id\": 6}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 8}, \"edit\": [{\"to_length\": 10, \"from_length\": 10}]}, {\"position\": {\"node_id\": 9}, \"edit\": [{\"to_length\": 29, \"from_length\": 29}]}, {\"position\": {\"node_id\": 10}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 12}, \"edit\": [{\"to_length\": 2, \"from_length\": 2}]}, {\"position\": {\"node_id\": 13}, \"edit\": [{\"to_length\": 32, \"from_length\": 32}]}, {\"position\": {\"node_id\": 14}, \"edit\": [{\"to_length\": 32, \"from_length\": 32}]}, {\"position\": {\"node_id\": 15}, \"edit\": [{\"to_length\": 6, \"from_length\": 6}]}, {\"position\": {\"node_id\": 17}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 18}, \"edit\": [{\"to_length\": 10, \"from_length\": 10}]}, {\"position\": {\"node_id\": 20}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 21}, \"edit\": [{\"to_length\": 3, \"from_length\": 3}]}, {\"position\": {\"node_id\": 23}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 24}, \"edit\": [{\"to_length\": 10, \"from_length\": 10}]}, {\"position\": {\"node_id\": 25}, \"edit\": [{\"to_length\": 5, \"from_length\": 5}]}, {\"position\": {\"node_id\": 26}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 28}, \"edit\": [{\"to_length\": 26, \"from_length\": 26}]}, {\"position\": {\"node_id\": 29}, \"edit\": [{\"to_length\": 2, \"from_length\": 2}]}, {\"position\": {\"node_id\": 30}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 32}, \"edit\": [{\"to_length\": 29, \"from_length\": 29}]}, {\"position\": {\"node_id\": 33}, \"edit\": [{\"to_length\": 32, \"from_length\": 32}]}, {\"position\": {\"node_id\": 34}, \"edit\": [{\"to_length\": 32, \"from_length\": 32}]}, {\"position\": {\"node_id\": 35}, \"edit\": [{\"to_length\": 32, \"from_length\": 32}]}, {\"position\": {\"node_id\": 36}, \"edit\": [{\"to_length\": 8, \"from_length\": 8}]}, {\"position\": {\"node_id\": 37}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 39}, \"edit\": [{\"to_length\": 23, \"from_length\": 23}]}, {\"position\": {\"node_id\": 40}, \"edit\": [{\"to_length\": 7, \"from_length\": 7}]}]},\\n {\"name\": \"gi|568815569:1226348-1229533\", \"mapping\": [{\"position\": {\"node_id\": 2}, \"edit\": [{\"to_length\": 4, \"from_length\": 4}]}, {\"position\": {\"node_id\": 3}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 5}, \"edit\": [{\"to_length\": 16, \"from_length\": 16}]}, {\"position\": {\"node_id\": 6}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 8}, \"edit\": [{\"to_length\": 10, \"from_length\": 10}]}, {\"position\": {\"node_id\": 9}, \"edit\": [{\"to_length\": 29, \"from_length\": 29}]}, {\"position\": {\"node_id\": 10}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 12}, \"edit\": [{\"to_length\": 2, \"from_length\": 2}]}, {\"position\": {\"node_id\": 13}, \"edit\": [{\"to_length\": 32, \"from_length\": 32}]}, {\"position\": {\"node_id\": 14}, \"edit\": [{\"to_length\": 32, \"from_length\": 32}]}, {\"position\": {\"node_id\": 15}, \"edit\": [{\"to_length\": 6, \"from_length\": 6}]}, {\"position\": {\"node_id\": 16}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 18}, \"edit\": [{\"to_length\": 10, \"from_length\": 10}]}, {\"position\": {\"node_id\": 19}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 21}, \"edit\": [{\"to_length\": 3, \"from_length\": 3}]}, {\"position\": {\"node_id\": 23}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 24}, \"edit\": [{\"to_length\": 10, \"from_length\": 10}]}, {\"position\": {\"node_id\": 25}, \"edit\": [{\"to_length\": 5, \"from_length\": 5}]}, {\"position\": {\"node_id\": 26}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 28}, \"edit\": [{\"to_length\": 26, \"from_length\": 26}]}, {\"position\": {\"node_id\": 29}, \"edit\": [{\"to_length\": 2, \"from_length\": 2}]}, {\"position\": {\"node_id\": 30}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 32}, \"edit\": [{\"to_length\": 29, \"from_length\": 29}]}, {\"position\": {\"node_id\": 33}, \"edit\": [{\"to_length\": 32, \"from_length\": 32}]}, {\"position\": {\"node_id\": 34}, \"edit\": [{\"to_length\": 32, \"from_length\": 32}]}, {\"position\": {\"node_id\": 35}, \"edit\": [{\"to_length\": 32, \"from_length\": 32}]}, {\"position\": {\"node_id\": 36}, \"edit\": [{\"to_length\": 8, \"from_length\": 8}]}, {\"position\": {\"node_id\": 37}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 39}, \"edit\": [{\"to_length\": 23, \"from_length\": 23}]}, {\"position\": {\"node_id\": 40}, \"edit\": [{\"to_length\": 7, \"from_length\": 7}]}]},\\n {\"name\": \"gi|568815592:29926658-29929838\", \"mapping\": [{\"position\": {\"node_id\": 2}, \"edit\": [{\"to_length\": 4, \"from_length\": 4}]}, {\"position\": {\"node_id\": 4}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 5}, \"edit\": [{\"to_length\": 16, \"from_length\": 16}]}, {\"position\": {\"node_id\": 7}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 8}, \"edit\": [{\"to_length\": 10, \"from_length\": 10}]}, {\"position\": {\"node_id\": 9}, \"edit\": [{\"to_length\": 29, \"from_length\": 29}]}, {\"position\": {\"node_id\": 12}, \"edit\": [{\"to_length\": 2, \"from_length\": 2}]}, {\"position\": {\"node_id\": 13}, \"edit\": [{\"to_length\": 32, \"from_length\": 32}]}, {\"position\": {\"node_id\": 14}, \"edit\": [{\"to_length\": 32, \"from_length\": 32}]}, {\"position\": {\"node_id\": 15}, \"edit\": [{\"to_length\": 6, \"from_length\": 6}]}, {\"position\": {\"node_id\": 16}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 18}, \"edit\": [{\"to_length\": 10, \"from_length\": 10}]}, {\"position\": {\"node_id\": 20}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 21}, \"edit\": [{\"to_length\": 3, \"from_length\": 3}]}, {\"position\": {\"node_id\": 23}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 24}, \"edit\": [{\"to_length\": 10, \"from_length\": 10}]}, {\"position\": {\"node_id\": 25}, \"edit\": [{\"to_length\": 5, \"from_length\": 5}]}, {\"position\": {\"node_id\": 26}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 28}, \"edit\": [{\"to_length\": 26, \"from_length\": 26}]}, {\"position\": {\"node_id\": 29}, \"edit\": [{\"to_length\": 2, \"from_length\": 2}]}, {\"position\": {\"node_id\": 30}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 32}, \"edit\": [{\"to_length\": 29, \"from_length\": 29}]}, {\"position\": {\"node_id\": 33}, \"edit\": [{\"to_length\": 32, \"from_length\": 32}]}, {\"position\": {\"node_id\": 34}, \"edit\": [{\"to_length\": 32, \"from_length\": 32}]}, {\"position\": {\"node_id\": 35}, \"edit\": [{\"to_length\": 32, \"from_length\": 32}]}, {\"position\": {\"node_id\": 36}, \"edit\": [{\"to_length\": 8, \"from_length\": 8}]}, {\"position\": {\"node_id\": 37}, \"edit\": [{\"to_length\": 1, \"from_length\": 1}]}, {\"position\": {\"node_id\": 39}, \"edit\": [{\"to_length\": 23, \"from_length\": 23}]}, {\"position\": {\"node_id\": 40}, \"edit\": [{\"to_length\": 7, \"from_length\": 7}]}]}]}\\n';\nvar read1 = exports.read1 = '\\n{\\n\"sequence\": \"AGGTTCCCACTCCATAAGGTAGTTCAGCACCGCC\",\\n\"path\": {\"name\": \"read 1\",\\n  \"mapping\": [\\n    {\"position\": {\"node_id\": 2}, \"rank\": 1, \"edit\": [{\"from_length\": 4, \"to_length\": 4}]},\\n    {\"position\": {\"node_id\": 3}, \"rank\": 2, \"edit\": [{\"from_length\": 1, \"to_length\": 1}]},\\n    {\"position\": {\"node_id\": 5}, \"rank\": 3, \"edit\": [{\"from_length\": 16, \"to_length\": 16}]},\\n    {\"position\": {\"node_id\": 6}, \"rank\": 4, \"edit\": [{\"from_length\": 1, \"to_length\": 1}]},\\n    {\"position\": {\"node_id\": 8}, \"rank\": 5, \"edit\": [{\"from_length\": 10, \"to_length\": 10}]},\\n    {\"position\": {\"node_id\": 9}, \"rank\": 6, \"edit\": [{\"from_length\": 2, \"to_length\": 2}]}]},\\n\"score\": 57, \"identity\": 1.0 }\\n';\nvar read2 = exports.read2 = '{\"sequence\": \"CCGGCCGGGTCGCGGGGAGCCCCGGTACATCGCAGTGGGCTACGTGGACGA\", \"path\": {\"mapping\": [{\"rank\": 1, \"edit\": [{\"from_length\": 22, \"to_length\": 22}], \"position\": {\"offset\": 7, \"node_id\": 9}}, {\"rank\": 2, \"edit\": [{\"from_length\": 1, \"to_length\": 1}], \"position\": {\"node_id\": 10}}, {\"rank\": 3, \"edit\": [{\"from_length\": 2, \"to_length\": 2}], \"position\": {\"node_id\": 12}}, {\"rank\": 4, \"edit\": [{\"from_length\": 26, \"to_length\": 26}], \"position\": {\"node_id\": 13}}]}, \"score\": 51, \"identity\": 1.0}';\nvar read3 = exports.read3 = '{\"sequence\": \"GGTTCCCACTCCATAAGGTAGTTCAGCACCGCCGTGTCCCGGCCGGGTCGCGGGGAGCCCCGGTACATCGCAGTGGGCTACGTGGACGACACGCAGTTCGTGCGGTTCGACAGCGACGCGGCGACTCCGAGGATGTAGCCGCAGGCGCCGTGGTTGGAGCAGGAGGGACCGGAGTATTGGGACCGGAGCACACGGAACATCAGGCCCGCGCACAGACTGACAAGAGTGAACCTGCCCATGCCGCGCCGCTACTACCACCAGAGCTAGGCCGGTGAATGACCCCGGCCTGGGGCGAAGGTCACGACCCCTCCTCATCCCCCACGGACGTCCCGGGTCCCCCCCGCGAGTCTCCGGCTCC\", \"path\": {\"mapping\": [{\"position\": {\"node_id\": 2, \"offset\": 1}, \"edit\": [{\"from_length\": 3, \"to_length\": 3}], \"rank\": 1}, {\"position\": {\"node_id\": 3}, \"edit\": [{\"from_length\": 1, \"to_length\": 1}], \"rank\": 2}, {\"position\": {\"node_id\": 5}, \"edit\": [{\"from_length\": 16, \"to_length\": 16}], \"rank\": 3}, {\"position\": {\"node_id\": 6}, \"edit\": [{\"from_length\": 1, \"to_length\": 1}], \"rank\": 4}, {\"position\": {\"node_id\": 8}, \"edit\": [{\"from_length\": 10, \"to_length\": 10}], \"rank\": 5}, {\"position\": {\"node_id\": 9}, \"edit\": [{\"from_length\": 29, \"to_length\": 29}], \"rank\": 6}, {\"position\": {\"node_id\": 10}, \"edit\": [{\"from_length\": 1, \"to_length\": 1}], \"rank\": 7}, {\"position\": {\"node_id\": 12}, \"edit\": [{\"from_length\": 2, \"to_length\": 2}], \"rank\": 8}, {\"position\": {\"node_id\": 13}, \"edit\": [{\"from_length\": 32, \"to_length\": 32}], \"rank\": 9}, {\"position\": {\"node_id\": 14}, \"edit\": [{\"from_length\": 32, \"to_length\": 32}], \"rank\": 10}, {\"position\": {\"node_id\": 15}, \"edit\": [{\"from_length\": 6, \"to_length\": 6}], \"rank\": 11}, {\"position\": {\"node_id\": 16}, \"edit\": [{\"from_length\": 1, \"to_length\": 1}], \"rank\": 12}, {\"position\": {\"node_id\": 18}, \"edit\": [{\"from_length\": 10, \"to_length\": 10}], \"rank\": 13}, {\"position\": {\"node_id\": 19}, \"edit\": [{\"from_length\": 1, \"to_length\": 1}], \"rank\": 14}, {\"position\": {\"node_id\": 21}, \"edit\": [{\"from_length\": 3, \"to_length\": 3}], \"rank\": 15}, {\"position\": {\"node_id\": 23}, \"edit\": [{\"from_length\": 1, \"to_length\": 1}], \"rank\": 16}, {\"position\": {\"node_id\": 24}, \"edit\": [{\"from_length\": 10, \"to_length\": 10}], \"rank\": 17}, {\"position\": {\"node_id\": 25}, \"edit\": [{\"from_length\": 5, \"to_length\": 5}], \"rank\": 18}, {\"position\": {\"node_id\": 26}, \"edit\": [{\"from_length\": 1, \"to_length\": 1}], \"rank\": 19}, {\"position\": {\"node_id\": 28}, \"edit\": [{\"from_length\": 26, \"to_length\": 26}], \"rank\": 20}, {\"position\": {\"node_id\": 29}, \"edit\": [{\"from_length\": 2, \"to_length\": 2}], \"rank\": 21}, {\"position\": {\"node_id\": 30}, \"edit\": [{\"from_length\": 1, \"to_length\": 1}], \"rank\": 22}, {\"position\": {\"node_id\": 32}, \"edit\": [{\"from_length\": 29, \"to_length\": 29}], \"rank\": 23}, {\"position\": {\"node_id\": 33}, \"edit\": [{\"from_length\": 32, \"to_length\": 32}], \"rank\": 24}, {\"position\": {\"node_id\": 34}, \"edit\": [{\"from_length\": 32, \"to_length\": 32}], \"rank\": 25}, {\"position\": {\"node_id\": 35}, \"edit\": [{\"from_length\": 32, \"to_length\": 32}], \"rank\": 26}, {\"position\": {\"node_id\": 36}, \"edit\": [{\"from_length\": 8, \"to_length\": 8}], \"rank\": 27}, {\"position\": {\"node_id\": 37}, \"edit\": [{\"from_length\": 1, \"to_length\": 1}], \"rank\": 28}, {\"position\": {\"node_id\": 39}, \"edit\": [{\"from_length\": 23, \"to_length\": 23}], \"rank\": 29}, {\"position\": {\"node_id\": 40}, \"edit\": [{\"from_length\": 7, \"to_length\": 7}], \"rank\": 30}]}, \"score\": 358, \"identity\": 1.0}';\nvar read4 = exports.read4 = '{\"sequence\": \"GGTACCCACTCCATAAGGTATTTCAGCACCGCCGTGTCCCGGCCGGGTCGCGGGGAGCCCCGGTACATCGCAGTGGGCTACGTGGACGACACGCAGTTCGTGCGGTTCGACAGCGACGCGGCGACTCCGAGGATGTAGCCGCAGGCGCCGTGGTTGGAGCAGGAGGGACCGGAGTATTGGGACCGGAGCACACGGAACATCAGGCCCGCGCACAGACTGACAAGAGTGAACCTGCCCATGCCGCGCCGCTACTACCACCAGAGCTAGGCCGGTGAATGACCCCGGCCTGGGGCGAAGGTCACGACCCCTCCTCATCCCCCACGGACGTCCCGGGTCCCCCCCGCGAGTCTCCGGCTCC\", \"path\": {\"mapping\": [{\"position\": {\"offset\": 1, \"node_id\": 2}, \"edit\": [{\"from_length\": 3, \"to_length\": 3}], \"rank\": 1}, {\"position\": {\"node_id\": 4}, \"edit\": [{\"from_length\": 1, \"to_length\": 1}], \"rank\": 2}, {\"position\": {\"node_id\": 5}, \"edit\": [{\"from_length\": 16, \"to_length\": 16}], \"rank\": 3}, {\"position\": {\"node_id\": 7}, \"edit\": [{\"from_length\": 1, \"to_length\": 1}], \"rank\": 4}, {\"position\": {\"node_id\": 8}, \"edit\": [{\"from_length\": 10, \"to_length\": 10}], \"rank\": 5}, {\"position\": {\"node_id\": 9}, \"edit\": [{\"from_length\": 29, \"to_length\": 29}], \"rank\": 6}, {\"position\": {\"node_id\": 10}, \"edit\": [{\"from_length\": 1, \"to_length\": 1}], \"rank\": 7}, {\"position\": {\"node_id\": 12}, \"edit\": [{\"from_length\": 2, \"to_length\": 2}], \"rank\": 8}, {\"position\": {\"node_id\": 13}, \"edit\": [{\"from_length\": 32, \"to_length\": 32}], \"rank\": 9}, {\"position\": {\"node_id\": 14}, \"edit\": [{\"from_length\": 32, \"to_length\": 32}], \"rank\": 10}, {\"position\": {\"node_id\": 15}, \"edit\": [{\"from_length\": 6, \"to_length\": 6}], \"rank\": 11}, {\"position\": {\"node_id\": 16}, \"edit\": [{\"from_length\": 1, \"to_length\": 1}], \"rank\": 12}, {\"position\": {\"node_id\": 18}, \"edit\": [{\"from_length\": 10, \"to_length\": 10}], \"rank\": 13}, {\"position\": {\"node_id\": 19}, \"edit\": [{\"from_length\": 1, \"to_length\": 1}], \"rank\": 14}, {\"position\": {\"node_id\": 21}, \"edit\": [{\"from_length\": 3, \"to_length\": 3}], \"rank\": 15}, {\"position\": {\"node_id\": 23}, \"edit\": [{\"from_length\": 1, \"to_length\": 1}], \"rank\": 16}, {\"position\": {\"node_id\": 24}, \"edit\": [{\"from_length\": 10, \"to_length\": 10}], \"rank\": 17}, {\"position\": {\"node_id\": 25}, \"edit\": [{\"from_length\": 5, \"to_length\": 5}], \"rank\": 18}, {\"position\": {\"node_id\": 26}, \"edit\": [{\"from_length\": 1, \"to_length\": 1}], \"rank\": 19}, {\"position\": {\"node_id\": 28}, \"edit\": [{\"from_length\": 26, \"to_length\": 26}], \"rank\": 20}, {\"position\": {\"node_id\": 29}, \"edit\": [{\"from_length\": 2, \"to_length\": 2}], \"rank\": 21}, {\"position\": {\"node_id\": 30}, \"edit\": [{\"from_length\": 1, \"to_length\": 1}], \"rank\": 22}, {\"position\": {\"node_id\": 32}, \"edit\": [{\"from_length\": 29, \"to_length\": 29}], \"rank\": 23}, {\"position\": {\"node_id\": 33}, \"edit\": [{\"from_length\": 32, \"to_length\": 32}], \"rank\": 24}, {\"position\": {\"node_id\": 34}, \"edit\": [{\"from_length\": 32, \"to_length\": 32}], \"rank\": 25}, {\"position\": {\"node_id\": 35}, \"edit\": [{\"from_length\": 32, \"to_length\": 32}], \"rank\": 26}, {\"position\": {\"node_id\": 36}, \"edit\": [{\"from_length\": 8, \"to_length\": 8}], \"rank\": 27}, {\"position\": {\"node_id\": 37}, \"edit\": [{\"from_length\": 1, \"to_length\": 1}], \"rank\": 28}, {\"position\": {\"node_id\": 39}, \"edit\": [{\"from_length\": 23, \"to_length\": 23}], \"rank\": 29}, {\"position\": {\"node_id\": 40}, \"edit\": [{\"from_length\": 7, \"to_length\": 7}], \"rank\": 30}]}, \"score\": 358, \"identity\": 1.0}';\nvar read5 = exports.read5 = '{\"sequence\": \"GGTTCCCACTCCATAAGGTAGTTCAGCACCGCCGTGTCCCGGCCGGGTCGCGGGGAGCCCCGGTACATCGCAGTGGGCTACGTGGACGACACGCAGTTCGTGCGGTTCGACAGCGACGCGGCGACTCCGAGGATGTAGCCGCAGGCGCCGTGGTTGGAGCAGGAGGGACCGGAGTATTGGGACCGGAGCACACGGAACATCAGGCCCGCGCACAGACTGACAAGAGTGAACCTGCCCATGCCGCGCCGCTACTACCACCAGAGCTAGGCCGGTGAATGACCCCGGCCTGGGGCGAAGGTCACGACCCCTCCTCATCCCCCACGGACGCCCCGGGTCCCCCCCGCGAGTCTCCGGCTCC\", \"path\": {\"mapping\": [{\"position\": {\"node_id\": 3}, \"edit\": [{\"from_length\": 1, \"to_length\": 1}], \"rank\": 2}, {\"position\": {\"node_id\": 5}, \"edit\": [{\"from_length\": 16, \"to_length\": 16}], \"rank\": 3}, {\"position\": {\"node_id\": 6}, \"edit\": [{\"from_length\": 1, \"to_length\": 1}], \"rank\": 4}, {\"position\": {\"node_id\": 8}, \"edit\": [{\"from_length\": 10, \"to_length\": 10}], \"rank\": 5}, {\"position\": {\"node_id\": 9}, \"edit\": [{\"from_length\": 29, \"to_length\": 29}], \"rank\": 6}, {\"position\": {\"node_id\": 10}, \"edit\": [{\"from_length\": 1, \"to_length\": 1}], \"rank\": 7}, {\"position\": {\"node_id\": 12}, \"edit\": [{\"from_length\": 2, \"to_length\": 2}], \"rank\": 8}, {\"position\": {\"node_id\": 13}, \"edit\": [{\"from_length\": 32, \"to_length\": 32}], \"rank\": 9}, {\"position\": {\"node_id\": 14}, \"edit\": [{\"from_length\": 32, \"to_length\": 32}], \"rank\": 10}, {\"position\": {\"node_id\": 15}, \"edit\": [{\"from_length\": 6, \"to_length\": 6}], \"rank\": 11}, {\"position\": {\"node_id\": 16}, \"edit\": [{\"from_length\": 1, \"to_length\": 1}], \"rank\": 12}, {\"position\": {\"node_id\": 18}, \"edit\": [{\"from_length\": 10, \"to_length\": 10}], \"rank\": 13}, {\"position\": {\"node_id\": 19}, \"edit\": [{\"from_length\": 1, \"to_length\": 1}], \"rank\": 14}, {\"position\": {\"node_id\": 21}, \"edit\": [{\"from_length\": 3, \"to_length\": 3}], \"rank\": 15}, {\"position\": {\"node_id\": 23}, \"edit\": [{\"from_length\": 1, \"to_length\": 1}], \"rank\": 16}, {\"position\": {\"node_id\": 24}, \"edit\": [{\"from_length\": 10, \"to_length\": 10}], \"rank\": 17}, {\"position\": {\"node_id\": 25}, \"edit\": [{\"from_length\": 5, \"to_length\": 5}], \"rank\": 18}, {\"position\": {\"node_id\": 26}, \"edit\": [{\"from_length\": 1, \"to_length\": 1}], \"rank\": 19}, {\"position\": {\"node_id\": 28}, \"edit\": [{\"from_length\": 26, \"to_length\": 26}], \"rank\": 20}, {\"position\": {\"node_id\": 29}, \"edit\": [{\"from_length\": 2, \"to_length\": 2}], \"rank\": 21}, {\"position\": {\"node_id\": 30}, \"edit\": [{\"from_length\": 1, \"to_length\": 1}], \"rank\": 22}, {\"position\": {\"node_id\": 32}, \"edit\": [{\"from_length\": 29, \"to_length\": 29}], \"rank\": 23}, {\"position\": {\"node_id\": 33}, \"edit\": [{\"from_length\": 32, \"to_length\": 32}], \"rank\": 24}, {\"position\": {\"node_id\": 34}, \"edit\": [{\"from_length\": 32, \"to_length\": 32}], \"rank\": 25}, {\"position\": {\"node_id\": 35}, \"edit\": [{\"from_length\": 32, \"to_length\": 32}], \"rank\": 26}, {\"position\": {\"node_id\": 36}, \"edit\": [{\"from_length\": 8, \"to_length\": 8}], \"rank\": 27}, {\"position\": {\"node_id\": 38}, \"edit\": [{\"from_length\": 1, \"to_length\": 1}], \"rank\": 28}, {\"position\": {\"node_id\": 39}, \"edit\": [{\"from_length\": 23, \"to_length\": 23}], \"rank\": 29}, {\"position\": {\"node_id\": 40}, \"edit\": [{\"from_length\": 7, \"to_length\": 7}], \"rank\": 30}]}, \"score\": 358, \"identity\": 1.0}';\nvar demoReads = exports.demoReads = '\\n{\"sequence\": \"AGGTTCCCACTCCATAAGGTAGTTCAGCACCGCC\", \"path\": {\"name\": \"read 1\", \"mapping\": [{\"position\": {\"node_id\": 2}, \"rank\": 1, \"edit\": [{\"from_length\": 4, \"to_length\": 4}]},    {\"position\": {\"node_id\": 3}, \"rank\": 2, \"edit\": [{\"from_length\": 1, \"to_length\": 1}]}, {\"position\": {\"node_id\": 5}, \"rank\": 3, \"edit\": [{\"from_length\": 16, \"to_length\": 16}]},     {\"position\": {\"node_id\": 6}, \"rank\": 4, \"edit\": [{\"from_length\": 1, \"to_length\": 1}]}, {\"position\": {\"node_id\": 8}, \"rank\": 5, \"edit\": [{\"from_length\": 10, \"to_length\": 10}]}, {\"position\": {\"node_id\": 9}, \"rank\": 6, \"edit\": [{\"from_length\": 5, \"to_length\": 5}]}]}, \"score\": 57, \"identity\": 1.0 }\\n{\"sequence\": \"CCGGCCGGGTCGCGGGGAGCCCGGTACATCGCAGTGGGCTACGTGGACGA\", \"path\": {\"mapping\": [{\"rank\": 1, \"edit\": [{\"from_length\": 22, \"to_length\": 22}], \"position\": {\"offset\": 7, \"node_id\": 9}}, {\"rank\": 3, \"edit\": [{\"from_length\": 2, \"to_length\": 2}], \"position\": {\"node_id\": 12}}, {\"rank\": 4, \"edit\": [{\"from_length\": 26, \"to_length\": 26}], \"position\": {\"node_id\": 13}}]}, \"score\": 51, \"identity\": 1.0}\\n{\"sequence\": \"GGTTCCCACTCCATAAGGTAGTTCAGCACCGCCGTGTCCCGGCCGGGTCGCGGGGAGCCCCGGTACATCGCAGTGGGCTACGTGGACGACACGCAGTTCGTGCGGTTCGACAGCGACGCGGCGACTCCGAGGATGTAGCCGCAGGCGCCGTGGTTGGAGCAGGAGGGACCGGAGTATTGGGACCGGAGCACACGGAACATCAGGCCCGCGCACAGACTGACAAGAGTGAACCTGCCCATGCCGCGCCGCTACTACCACCAGAGCTAGGCCGGTGAATGACCCCGGCCTGGGGCGAAGGTCACGACCCCTCCTCATCCCCCACGGACGTCCCGGGTCCCCCCCGCGAGTCTCCGGCTCC\", \"path\": {\"mapping\": [{\"position\": {\"node_id\": 2, \"offset\": 1}, \"edit\": [{\"from_length\": 3, \"to_length\": 3}], \"rank\": 1}, {\"position\": {\"node_id\": 3}, \"edit\": [{\"from_length\": 1, \"to_length\": 1}], \"rank\": 2}, {\"position\": {\"node_id\": 5}, \"edit\": [{\"from_length\": 16, \"to_length\": 16}], \"rank\": 3}, {\"position\": {\"node_id\": 6}, \"edit\": [{\"from_length\": 1, \"to_length\": 1}], \"rank\": 4}, {\"position\": {\"node_id\": 8}, \"edit\": [{\"from_length\": 10, \"to_length\": 10}], \"rank\": 5}, {\"position\": {\"node_id\": 9}, \"edit\": [{\"from_length\": 29, \"to_length\": 29}], \"rank\": 6}, {\"position\": {\"node_id\": 10}, \"edit\": [{\"from_length\": 1, \"to_length\": 1}], \"rank\": 7}, {\"position\": {\"node_id\": 12}, \"edit\": [{\"from_length\": 2, \"to_length\": 2}], \"rank\": 8}, {\"position\": {\"node_id\": 13}, \"edit\": [{\"from_length\": 32, \"to_length\": 32}], \"rank\": 9}, {\"position\": {\"node_id\": 14}, \"edit\": [{\"from_length\": 32, \"to_length\": 32}], \"rank\": 10}, {\"position\": {\"node_id\": 15}, \"edit\": [{\"from_length\": 6, \"to_length\": 6}], \"rank\": 11}, {\"position\": {\"node_id\": 16}, \"edit\": [{\"from_length\": 1, \"to_length\": 1}], \"rank\": 12}, {\"position\": {\"node_id\": 18}, \"edit\": [{\"from_length\": 10, \"to_length\": 10}], \"rank\": 13}, {\"position\": {\"node_id\": 19}, \"edit\": [{\"from_length\": 1, \"to_length\": 1}], \"rank\": 14}, {\"position\": {\"node_id\": 21}, \"edit\": [{\"from_length\": 3, \"to_length\": 3}], \"rank\": 15}, {\"position\": {\"node_id\": 23}, \"edit\": [{\"from_length\": 1, \"to_length\": 1}], \"rank\": 16}, {\"position\": {\"node_id\": 24}, \"edit\": [{\"from_length\": 10, \"to_length\": 10}], \"rank\": 17}, {\"position\": {\"node_id\": 25}, \"edit\": [{\"from_length\": 5, \"to_length\": 5}], \"rank\": 18}, {\"position\": {\"node_id\": 26}, \"edit\": [{\"from_length\": 1, \"to_length\": 1}], \"rank\": 19}, {\"position\": {\"node_id\": 28}, \"edit\": [{\"from_length\": 26, \"to_length\": 26}], \"rank\": 20}, {\"position\": {\"node_id\": 29}, \"edit\": [{\"from_length\": 2, \"to_length\": 2}], \"rank\": 21}, {\"position\": {\"node_id\": 30}, \"edit\": [{\"from_length\": 1, \"to_length\": 1}], \"rank\": 22}, {\"position\": {\"node_id\": 32}, \"edit\": [{\"from_length\": 29, \"to_length\": 29}], \"rank\": 23}, {\"position\": {\"node_id\": 33}, \"edit\": [{\"from_length\": 32, \"to_length\": 32}], \"rank\": 24}, {\"position\": {\"node_id\": 34}, \"edit\": [{\"from_length\": 32, \"to_length\": 32}], \"rank\": 25}, {\"position\": {\"node_id\": 35}, \"edit\": [{\"from_length\": 32, \"to_length\": 32}], \"rank\": 26}, {\"position\": {\"node_id\": 36}, \"edit\": [{\"from_length\": 8, \"to_length\": 8}], \"rank\": 27}, {\"position\": {\"node_id\": 37}, \"edit\": [{\"from_length\": 1, \"to_length\": 1}], \"rank\": 28}, {\"position\": {\"node_id\": 39}, \"edit\": [{\"from_length\": 23, \"to_length\": 23}], \"rank\": 29}, {\"position\": {\"node_id\": 40}, \"edit\": [{\"from_length\": 7, \"to_length\": 7}], \"rank\": 30}]}, \"score\": 358, \"identity\": 1.0}\\n{\"sequence\": \"GGTACCCACTCCATAAGGTATTCAGCACCGCCGTGTCCCGGCCGGGTCGCGGGGAGCCCCGGTACATCGCAGTGGGCTACGTGGACGACACGCAGTTCGTGCGGTTCGACAGCGACGCGGCGACTCCGAGGATGTAGCCGCAGGCGCCGTGGTTGGAGCAGGAGGGACCGGAGTATTGGGACCGGAGCACACGGAACATCAGGCCCGCGCACAGACTGACAAGAGTGAACCTGCCCATGCCGCGCCGCTACTACCACCAGAGCTAGGCCGGTGAATGACCCCGGCCTGGGGCGAAGGTCACGACCCCTCCTCATCCCCCACGGACGTCCCGGGTCCCCCCCGCGAGTCTCCGGCTCC\", \"path\": {\"mapping\": [{\"position\": {\"offset\": 1, \"node_id\": 2}, \"edit\": [{\"from_length\": 3, \"to_length\": 3}], \"rank\": 1}, {\"position\": {\"node_id\": 4}, \"edit\": [{\"from_length\": 1, \"to_length\": 1}], \"rank\": 2}, {\"position\": {\"node_id\": 5}, \"edit\": [{\"from_length\": 16, \"to_length\": 16}], \"rank\": 3}, {\"position\": {\"node_id\": 8}, \"edit\": [{\"from_length\": 10, \"to_length\": 10}], \"rank\": 5}, {\"position\": {\"node_id\": 9}, \"edit\": [{\"from_length\": 29, \"to_length\": 29}], \"rank\": 6}, {\"position\": {\"node_id\": 10}, \"edit\": [{\"from_length\": 1, \"to_length\": 1}], \"rank\": 7}, {\"position\": {\"node_id\": 12}, \"edit\": [{\"from_length\": 2, \"to_length\": 2}], \"rank\": 8}, {\"position\": {\"node_id\": 13}, \"edit\": [{\"from_length\": 32, \"to_length\": 32}], \"rank\": 9}, {\"position\": {\"node_id\": 14}, \"edit\": [{\"from_length\": 32, \"to_length\": 32}], \"rank\": 10}, {\"position\": {\"node_id\": 15}, \"edit\": [{\"from_length\": 6, \"to_length\": 6}], \"rank\": 11}, {\"position\": {\"node_id\": 16}, \"edit\": [{\"from_length\": 1, \"to_length\": 1}], \"rank\": 12}, {\"position\": {\"node_id\": 18}, \"edit\": [{\"from_length\": 10, \"to_length\": 10}], \"rank\": 13}, {\"position\": {\"node_id\": 19}, \"edit\": [{\"from_length\": 1, \"to_length\": 1}], \"rank\": 14}, {\"position\": {\"node_id\": 21}, \"edit\": [{\"from_length\": 3, \"to_length\": 3}], \"rank\": 15}, {\"position\": {\"node_id\": 23}, \"edit\": [{\"from_length\": 1, \"to_length\": 1}], \"rank\": 16}, {\"position\": {\"node_id\": 24}, \"edit\": [{\"from_length\": 10, \"to_length\": 10}], \"rank\": 17}, {\"position\": {\"node_id\": 25}, \"edit\": [{\"from_length\": 5, \"to_length\": 5}], \"rank\": 18}, {\"position\": {\"node_id\": 26}, \"edit\": [{\"from_length\": 1, \"to_length\": 1}], \"rank\": 19}, {\"position\": {\"node_id\": 28}, \"edit\": [{\"from_length\": 26, \"to_length\": 26}], \"rank\": 20}, {\"position\": {\"node_id\": 29}, \"edit\": [{\"from_length\": 2, \"to_length\": 2}], \"rank\": 21}, {\"position\": {\"node_id\": 30}, \"edit\": [{\"from_length\": 1, \"to_length\": 1}], \"rank\": 22}, {\"position\": {\"node_id\": 32}, \"edit\": [{\"from_length\": 29, \"to_length\": 29}], \"rank\": 23}, {\"position\": {\"node_id\": 33}, \"edit\": [{\"from_length\": 32, \"to_length\": 32}], \"rank\": 24}, {\"position\": {\"node_id\": 34}, \"edit\": [{\"from_length\": 32, \"to_length\": 32}], \"rank\": 25}, {\"position\": {\"node_id\": 35}, \"edit\": [{\"from_length\": 32, \"to_length\": 32}], \"rank\": 26}, {\"position\": {\"node_id\": 36}, \"edit\": [{\"from_length\": 8, \"to_length\": 8}], \"rank\": 27}, {\"position\": {\"node_id\": 37}, \"edit\": [{\"from_length\": 1, \"to_length\": 1}], \"rank\": 28}, {\"position\": {\"node_id\": 39}, \"edit\": [{\"from_length\": 23, \"to_length\": 23}], \"rank\": 29}, {\"position\": {\"node_id\": 40}, \"edit\": [{\"from_length\": 7, \"to_length\": 7}], \"rank\": 30}]}, \"score\": 358, \"identity\": 1.0}\\n{\"sequence\": \"GGTTCCCACTCCATAAGGTAGTTCAGCACCGCCGTGTCCCGGCCGGGTCGCGGGGAGCCCCGGTACATCGCAGTGGGCTACGTGGACGACACGCAGTTCGTGCGGTTCGACAGCGACGCGGCGACTCCGAGGATGTAGCCGCAGGCGCCGTGGTTGGAGCAGGAGGGACCGGAGTATTGGGACCGGAGCACACGGAACATCAGGCCCGCGCACAGACTGACAAGAGTGAACCTGCCCATGCCGCGCCGCTACTACCACCAGAGCTAGGCCGGTGAATGACCCCGGCCTGGGGCGAAGGTCACGACCCCTCCTCATCCCCCACGGACGCCCCGGGTCCCCCCCGCGAGTCTCCGGCTCC\", \"path\": {\"mapping\": [{\"position\": {\"node_id\": 3}, \"edit\": [{\"from_length\": 1, \"to_length\": 1}], \"rank\": 2}, {\"position\": {\"node_id\": 5}, \"edit\": [{\"from_length\": 16, \"to_length\": 16}], \"rank\": 3}, {\"position\": {\"node_id\": 6}, \"edit\": [{\"from_length\": 1, \"to_length\": 1}], \"rank\": 4}, {\"position\": {\"node_id\": 8}, \"edit\": [{\"from_length\": 10, \"to_length\": 10}], \"rank\": 5}, {\"position\": {\"node_id\": 9}, \"edit\": [{\"from_length\": 29, \"to_length\": 29}], \"rank\": 6}, {\"position\": {\"node_id\": 10}, \"edit\": [{\"from_length\": 1, \"to_length\": 1}], \"rank\": 7}, {\"position\": {\"node_id\": 12}, \"edit\": [{\"from_length\": 2, \"to_length\": 2}], \"rank\": 8}, {\"position\": {\"node_id\": 13}, \"edit\": [{\"from_length\": 32, \"to_length\": 32}], \"rank\": 9}, {\"position\": {\"node_id\": 14}, \"edit\": [{\"from_length\": 32, \"to_length\": 32}], \"rank\": 10}, {\"position\": {\"node_id\": 15}, \"edit\": [{\"from_length\": 6, \"to_length\": 6}], \"rank\": 11}, {\"position\": {\"node_id\": 16}, \"edit\": [{\"from_length\": 1, \"to_length\": 1}], \"rank\": 12}, {\"position\": {\"node_id\": 18}, \"edit\": [{\"from_length\": 10, \"to_length\": 10}], \"rank\": 13}, {\"position\": {\"node_id\": 19}, \"edit\": [{\"from_length\": 1, \"to_length\": 1}], \"rank\": 14}, {\"position\": {\"node_id\": 21}, \"edit\": [{\"from_length\": 3, \"to_length\": 3}], \"rank\": 15}, {\"position\": {\"node_id\": 23}, \"edit\": [{\"from_length\": 1, \"to_length\": 1}], \"rank\": 16}, {\"position\": {\"node_id\": 24}, \"edit\": [{\"from_length\": 10, \"to_length\": 10}], \"rank\": 17}, {\"position\": {\"node_id\": 25}, \"edit\": [{\"from_length\": 5, \"to_length\": 5}], \"rank\": 18}, {\"position\": {\"node_id\": 26}, \"edit\": [{\"from_length\": 1, \"to_length\": 1}], \"rank\": 19}, {\"position\": {\"node_id\": 28}, \"edit\": [{\"from_length\": 26, \"to_length\": 26}], \"rank\": 20}, {\"position\": {\"node_id\": 29}, \"edit\": [{\"from_length\": 2, \"to_length\": 2}], \"rank\": 21}, {\"position\": {\"node_id\": 30}, \"edit\": [{\"from_length\": 1, \"to_length\": 1}], \"rank\": 22}, {\"position\": {\"node_id\": 32}, \"edit\": [{\"from_length\": 29, \"to_length\": 29}], \"rank\": 23}, {\"position\": {\"node_id\": 33}, \"edit\": [{\"from_length\": 32, \"to_length\": 32}], \"rank\": 24}, {\"position\": {\"node_id\": 34}, \"edit\": [{\"from_length\": 32, \"to_length\": 32}], \"rank\": 25}, {\"position\": {\"node_id\": 35}, \"edit\": [{\"from_length\": 32, \"to_length\": 32}], \"rank\": 26}, {\"position\": {\"node_id\": 36}, \"edit\": [{\"from_length\": 8, \"to_length\": 8}], \"rank\": 27}, {\"position\": {\"node_id\": 38}, \"edit\": [{\"from_length\": 1, \"to_length\": 1}], \"rank\": 28}, {\"position\": {\"node_id\": 39}, \"edit\": [{\"from_length\": 23, \"to_length\": 23}], \"rank\": 29}, {\"position\": {\"node_id\": 40}, \"edit\": [{\"from_length\": 7, \"to_length\": 7}], \"rank\": 30}]}, \"score\": 358, \"identity\": 1.0}\\n';\nvar demoReads2 = exports.demoReads2 = '\\n{\"sequence\": \"AGGTTCCCACTCCATAAGGTAGTTCAGCACCGCC\", \"path\": {\"name\": \"read 1\", \"mapping\": [{\"position\": {\"node_id\": 2}, \"rank\": 1, \"edit\": [{\"from_length\": 4, \"to_length\": 4}]},    {\"position\": {\"node_id\": 3}, \"rank\": 2, \"edit\": [{\"from_length\": 1, \"to_length\": 1}]}, {\"position\": {\"node_id\": 5}, \"rank\": 3, \"edit\": [{\"from_length\": 16, \"to_length\": 16}]},     {\"position\": {\"node_id\": 6}, \"rank\": 4, \"edit\": [{\"from_length\": 1, \"to_length\": 1}]}, {\"position\": {\"node_id\": 8}, \"rank\": 5, \"edit\": [{\"from_length\": 10, \"to_length\": 10}]}, {\"position\": {\"node_id\": 9}, \"rank\": 6, \"edit\": [{\"from_length\": 5, \"to_length\": 5}]}]}, \"score\": 57, \"identity\": 1.0 }\\n';\nvar notch2Simpl100Bed = exports.notch2Simpl100Bed = [\n        {\n            track: 'Notch2',\n            start: 17814,\n            end: 18189,\n            type: 'exon',\n            name: 'exon1'\n        },\n        {\n            track: 'Notch2',\n            start: 57530,\n            end: 57611,\n            type: 'exon',\n            name: 'exon2'\n        },\n        {\n            track: 'Notch2',\n            start: 81929,\n            end: 82188,\n            type: 'exon',\n            name: 'exon3'\n        },\n        {\n            track: 'Notch2',\n            start: 90185,\n            end: 90520,\n            type: 'exon',\n            name: 'exon4'\n        },\n        {\n            track: 'Notch2',\n            start: 90769,\n            end: 95091,\n            type: 'exon',\n            name: 'exon5'\n        },\n        {\n            track: 'Notch2NLA',\n            start: 19147,\n            end: 19522,\n            type: 'exon',\n            name: 'exon1'\n        },\n        {\n            track: 'Notch2NLA',\n            start: 58843,\n            end: 58924,\n            type: 'exon',\n            name: 'exon2'\n        },\n        {\n            track: 'Notch2NLA',\n            start: 83214,\n            end: 83473,\n            type: 'exon',\n            name: 'exon3'\n        },\n        {\n            track: 'Notch2NLA',\n            start: 91409,\n            end: 91744,\n            type: 'exon',\n            name: 'exon4'\n        },\n        {\n            track: 'Notch2NLA',\n            start: 91995,\n            end: 96317,\n            type: 'exon',\n            name: 'exon5'\n        },\n        {\n            track: 'Notch2NLB',\n            start: 19151,\n            end: 19524,\n            type: 'exon',\n            name: 'exon1'\n        },\n        {\n            track: 'Notch2NLB',\n            start: 58873,\n            end: 58954,\n            type: 'exon',\n            name: 'exon2'\n        },\n        {\n            track: 'Notch2NLB',\n            start: 83020,\n            end: 83279,\n            type: 'exon',\n            name: 'exon3'\n        },\n        {\n            track: 'Notch2NLB',\n            start: 91225,\n            end: 91560,\n            type: 'exon',\n            name: 'exon4'\n        },\n        {\n            track: 'Notch2NLB',\n            start: 91811,\n            end: 96121,\n            type: 'exon',\n            name: 'exon5'\n        },\n        {\n            track: 'Notch2NLC',\n            start: 16049,\n            end: 16424,\n            type: 'exon',\n            name: 'exon1'\n        },\n        {\n            track: 'Notch2NLC',\n            start: 56437,\n            end: 56518,\n            type: 'exon',\n            name: 'exon2'\n        },\n        {\n            track: 'Notch2NLC',\n            start: 80821,\n            end: 81080,\n            type: 'exon',\n            name: 'exon3'\n        },\n        {\n            track: 'Notch2NLC',\n            start: 88994,\n            end: 89329,\n            type: 'exon',\n            name: 'exon4'\n        },\n        {\n            track: 'Notch2NLC',\n            start: 89580,\n            end: 93893,\n            type: 'exon',\n            name: 'exon5'\n        },\n        {\n            track: 'Notch2NLD',\n            start: 16096,\n            end: 16471,\n            type: 'exon',\n            name: 'exon1'\n        },\n        {\n            track: 'Notch2NLD',\n            start: 55852,\n            end: 55933,\n            type: 'exon',\n            name: 'exon2'\n        },\n        {\n            track: 'Notch2NLD',\n            start: 77198,\n            end: 77457,\n            type: 'exon',\n            name: 'exon3'\n        },\n        {\n            track: 'Notch2NLD',\n            start: 85385,\n            end: 85720,\n            type: 'exon',\n            name: 'exon4'\n        },\n        {\n            track: 'Notch2NLD',\n            start: 85971,\n            end: 90271,\n            type: 'exon',\n            name: 'exon5'\n        }\n    ];\nvar notch2Simpl1000Bed = exports.notch2Simpl1000Bed = [\n        {\n            track: 'Notch2',\n            start: 18035,\n            end: 18167,\n            type: 'exon',\n            name: 'exon1'\n        },\n        {\n            track: 'Notch2',\n            start: 57469,\n            end: 57550,\n            type: 'exon',\n            name: 'exon2'\n        },\n        {\n            track: 'Notch2',\n            start: 81838,\n            end: 82097,\n            type: 'exon',\n            name: 'exon3'\n        },\n        {\n            track: 'Notch2',\n            start: 90089,\n            end: 90424,\n            type: 'exon',\n            name: 'exon4'\n        },\n        {\n            track: 'Notch2',\n            start: 90675,\n            end: 94985,\n            type: 'exon',\n            name: 'exon5'\n        },\n        {\n            track: 'Notch2NLA',\n            start: 19368,\n            end: 19500,\n            type: 'exon',\n            name: 'exon1'\n        },\n        {\n            track: 'Notch2NLA',\n            start: 58777,\n            end: 58858,\n            type: 'exon',\n            name: 'exon2'\n        },\n        {\n            track: 'Notch2NLA',\n            start: 83129,\n            end: 83388,\n            type: 'exon',\n            name: 'exon3'\n        },\n        {\n            track: 'Notch2NLA',\n            start: 91299,\n            end: 91634,\n            type: 'exon',\n            name: 'exon4'\n        },\n        {\n            track: 'Notch2NLA',\n            start: 91885,\n            end: 96195,\n            type: 'exon',\n            name: 'exon5'\n        },\n        {\n            track: 'Notch2NLB',\n            start: 19369,\n            end: 19501,\n            type: 'exon',\n            name: 'exon1'\n        },\n        {\n            track: 'Notch2NLB',\n            start: 58818,\n            end: 58899,\n            type: 'exon',\n            name: 'exon2'\n        },\n        {\n            track: 'Notch2NLB',\n            start: 82941,\n            end: 83200,\n            type: 'exon',\n            name: 'exon3'\n        },\n        {\n            track: 'Notch2NLB',\n            start: 91146,\n            end: 91481,\n            type: 'exon',\n            name: 'exon4'\n        },\n        {\n            track: 'Notch2NLB',\n            start: 91732,\n            end: 96042,\n            type: 'exon',\n            name: 'exon5'\n        },\n        {\n            track: 'Notch2NLC',\n            start: 16293,\n            end: 16425,\n            type: 'exon',\n            name: 'exon1'\n        },\n        {\n            track: 'Notch2NLC',\n            start: 56388,\n            end: 56469,\n            type: 'exon',\n            name: 'exon2'\n        },\n        {\n            track: 'Notch2NLC',\n            start: 80746,\n            end: 81005,\n            type: 'exon',\n            name: 'exon3'\n        },\n        {\n            track: 'Notch2NLC',\n            start: 88919,\n            end: 89254,\n            type: 'exon',\n            name: 'exon4'\n        },\n        {\n            track: 'Notch2NLC',\n            start: 89505,\n            end: 93818,\n            type: 'exon',\n            name: 'exon5'\n        },\n        {\n            track: 'Notch2NLD',\n            start: 16317,\n            end: 16449,\n            type: 'exon',\n            name: 'exon1'\n        },\n        {\n            track: 'Notch2NLD',\n            start: 55763,\n            end: 55844,\n            type: 'exon',\n            name: 'exon2'\n        },\n        {\n            track: 'Notch2NLD',\n            start: 77078,\n            end: 77337,\n            type: 'exon',\n            name: 'exon3'\n        },\n        {\n            track: 'Notch2NLD',\n            start: 85265,\n            end: 85600,\n            type: 'exon',\n            name: 'exon4'\n        },\n        {\n            track: 'Notch2NLD',\n            start: 85851,\n            end: 90161,\n            type: 'exon',\n            name: 'exon5'\n        }\n    ];","'use strict';\nvar _tubemap = require('./tubemap');\nvar tubeMap = _interopRequireWildcard(_tubemap);\nvar _demoData = require('./demo-data');\nvar data = _interopRequireWildcard(_demoData);\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    } else {\n        var newObj = {};\n        if (obj != null) {\n            for (var key in obj) {\n                if (Object.prototype.hasOwnProperty.call(obj, key))\n                    newObj[key] = obj[key];\n            }\n        }\n        newObj.default = obj;\n        return newObj;\n    }\n}\nfunction readsFromStringToArray(readsString) {\n    var lines = readsString.split('\\n');\n    var result = [];\n    lines.forEach(function (line) {\n        if (line.length > 0) {\n            result.push(JSON.parse(line));\n        }\n    });\n    return result;\n}\ndocument.getElementById('redundantNodesCheckbox').onclick = function () {\n    if (document.getElementById('redundantNodesCheckbox').checked === true)\n        tubeMap.setMergeNodesFlag(true);\n    else\n        tubeMap.setMergeNodesFlag(false);\n};\ndocument.getElementById('compressedViewCheckbox').onclick = function () {\n    if (document.getElementById('compressedViewCheckbox').checked === true)\n        tubeMap.setNodeWidthOption(1);\n    else\n        tubeMap.setNodeWidthOption(0);\n};\ndocument.getElementById('showReadsCheckbox').onclick = function () {\n    if (document.getElementById('showReadsCheckbox').checked === true)\n        tubeMap.setShowReadsFlag(true);\n    else\n        tubeMap.setShowReadsFlag(false);\n};\ndocument.getElementById('softClipsCheckbox').onclick = function () {\n    if (document.getElementById('softClipsCheckbox').checked === true)\n        tubeMap.setSoftClipsFlag(true);\n    else\n        tubeMap.setSoftClipsFlag(false);\n};\nvar radios = document.getElementsByClassName('colorRadio');\nvar _loop = function _loop(i) {\n    var trackType = void 0;\n    switch (radios[i].name) {\n    case 'colorsHaplo':\n        trackType = 'haplotypeColors';\n        break;\n    case 'colorsFwReads':\n        trackType = 'forwardReadColors';\n        break;\n    case 'colorsRevReads':\n        trackType = 'reverseReadColors';\n        break;\n    default:\n        console.log('Could not find track type in color set assignment');\n    }\n    var colorSet = void 0;\n    switch (radios[i].value) {\n    case 'option1':\n        colorSet = 'plainColors';\n        break;\n    case 'option2':\n        colorSet = 'greys';\n        break;\n    case 'option3':\n        colorSet = 'reds';\n        break;\n    case 'option4':\n        colorSet = 'blues';\n        break;\n    case 'option5':\n        colorSet = 'lightColors';\n        break;\n    default:\n        console.log('Could not find color type in color set assignment');\n    }\n    radios[i].onclick = function () {\n        console.log(this);\n        tubeMap.setColorSet(trackType, colorSet);\n    };\n};\nfor (var i = 0; i < radios.length; i += 1) {\n    _loop(i);\n}\ndocument.getElementById('downloadButton').onclick = function () {\n    var svgN = document.getElementById('svg');\n    var svgData = new XMLSerializer().serializeToString(svgN);\n    var svgBlob = new Blob([svgData], { type: 'image/svg+xml;charset=utf-8' });\n    var svgUrl = URL.createObjectURL(svgBlob);\n    var downloadLink = document.createElement('a');\n    downloadLink.href = svgUrl;\n    downloadLink.download = 'graph.svg';\n    document.body.appendChild(downloadLink);\n    downloadLink.click();\n    document.body.removeChild(downloadLink);\n};\ndocument.getElementById('example1').onclick = function () {\n    tubeMap.create({\n        svgID: '#svg',\n        nodes: data.inputNodes,\n        tracks: data.inputTracks1,\n        bed: data.bed1\n    });\n    tubeMap.setColorSet('haplotypeColors', 'plainColors');\n    document.getElementById('colorsHaplo1').checked = true;\n};\ndocument.getElementById('example2').onclick = function () {\n    $('#example1').removeClass('active');\n    tubeMap.create({\n        svgID: '#svg',\n        nodes: data.inputNodes,\n        tracks: data.inputTracks2,\n        bed: data.bed1\n    });\n    tubeMap.setColorSet('haplotypeColors', 'plainColors');\n    document.getElementById('colorsHaplo1').checked = true;\n};\ndocument.getElementById('example3').onclick = function () {\n    $('#example1').removeClass('active');\n    tubeMap.create({\n        svgID: '#svg',\n        nodes: data.inputNodes,\n        tracks: data.inputTracks3,\n        bed: data.bed1\n    });\n    tubeMap.setColorSet('haplotypeColors', 'plainColors');\n    document.getElementById('colorsHaplo1').checked = true;\n};\ndocument.getElementById('example4').onclick = function () {\n    $('#example1').removeClass('active');\n    tubeMap.create({\n        svgID: '#svg',\n        nodes: data.inputNodes,\n        tracks: data.inputTracks4,\n        bed: data.bed1\n    });\n    tubeMap.setColorSet('haplotypeColors', 'plainColors');\n    document.getElementById('colorsHaplo1').checked = true;\n};\ndocument.getElementById('example5').onclick = function () {\n    $('#example1').removeClass('active');\n    tubeMap.create({\n        svgID: '#svg',\n        nodes: data.inputNodes,\n        tracks: data.inputTracks5,\n        bed: data.bed1\n    });\n    tubeMap.setColorSet('haplotypeColors', 'plainColors');\n    document.getElementById('colorsHaplo1').checked = true;\n};\ndocument.getElementById('example6').onclick = function () {\n    $('#example1').removeClass('active');\n    var vg = JSON.parse(data.k3138);\n    var nodes = tubeMap.vgExtractNodes(vg);\n    var tracks = tubeMap.vgExtractTracks(vg);\n    var reads = tubeMap.vgExtractReads(nodes, tracks, readsFromStringToArray(data.demoReads));\n    tubeMap.create({\n        svgID: '#svg',\n        nodes: nodes,\n        tracks: tracks,\n        reads: reads\n    });\n    tubeMap.setColorSet('haplotypeColors', 'greys');\n    document.getElementById('colorsHaplo2').checked = true;\n};\nwindow.onload = function () {\n    document.getElementById('example1').click();\n};","'use strict';\nObject.defineProperty(exports, '__esModule', { value: true });\nexports.create = create;\nexports.changeTrackVisibility = changeTrackVisibility;\nexports.changeExonVisibility = changeExonVisibility;\nexports.setMergeNodesFlag = setMergeNodesFlag;\nexports.setSoftClipsFlag = setSoftClipsFlag;\nexports.setShowReadsFlag = setShowReadsFlag;\nexports.setColorSet = setColorSet;\nexports.setNodeWidthOption = setNodeWidthOption;\nexports.zoomBy = zoomBy;\nexports.useColorScheme = useColorScheme;\nexports.vgExtractNodes = vgExtractNodes;\nexports.vgExtractTracks = vgExtractTracks;\nexports.vgExtractReads = vgExtractReads;\nvar DEBUG = false;\nvar greys = [\n        '#d9d9d9',\n        '#bdbdbd',\n        '#969696',\n        '#737373',\n        '#525252',\n        '#252525',\n        '#000000'\n    ];\nvar blues = [\n        '#c6dbef',\n        '#9ecae1',\n        '#6baed6',\n        '#4292c6',\n        '#2171b5',\n        '#08519c',\n        '#08306b'\n    ];\nvar reds = [\n        '#fcbba1',\n        '#fc9272',\n        '#fb6a4a',\n        '#ef3b2c',\n        '#cb181d',\n        '#a50f15',\n        '#67000d'\n    ];\nvar plainColors = [\n        '#1f77b4',\n        '#ff7f0e',\n        '#2ca02c',\n        '#d62728',\n        '#9467bd',\n        '#8c564b',\n        '#e377c2',\n        '#7f7f7f',\n        '#bcbd22',\n        '#17becf'\n    ];\nvar lightColors = [\n        '#ABCCE3',\n        '#FFCFA5',\n        '#B0DBB0',\n        '#F0AEAE',\n        '#D7C6E6',\n        '#C6ABA5',\n        '#F4CCE8',\n        '#CFCFCF',\n        '#E6E6AC',\n        '#A8E7ED'\n    ];\nvar haplotypeColors = [];\nvar forwardReadColors = [];\nvar reverseReadColors = [];\nvar exonColors = [];\nvar svgID = void 0;\nvar svg = void 0;\nvar zoom = exports.zoom = void 0;\nvar inputNodes = [];\nvar inputTracks = [];\nvar inputReads = [];\nvar nodes = void 0;\nvar tracks = void 0;\nvar reads = void 0;\nvar numberOfNodes = void 0;\nvar numberOfTracks = void 0;\nvar nodeMap = void 0;\nvar nodesPerOrder = void 0;\nvar assignments = [];\nvar extraLeft = [];\nvar extraRight = [];\nvar maxOrder = void 0;\nvar config = {\n        mergeNodesFlag: true,\n        clickableNodesFlag: false,\n        showExonsFlag: false,\n        colorScheme: 0,\n        nodeWidthOption: 0,\n        showReads: true,\n        showSoftClips: true,\n        haplotypeColors: 'greys',\n        forwardReadColors: 'reds',\n        reverseReadColors: 'blues',\n        exonColors: 'lightColors',\n        hideLegendFlag: false\n    };\nvar trackRectangles = [];\nvar trackCurves = [];\nvar trackCorners = [];\nvar trackVerticalRectangles = [];\nvar trackRectanglesStep3 = [];\nvar maxYCoordinate = 0;\nvar minYCoordinate = 0;\nvar maxXCoordinate = 0;\nvar trackForRuler = void 0;\nvar bed = void 0;\nfunction create(params) {\n    svgID = params.svgID;\n    svg = d3.select(params.svgID);\n    inputNodes = JSON.parse(JSON.stringify(params.nodes));\n    inputTracks = JSON.parse(JSON.stringify(params.tracks));\n    inputReads = params.reads || null;\n    bed = params.bed || null;\n    config.clickableNodesFlag = params.clickableNodes || false;\n    config.hideLegendFlag = params.hideLegend || false;\n    var tr = createTubeMap();\n    if (!config.hideLegendFlag)\n        drawLegend(tr);\n}\nfunction moveTrackToFirstPosition(index) {\n    inputTracks.unshift(inputTracks[index]);\n    inputTracks.splice(index + 1, 1);\n    straightenTrack(0);\n}\nfunction straightenTrack(index) {\n    var i = void 0;\n    var j = void 0;\n    var nodesToInvert = [];\n    var currentSequence = void 0;\n    var nodeName = void 0;\n    currentSequence = inputTracks[index].sequence;\n    for (i = 0; i < currentSequence.length; i += 1) {\n        if (currentSequence[i].charAt(0) === '-') {\n            nodeName = currentSequence[i].substr(1);\n            if (currentSequence.indexOf(nodeName) === -1 || currentSequence.indexOf(nodeName) > i) {\n                nodesToInvert.push(currentSequence[i].substr(1));\n            }\n        }\n    }\n    for (i = 0; i < inputTracks.length; i += 1) {\n        currentSequence = inputTracks[i].sequence;\n        for (j = 0; j < currentSequence.length; j += 1) {\n            if (currentSequence[j].charAt(0) !== '-') {\n                if (nodesToInvert.indexOf(currentSequence[j]) !== -1) {\n                    currentSequence[j] = '-' + currentSequence[j];\n                }\n            } else if (nodesToInvert.indexOf(currentSequence[j].substr(1)) !== -1) {\n                currentSequence[j] = currentSequence[j].substr(1);\n            }\n        }\n    }\n    inputNodes.forEach(function (node) {\n        if (nodesToInvert.indexOf(node.name) !== -1) {\n            node.seq = node.seq.split('').reverse().join('');\n        }\n    });\n}\nfunction changeTrackVisibility(trackID) {\n    var i = 0;\n    while (i < inputTracks.length && inputTracks[i].id !== trackID) {\n        i += 1;\n    }\n    if (i < inputTracks.length) {\n        if (inputTracks[i].hasOwnProperty('hidden')) {\n            inputTracks[i].hidden = !inputTracks[i].hidden;\n        } else {\n            inputTracks[i].hidden = true;\n        }\n    }\n    createTubeMap();\n}\nfunction changeExonVisibility() {\n    config.showExonsFlag = !config.showExonsFlag;\n    createTubeMap();\n}\nfunction setMergeNodesFlag(value) {\n    if (config.mergeNodesFlag !== value) {\n        config.mergeNodesFlag = value;\n        svg = d3.select(svgID);\n        createTubeMap();\n    }\n}\nfunction setSoftClipsFlag(value) {\n    if (config.showSoftClips !== value) {\n        config.showSoftClips = value;\n        svg = d3.select(svgID);\n        createTubeMap();\n    }\n}\nfunction setShowReadsFlag(value) {\n    if (config.showReads !== value) {\n        config.showReads = value;\n        svg = d3.select(svgID);\n        createTubeMap();\n    }\n}\nfunction setColorSet(trackType, colorSet) {\n    config[trackType] = colorSet;\n    var tr = createTubeMap();\n    if (!config.hideLegendFlag)\n        drawLegend(tr);\n}\nfunction setNodeWidthOption(value) {\n    if (value === 0 || value === 1 || value === 2) {\n        if (config.nodeWidthOption !== value) {\n            config.nodeWidthOption = value;\n            if (svg !== undefined) {\n                svg = d3.select(svgID);\n                createTubeMap();\n            }\n        }\n    }\n}\nfunction createTubeMap() {\n    trackRectangles = [];\n    trackCurves = [];\n    trackCorners = [];\n    trackVerticalRectangles = [];\n    trackRectanglesStep3 = [];\n    assignments = [];\n    extraLeft = [];\n    extraRight = [];\n    maxYCoordinate = 0;\n    minYCoordinate = 0;\n    maxXCoordinate = 0;\n    trackForRuler = undefined;\n    svg = d3.select(svgID);\n    svg.selectAll('*').remove();\n    nodes = JSON.parse(JSON.stringify(inputNodes));\n    tracks = JSON.parse(JSON.stringify(inputTracks));\n    reads = JSON.parse(JSON.stringify(inputReads));\n    assignColorSets();\n    for (var i = tracks.length - 1; i >= 0; i -= 1) {\n        if (!tracks[i].hasOwnProperty('type')) {\n            tracks[i].type = 'haplo';\n        }\n        if (tracks[i].hasOwnProperty('hidden')) {\n            if (tracks[i].hidden === true) {\n                tracks.splice(i, 1);\n            }\n        }\n        if (tracks[i].hasOwnProperty('indexOfFirstBase')) {\n            trackForRuler = tracks[i].name;\n        }\n    }\n    nodeMap = generateNodeMap(nodes);\n    generateTrackIndexSequences(tracks);\n    if (reads && config.showReads)\n        generateTrackIndexSequences(reads);\n    generateNodeWidth();\n    if (reads && config.mergeNodesFlag) {\n        generateNodeSuccessors();\n        generateNodeOrder();\n        if (reads && config.showReads)\n            reverseReversedReads();\n        mergeNodes();\n        nodeMap = generateNodeMap(nodes);\n        generateNodeWidth();\n        generateTrackIndexSequences(tracks);\n        if (reads && config.showReads)\n            generateTrackIndexSequences(reads);\n    }\n    numberOfNodes = nodes.length;\n    numberOfTracks = tracks.length;\n    generateNodeSuccessors();\n    generateNodeDegree();\n    if (DEBUG)\n        console.log(numberOfNodes + ' nodes.');\n    generateNodeOrder();\n    maxOrder = getMaxOrder();\n    calculateTrackWidth(tracks);\n    generateLaneAssignment();\n    if (config.showExonsFlag === true && bed !== null)\n        addTrackFeatures();\n    generateNodeXCoords();\n    if (reads && config.showReads) {\n        generateReadOnlyNodeAttributes();\n        reverseReversedReads();\n        generateTrackIndexSequences(reads);\n        placeReads();\n        tracks = tracks.concat(reads);\n    }\n    generateSVGShapesFromPath(nodes, tracks);\n    console.log('Tracks:');\n    console.log(tracks);\n    console.log('Nodes:');\n    console.log(nodes);\n    console.log('Lane assignment:');\n    console.log(assignments);\n    getImageDimensions();\n    alignSVG(nodes, tracks);\n    defineSVGPatterns();\n    drawTrackRectangles(trackRectangles);\n    drawTrackCurves();\n    drawReversalsByColor(trackCorners, trackVerticalRectangles);\n    drawTrackRectangles(trackRectanglesStep3);\n    drawTrackRectangles(trackRectangles, 'read');\n    drawTrackCurves('read');\n    var dNodes = removeUnusedNodes(nodes);\n    drawNodes(dNodes);\n    drawReversalsByColor(trackCorners, trackVerticalRectangles, 'read');\n    if (config.nodeWidthOption === 0)\n        drawLabels(dNodes);\n    if (trackForRuler !== undefined)\n        drawRuler();\n    if (config.nodeWidthOption === 0)\n        drawMismatches();\n    if (DEBUG) {\n        console.log('number of tracks: ' + numberOfTracks);\n        console.log('number of nodes: ' + numberOfNodes);\n    }\n    return tracks;\n}\nfunction generateReadOnlyNodeAttributes() {\n    nodesPerOrder = [];\n    for (var i = 0; i <= maxOrder; i += 1) {\n        nodesPerOrder[i] = [];\n    }\n    var orderY = new Map();\n    nodes.forEach(function (node) {\n        if (node.hasOwnProperty('order') && node.hasOwnProperty('y')) {\n            if (orderY.has(node.order)) {\n                orderY.set(node.order, Math.max(node.y + node.contentHeight, orderY.get(node.order)));\n            } else {\n                orderY.set(node.order, node.y + node.contentHeight);\n            }\n        }\n    });\n    nodes.forEach(function (node, i) {\n        if (node.hasOwnProperty('order') && !node.hasOwnProperty('y')) {\n            console.log('adding to ' + node.name);\n            node.y = orderY.get(node.order) + 25;\n            node.contentHeight = 0;\n            nodesPerOrder[node.order].push(i);\n        }\n    });\n}\nfunction assignReadsToNodes() {\n    nodes.forEach(function (node) {\n        node.incomingReads = [];\n        node.outgoingReads = [];\n        node.internalReads = [];\n    });\n    reads.forEach(function (read, idx) {\n        read.width = 7;\n        if (read.path.length === 1) {\n            nodes[read.path[0].node].internalReads.push(idx);\n        } else {\n            read.path.forEach(function (element, pathIdx) {\n                if (pathIdx === 0) {\n                    nodes[read.path[0].node].outgoingReads.push([\n                        idx,\n                        pathIdx\n                    ]);\n                } else if (read.path[pathIdx].node !== null) {\n                    nodes[read.path[pathIdx].node].incomingReads.push([\n                        idx,\n                        pathIdx\n                    ]);\n                }\n            });\n        }\n    });\n}\nfunction removeNonPathNodesFromReads() {\n    reads.forEach(function (read) {\n        for (var i = read.sequence.length - 1; i >= 0; i -= 1) {\n            var nodeName = read.sequence[i];\n            if (nodeName.charAt(0) === '-') {\n                nodeName = nodeName.substr(1);\n            }\n            if (!nodeMap.has(nodeName) || nodes[nodeMap.get(nodeName)].degree === 0) {\n                read.sequence.splice(i, 1);\n            }\n        }\n    });\n}\nfunction placeReads() {\n    generateBasicPathsForReads();\n    assignReadsToNodes();\n    var sortedNodes = nodes.slice();\n    sortedNodes.sort(compareNodesByOrder);\n    sortedNodes.forEach(function (node) {\n        node.incomingReads.sort(compareReadIncomingSegmentsByComingFrom);\n        var currentY = node.y + node.contentHeight;\n        var occupiedUntil = new Map();\n        node.incomingReads.forEach(function (readElement) {\n            reads[readElement[0]].path[readElement[1]].y = currentY;\n            setOccupiedUntil(occupiedUntil, reads[readElement[0]], readElement[1], currentY, node);\n            currentY += 7;\n        });\n        var maxY = currentY;\n        node.outgoingReads.sort(compareReadOutgoingSegmentsByGoingTo);\n        var occupiedFrom = new Map();\n        currentY = node.y + node.contentHeight;\n        node.outgoingReads.forEach(function (readElement) {\n            reads[readElement[0]].path[readElement[1]].y = currentY;\n            occupiedFrom.set(currentY, reads[readElement[0]].firstNodeOffset);\n            if (!occupiedUntil.has(currentY) || occupiedUntil.get(currentY) + 1 < reads[readElement[0]].firstNodeOffset) {\n                currentY += 7;\n                maxY = Math.max(maxY, currentY);\n            } else {\n                occupiedUntil.set(currentY, 0);\n                node.incomingReads.forEach(function (incReadElementIndices) {\n                    var incRead = reads[incReadElementIndices[0]];\n                    var incReadPathElement = incRead.path[incReadElementIndices[1]];\n                    if (incReadPathElement.y >= currentY) {\n                        incReadPathElement.y += 7;\n                        setOccupiedUntil(occupiedUntil, incRead, incReadElementIndices[1], incReadPathElement.y, node);\n                    }\n                });\n                currentY += 7;\n                maxY += 7;\n            }\n        });\n        node.internalReads.sort(compareInternalReads);\n        node.internalReads.forEach(function (readIdx) {\n            var currentRead = reads[readIdx];\n            currentY = node.y + node.contentHeight;\n            while (currentRead.firstNodeOffset < occupiedUntil.get(currentY) + 2 || currentRead.finalNodeCoverLength > occupiedFrom.get(currentY) - 3) {\n                currentY += 7;\n            }\n            currentRead.path[0].y = currentY;\n            occupiedUntil.set(currentY, currentRead.finalNodeCoverLength);\n            maxY = Math.max(maxY, currentY);\n        });\n        var heightIncrease = maxY - node.y - node.contentHeight;\n        node.contentHeight += heightIncrease;\n        adjustVertically3(node, heightIncrease);\n    });\n    var bottomY = calculateBottomY();\n    var elementsWithoutNode = [];\n    reads.forEach(function (read, idx) {\n        read.path.forEach(function (element, pathIdx) {\n            if (!element.hasOwnProperty('y')) {\n                elementsWithoutNode.push({\n                    readIndex: idx,\n                    pathIndex: pathIdx,\n                    previousY: reads[idx].path[pathIdx - 1].y\n                });\n            }\n        });\n    });\n    elementsWithoutNode.sort(compareNoNodeReadsByPreviousY);\n    elementsWithoutNode.forEach(function (element) {\n        var segment = reads[element.readIndex].path[element.pathIndex];\n        segment.y = bottomY[segment.order];\n        bottomY[segment.order] += reads[element.readIndex].width;\n    });\n    console.log('Reads:');\n    console.log(reads);\n}\nfunction setOccupiedUntil(map, read, pathIndex, y, node) {\n    if (pathIndex === read.path.length - 1) {\n        map.set(y, read.finalNodeCoverLength);\n    } else {\n        map.set(y, node.sequenceLength);\n    }\n}\nfunction compareNoNodeReadsByPreviousY(a, b) {\n    var segmentA = reads[a.readIndex].path[a.pathIndex];\n    var segmentB = reads[b.readIndex].path[b.pathIndex];\n    if (segmentA.order === segmentB.order) {\n        return a.previousY - b.previousY;\n    }\n    return segmentA.order - segmentB.order;\n}\nfunction compareReadOutgoingSegmentsByGoingTo(a, b) {\n    var pathIndexA = a[1];\n    var pathIndexB = b[1];\n    var nodeA = nodes[reads[a[0]].path[pathIndexA].node];\n    var nodeB = nodes[reads[b[0]].path[pathIndexB].node];\n    while (nodeA !== null && nodeB !== null && nodeA === nodeB) {\n        if (pathIndexA < reads[a[0]].path.length - 1) {\n            pathIndexA += 1;\n            while (reads[a[0]].path[pathIndexA].node === null) {\n                pathIndexA += 1;\n            }\n            nodeA = nodes[reads[a[0]].path[pathIndexA].node];\n        } else {\n            nodeA = null;\n        }\n        if (pathIndexB < reads[b[0]].path.length - 1) {\n            pathIndexB += 1;\n            while (reads[b[0]].path[pathIndexB].node === null) {\n                pathIndexB += 1;\n            }\n            nodeB = nodes[reads[b[0]].path[pathIndexB].node];\n        } else {\n            nodeB = null;\n        }\n    }\n    if (nodeA !== null) {\n        if (nodeB !== null)\n            return compareNodesByOrder(nodeA, nodeB);\n        return 1;\n    }\n    if (nodeB !== null)\n        return -1;\n    var beginDiff = reads[a[0]].firstNodeOffset - reads[b[0]].firstNodeOffset;\n    if (beginDiff !== 0)\n        return beginDiff;\n    return reads[a[0]].finalNodeCoverLength - reads[b[0]].finalNodeCoverLength;\n}\nfunction compareReadIncomingSegmentsByComingFrom(a, b) {\n    var pathA = reads[a[0]].path[a[1] - 1];\n    var pathB = reads[b[0]].path[b[1] - 1];\n    if (pathA.hasOwnProperty('y')) {\n        if (pathB.hasOwnProperty('y')) {\n            return pathA.y - pathB.y;\n        }\n        return -1;\n    }\n    if (pathB.hasOwnProperty('y')) {\n        return 1;\n    }\n    return compareReadIncomingSegmentsByComingFrom([\n        a[0],\n        a[1] - 1\n    ], [\n        b[0],\n        b[1] - 1\n    ]);\n}\nfunction compareInternalReads(idxA, idxB) {\n    var a = reads[idxA];\n    var b = reads[idxB];\n    if (a.firstNodeOffset < b.firstNodeOffset)\n        return -1;\n    else if (a.firstNodeOffset > b.firstNodeOffset)\n        return 1;\n    if (a.finalNodeCoverLength < b.finalNodeCoverLength)\n        return -1;\n    else if (a.finalNodeCoverLength > b.finalNodeCoverLength)\n        return 1;\n    return 0;\n}\nfunction calculateBottomY() {\n    var bottomY = [];\n    for (var i = 0; i <= maxOrder; i += 1) {\n        bottomY.push(0);\n    }\n    nodes.forEach(function (node) {\n        bottomY[node.order] = Math.max(bottomY[node.order], node.y + node.contentHeight + 20);\n    });\n    tracks.forEach(function (track) {\n        track.path.forEach(function (element) {\n            bottomY[element.order] = Math.max(bottomY[element.order], element.y + track.width);\n        });\n    });\n    return bottomY;\n}\nfunction generateBasicPathsForReads() {\n    var currentNodeIndex = void 0;\n    var currentNodeIsForward = void 0;\n    var currentNode = void 0;\n    var previousNode = void 0;\n    var previousNodeIsForward = void 0;\n    var isPositive = function isPositive(n) {\n        return ((n = +n) || 1 / n) >= 0;\n    };\n    reads.forEach(function (read) {\n        currentNodeIndex = Math.abs(read.indexSequence[0]);\n        currentNodeIsForward = isPositive(read.indexSequence[0]);\n        currentNode = nodes[currentNodeIndex];\n        read.path = [];\n        read.path.push({\n            order: currentNode.order,\n            isForward: currentNodeIsForward,\n            node: currentNodeIndex\n        });\n        for (var i = 1; i < read.sequence.length; i += 1) {\n            previousNode = currentNode;\n            previousNodeIsForward = currentNodeIsForward;\n            currentNodeIndex = Math.abs(read.indexSequence[i]);\n            currentNodeIsForward = isPositive(read.indexSequence[i]);\n            currentNode = nodes[currentNodeIndex];\n            if (currentNode.order > previousNode.order) {\n                if (!previousNodeIsForward) {\n                    read.path.push({\n                        order: previousNode.order,\n                        isForward: true,\n                        node: null\n                    });\n                }\n                for (var j = previousNode.order + 1; j < currentNode.order; j += 1) {\n                    read.path.push({\n                        order: j,\n                        isForward: true,\n                        node: null\n                    });\n                }\n                if (!currentNodeIsForward) {\n                    read.path.push({\n                        order: currentNode.order,\n                        isForward: true,\n                        node: null\n                    });\n                    read.path.push({\n                        order: currentNode.order,\n                        isForward: false,\n                        node: currentNodeIndex\n                    });\n                } else {\n                    read.path.push({\n                        order: currentNode.order,\n                        isForward: true,\n                        node: currentNodeIndex\n                    });\n                }\n            } else if (currentNode.order < previousNode.order) {\n                if (previousNodeIsForward) {\n                    read.path.push({\n                        order: previousNode.order,\n                        isForward: false,\n                        node: null\n                    });\n                }\n                for (var _j = previousNode.order - 1; _j > currentNode.order; _j -= 1) {\n                    read.path.push({\n                        order: _j,\n                        isForward: false,\n                        node: null\n                    });\n                }\n                if (currentNodeIsForward) {\n                    read.path.push({\n                        order: currentNode.order,\n                        isForward: false,\n                        node: null\n                    });\n                    read.path.push({\n                        order: currentNode.order,\n                        isForward: true,\n                        node: currentNodeIndex\n                    });\n                } else {\n                    read.path.push({\n                        order: currentNode.order,\n                        isForward: false,\n                        node: currentNodeIndex\n                    });\n                }\n            } else {\n                if (currentNodeIsForward !== previousNodeIsForward) {\n                    read.path.push({\n                        order: currentNode.order,\n                        isForward: currentNodeIsForward,\n                        node: currentNodeIndex\n                    });\n                } else {\n                    read.path.push({\n                        order: currentNode.order,\n                        isForward: !currentNodeIsForward,\n                        node: null\n                    });\n                    read.path.push({\n                        order: currentNode.order,\n                        isForward: currentNodeIsForward,\n                        node: currentNodeIndex\n                    });\n                }\n            }\n        }\n    });\n}\nfunction reverseReversedReads() {\n    reads.forEach(function (read) {\n        var pos = 0;\n        while (pos < read.sequence.length && read.sequence[pos].charAt(0) === '-') {\n            pos += 1;\n        }\n        if (pos === read.sequence.length) {\n            read.is_reverse = true;\n            read.sequence = read.sequence.reverse();\n            for (var i = 0; i < read.sequence.length; i += 1) {\n                read.sequence[i] = read.sequence[i].substr(1);\n            }\n            read.sequenceNew = read.sequenceNew.reverse();\n            var _loop = function _loop(_i) {\n                read.sequenceNew[_i].nodeName = read.sequenceNew[_i].nodeName.substr(1);\n                var nodeWidth = nodes[nodeMap.get(read.sequenceNew[_i].nodeName)].width;\n                read.sequenceNew[_i].mismatches.forEach(function (mm) {\n                    if (mm.type === 'insertion') {\n                        mm.pos = nodeWidth - mm.pos;\n                        mm.seq = getReverseComplement(mm.seq);\n                    } else if (mm.type === 'deletion') {\n                        mm.pos = nodeWidth - mm.pos - mm.length;\n                    } else if (mm.type === 'substitution') {\n                        mm.pos = nodeWidth - mm.pos - mm.seq.length;\n                        mm.seq = getReverseComplement(mm.seq);\n                    }\n                    if (mm.hasOwnProperty('seq')) {\n                        mm.seq = mm.seq.split('').reverse().join('');\n                    }\n                });\n            };\n            for (var _i = 0; _i < read.sequenceNew.length; _i += 1) {\n                _loop(_i);\n            }\n            var temp = read.firstNodeOffset;\n            var seqLength = nodes[nodeMap.get(read.sequence[0])].sequenceLength;\n            read.firstNodeOffset = seqLength - read.finalNodeCoverLength;\n            seqLength = nodes[nodeMap.get(read.sequence[read.sequence.length - 1])].sequenceLength;\n            read.finalNodeCoverLength = seqLength - temp;\n        }\n    });\n}\nfunction getReverseComplement(s) {\n    var result = '';\n    for (var i = s.length - 1; i >= 0; i -= 1) {\n        switch (s.charAt(i)) {\n        case 'A':\n            result += 'T';\n            break;\n        case 'T':\n            result += 'A';\n            break;\n        case 'C':\n            result += 'G';\n            break;\n        case 'G':\n            result += 'C';\n            break;\n        default:\n            result += 'N';\n        }\n    }\n    return result;\n}\nfunction generateTrackIndexSequencesNEW(tracksOrReads) {\n    tracksOrReads.forEach(function (track) {\n        track.indexSequence = [];\n        track.sequence.forEach(function (edit) {\n            if (edit.nodeName.charAt(0) === '-') {\n                track.indexSequence.push(-nodeMap.get(edit.nodeName.substr(1)));\n            } else {\n                track.indexSequence.push(nodeMap.get(edit.nodeName));\n            }\n        });\n    });\n}\nfunction generateTrackIndexSequences(tracksOrReads) {\n    tracksOrReads.forEach(function (track) {\n        track.indexSequence = [];\n        track.sequence.forEach(function (nodeName) {\n            if (nodeName.charAt(0) === '-') {\n                track.indexSequence.push(-nodeMap.get(nodeName.substr(1)));\n            } else {\n                track.indexSequence.push(nodeMap.get(nodeName));\n            }\n        });\n    });\n}\nfunction removeUnusedNodes(allNodes) {\n    var dNodes = allNodes.slice(0);\n    var i = void 0;\n    for (i = dNodes.length - 1; i >= 0; i -= 1) {\n        if (!dNodes[i].hasOwnProperty('x')) {\n            dNodes.splice(i, 1);\n        }\n    }\n    return dNodes;\n}\nfunction getImageDimensions() {\n    maxXCoordinate = -99;\n    minYCoordinate = 99;\n    maxYCoordinate = -99;\n    nodes.forEach(function (node) {\n        if (node.hasOwnProperty('x')) {\n            maxXCoordinate = Math.max(maxXCoordinate, node.x + 20 + node.pixelWidth);\n        }\n        if (node.hasOwnProperty('y')) {\n            minYCoordinate = Math.min(minYCoordinate, node.y - 10);\n            maxYCoordinate = Math.max(maxYCoordinate, node.y + node.contentHeight + 10);\n        }\n    });\n    tracks.forEach(function (track) {\n        track.path.forEach(function (segment) {\n            maxYCoordinate = Math.max(maxYCoordinate, segment.y + track.width);\n            minYCoordinate = Math.min(minYCoordinate, segment.y);\n        });\n    });\n}\nfunction alignSVG() {\n    svg.attr('height', maxYCoordinate - minYCoordinate + 50);\n    svg.attr('width', $(svgID).parent().width());\n    function zoomed() {\n        var transform = d3.event.transform;\n        transform.y = (25 - minYCoordinate) * transform.k;\n        svg.attr('transform', transform);\n        var svg2 = d3.select(svgID);\n        svg2.attr('height', (maxYCoordinate - minYCoordinate + 50) * d3.event.transform.k);\n        svg2.attr('width', document.getElementById('tubeMapSVG').clientWidth);\n    }\n    exports.zoom = zoom = d3.zoom().scaleExtent([\n        $(svgID).parent().width() / maxXCoordinate,\n        8\n    ]).translateExtent([\n        [\n            -1,\n            minYCoordinate - 25\n        ],\n        [\n            maxXCoordinate + 2,\n            maxYCoordinate + 25\n        ]\n    ]).on('zoom', zoomed);\n    svg = svg.call(zoom).on('dblclick.zoom', null).append('g');\n    d3.select(svgID).call(zoom.transform, d3.zoomIdentity.translate(0, 25 - minYCoordinate));\n}\nfunction zoomBy(zoomFactor) {\n    var minZoom = $(svgID).parent().width() / maxXCoordinate;\n    var maxZoom = 8;\n    var width = document.getElementById(svgID.substring(1)).parentElement.clientWidth;\n    var transform = d3.zoomTransform(d3.select(svgID).node());\n    var translateK = Math.min(maxZoom, Math.max(transform.k * zoomFactor, minZoom));\n    var translateX = width / 2 - (width / 2 - transform.x) * translateK / transform.k;\n    translateX = Math.min(translateX, 1 * translateK);\n    translateX = Math.max(translateX, width - (maxXCoordinate + 2) * translateK);\n    var translateY = (25 - minYCoordinate) * translateK;\n    d3.select(svgID).transition().duration(750).call(zoom.transform, d3.zoomIdentity.translate(translateX, translateY).scale(translateK));\n}\nfunction generateNodeMap() {\n    nodeMap = new Map();\n    nodes.forEach(function (node, index) {\n        nodeMap.set(node.name, index);\n    });\n    return nodeMap;\n}\nfunction generateNodeSuccessors() {\n    var current = void 0;\n    var follower = void 0;\n    nodes.forEach(function (node) {\n        node.successors = [];\n        node.predecessors = [];\n    });\n    tracks.forEach(function (track) {\n        for (var i = 0; i < track.indexSequence.length - 1; i += 1) {\n            current = Math.abs(track.indexSequence[i]);\n            follower = Math.abs(track.indexSequence[i + 1]);\n            if (nodes[current].successors.indexOf(follower) === -1) {\n                nodes[current].successors.push(follower);\n            }\n            if (nodes[follower].predecessors.indexOf(current) === -1) {\n                nodes[follower].predecessors.push(current);\n            }\n        }\n    });\n    if (reads && config.showReads) {\n        reads.forEach(function (track) {\n            for (var i = 0; i < track.indexSequence.length - 1; i += 1) {\n                current = Math.abs(track.indexSequence[i]);\n                follower = Math.abs(track.indexSequence[i + 1]);\n                if (nodes[current].successors.indexOf(follower) === -1) {\n                    nodes[current].successors.push(follower);\n                }\n                if (nodes[follower].predecessors.indexOf(current) === -1) {\n                    nodes[follower].predecessors.push(current);\n                }\n            }\n        });\n    }\n}\nfunction generateNodeOrderOfSingleTrack(sequence) {\n    var forwardOrder = 0;\n    var backwardOrder = 0;\n    var currentNode = void 0;\n    var minOrder = 0;\n    sequence.forEach(function (nodeIndex) {\n        if (nodeIndex < 0) {\n            currentNode = nodes[Math.abs(nodeIndex)];\n            if (!currentNode.hasOwnProperty('order')) {\n                currentNode.order = backwardOrder;\n            }\n            if (currentNode.order < minOrder)\n                minOrder = currentNode.order;\n            forwardOrder = currentNode.order;\n            backwardOrder = currentNode.order - 1;\n        } else {\n            currentNode = nodes[nodeIndex];\n            if (!currentNode.hasOwnProperty('order')) {\n                currentNode.order = forwardOrder;\n            }\n            forwardOrder = currentNode.order + 1;\n            backwardOrder = currentNode.order;\n        }\n    });\n    if (minOrder < 0) {\n        increaseOrderForAllNodes(-minOrder);\n    }\n}\nfunction generateNodeOrderTrackBeginning(sequence) {\n    var anchorIndex = 0;\n    var currentOrder = void 0;\n    var currentNode = void 0;\n    var minOrder = 0;\n    var increment = void 0;\n    while (anchorIndex < sequence.length && !nodes[Math.abs(sequence[anchorIndex])].hasOwnProperty('order')) {\n        anchorIndex += 1;\n    }\n    if (anchorIndex >= sequence.length) {\n        return null;\n    }\n    if (sequence[anchorIndex] >= 0) {\n        currentOrder = nodes[sequence[anchorIndex]].order - 1;\n        increment = -1;\n    } else {\n        currentOrder = nodes[-sequence[anchorIndex]].order + 1;\n        increment = 1;\n    }\n    for (var j = anchorIndex - 1; j >= 0; j -= 1) {\n        currentNode = nodes[Math.abs(sequence[j])];\n        if (!currentNode.hasOwnProperty('order')) {\n            currentNode.order = currentOrder;\n            minOrder = Math.min(minOrder, currentOrder);\n            currentOrder += increment;\n        }\n    }\n    if (minOrder < 0) {\n        increaseOrderForAllNodes(-minOrder);\n    }\n    return anchorIndex;\n}\nfunction generateNodeOrder() {\n    var modifiedSequence = void 0;\n    var currentOrder = void 0;\n    var currentNode = void 0;\n    var rightIndex = void 0;\n    var leftIndex = void 0;\n    var minOrder = 0;\n    var tracksAndReads = void 0;\n    if (reads && config.showReads)\n        tracksAndReads = tracks.concat(reads);\n    else\n        tracksAndReads = tracks;\n    nodes.forEach(function (node) {\n        delete node.order;\n    });\n    generateNodeOrderOfSingleTrack(tracks[0].indexSequence);\n    for (var i = 1; i < tracksAndReads.length; i += 1) {\n        if (DEBUG)\n            console.log('generating order for track ' + (i + 1));\n        rightIndex = generateNodeOrderTrackBeginning(tracksAndReads[i].indexSequence);\n        if (rightIndex === null) {\n            tracksAndReads.splice(i, 1);\n            reads.splice(i - tracks.length, 1);\n            i -= 1;\n            continue;\n        }\n        modifiedSequence = uninvert(tracksAndReads[i].indexSequence);\n        while (rightIndex < modifiedSequence.length) {\n            leftIndex = rightIndex;\n            rightIndex += 1;\n            while (rightIndex < modifiedSequence.length && !nodes[modifiedSequence[rightIndex]].hasOwnProperty('order')) {\n                rightIndex += 1;\n            }\n            if (rightIndex < modifiedSequence.length) {\n                currentOrder = nodes[modifiedSequence[leftIndex]].order + 1;\n                for (var j = leftIndex + 1; j < rightIndex; j += 1) {\n                    nodes[modifiedSequence[j]].order = currentOrder;\n                    currentOrder += 1;\n                }\n                if (nodes[modifiedSequence[rightIndex]].order > nodes[modifiedSequence[leftIndex]].order) {\n                    if (nodes[modifiedSequence[rightIndex]].order < currentOrder) {\n                        increaseOrderForSuccessors(modifiedSequence[rightIndex], modifiedSequence[rightIndex - 1], currentOrder);\n                    }\n                } else {\n                    if (tracksAndReads[i].indexSequence[rightIndex] >= 0 && !isSuccessor(modifiedSequence[rightIndex], modifiedSequence[leftIndex])) {\n                        increaseOrderForSuccessors(modifiedSequence[rightIndex], modifiedSequence[rightIndex - 1], currentOrder);\n                    } else {\n                        if (tracksAndReads[i].sequence[leftIndex] < 0 || nodes[modifiedSequence[leftIndex + 1]].degree < 2 && nodes[modifiedSequence[rightIndex]].order < nodes[modifiedSequence[leftIndex]].order) {\n                            currentOrder = nodes[modifiedSequence[leftIndex]].order - 1;\n                            for (var _j2 = leftIndex + 1; _j2 < rightIndex; _j2 += 1) {\n                                nodes[modifiedSequence[_j2]].order = currentOrder;\n                                currentOrder -= 1;\n                            }\n                        }\n                    }\n                }\n            } else {\n                if (tracksAndReads[i].sequence[leftIndex] >= 0) {\n                    currentOrder = nodes[modifiedSequence[leftIndex]].order + 1;\n                    for (var _j3 = leftIndex + 1; _j3 < modifiedSequence.length; _j3 += 1) {\n                        currentNode = nodes[modifiedSequence[_j3]];\n                        if (!currentNode.hasOwnProperty('order')) {\n                            currentNode.order = currentOrder;\n                            currentOrder += 1;\n                        }\n                    }\n                } else {\n                    currentOrder = nodes[modifiedSequence[leftIndex]].order - 1;\n                    for (var _j4 = leftIndex + 1; _j4 < modifiedSequence.length; _j4 += 1) {\n                        currentNode = nodes[modifiedSequence[_j4]];\n                        if (!currentNode.hasOwnProperty('order')) {\n                            currentNode.order = currentOrder;\n                            minOrder = Math.min(minOrder, currentOrder);\n                            currentOrder -= 1;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    if (minOrder < 0)\n        increaseOrderForAllNodes(-minOrder);\n}\nfunction isSuccessor(first, second) {\n    var visited = new Array(numberOfNodes).fill(false);\n    var stack = [];\n    stack.push(first);\n    visited[first] = true;\n    while (stack.length > 0) {\n        var current = stack.pop();\n        if (current === second)\n            return true;\n        for (var i = 0; i < nodes[current].successors.length; i += 1) {\n            var childIndex = nodes[current].successors[i];\n            if (!visited[childIndex]) {\n                visited[childIndex] = true;\n                stack.push(childIndex);\n            }\n        }\n    }\n    return false;\n}\nfunction getMaxOrder() {\n    var max = -1;\n    nodes.forEach(function (node) {\n        if (node.hasOwnProperty('order') && node.order > max)\n            max = node.order;\n    });\n    return max;\n}\nfunction uninvert(sequence) {\n    var result = [];\n    for (var i = 0; i < sequence.length; i += 1) {\n        if (sequence[i] >= 0) {\n            result.push(sequence[i]);\n        } else {\n            result.push(-sequence[i]);\n        }\n    }\n    return result;\n}\nfunction increaseOrderForAllNodes(amount) {\n    nodes.forEach(function (node) {\n        if (node.hasOwnProperty('order'))\n            node.order += amount;\n    });\n}\nfunction increaseOrderForSuccessors(startingNode, tabuNode, newOrder) {\n    var increasedOrders = new Map();\n    var queue = [];\n    queue.push([\n        startingNode,\n        newOrder\n    ]);\n    var _loop2 = function _loop2() {\n        var current = queue.shift();\n        var currentNode = current[0];\n        var currentOrder = current[1];\n        if (nodes[currentNode].hasOwnProperty('order') && nodes[currentNode].order < currentOrder) {\n            if (!increasedOrders.has(currentNode) || increasedOrders.get(currentNode) < currentOrder) {\n                increasedOrders.set(currentNode, currentOrder);\n                nodes[currentNode].successors.forEach(function (successor) {\n                    if (nodes[successor].order > nodes[currentNode].order && successor !== tabuNode) {\n                        queue.push([\n                            successor,\n                            currentOrder + 1\n                        ]);\n                    }\n                });\n                if (currentNode !== startingNode) {\n                    nodes[currentNode].predecessors.forEach(function (predecessor) {\n                        if (nodes[predecessor].order > currentNode.order && predecessor !== tabuNode) {\n                            queue.push([\n                                predecessor,\n                                currentOrder + 1\n                            ]);\n                        }\n                    });\n                }\n            }\n        }\n    };\n    while (queue.length > 0) {\n        _loop2();\n    }\n    increasedOrders.forEach(function (value, key) {\n        nodes[key].order = value;\n    });\n}\nfunction generateNodeDegree() {\n    nodes.forEach(function (node) {\n        node.tracks = [];\n    });\n    tracks.forEach(function (track) {\n        track.indexSequence.forEach(function (nodeIndex) {\n            nodes[Math.abs(nodeIndex)].tracks.push(track.id);\n        });\n    });\n    nodes.forEach(function (node) {\n        if (node.hasOwnProperty('tracks'))\n            node.degree = node.tracks.length;\n    });\n}\nfunction switchNodeOrientation() {\n    var toSwitch = new Map();\n    var nodeName = void 0;\n    var prevNode = void 0;\n    var nextNode = void 0;\n    var currentNode = void 0;\n    for (var i = 1; i < tracks.length; i += 1) {\n        for (var j = 0; j < tracks[i].sequence.length; j += 1) {\n            nodeName = tracks[i].sequence[j];\n            if (nodeName.charAt(0) === '-')\n                nodeName = nodeName.substr(1);\n            currentNode = nodes[nodeMap.get(nodeName)];\n            if (tracks[0].sequence.indexOf(nodeName) === -1) {\n                if (j > 0) {\n                    if (tracks[i].sequence[j - 1].charAt(0) !== '-')\n                        prevNode = nodes[nodeMap.get(tracks[i].sequence[j - 1])];\n                    else\n                        prevNode = nodes[nodeMap.get(tracks[i].sequence[j - 1].substr(1))];\n                }\n                if (j < tracks[i].sequence.length - 1) {\n                    if (tracks[i].sequence[j + 1].charAt(0) !== '-')\n                        nextNode = nodes[nodeMap.get(tracks[i].sequence[j + 1])];\n                    else\n                        nextNode = nodes[nodeMap.get(tracks[i].sequence[j + 1].substr(1))];\n                }\n                if ((j === 0 || prevNode.order < currentNode.order) && (j === tracks[i].sequence.length - 1 || currentNode.order < nextNode.order)) {\n                    if (!toSwitch.has(nodeName))\n                        toSwitch.set(nodeName, 0);\n                    if (tracks[i].sequence[j].charAt(0) === '-')\n                        toSwitch.set(nodeName, toSwitch.get(nodeName) + 1);\n                    else\n                        toSwitch.set(nodeName, toSwitch.get(nodeName) - 1);\n                }\n                if ((j === 0 || prevNode.order > currentNode.order) && (j === tracks[i].sequence.length - 1 || currentNode.order > nextNode.order)) {\n                    if (!toSwitch.has(nodeName))\n                        toSwitch.set(nodeName, 0);\n                    if (tracks[i].sequence[j].charAt(0) === '-')\n                        toSwitch.set(nodeName, toSwitch.get(nodeName) - 1);\n                    else\n                        toSwitch.set(nodeName, toSwitch.get(nodeName) + 1);\n                }\n            }\n        }\n    }\n    tracks.forEach(function (track, trackIndex) {\n        track.sequence.forEach(function (node, nodeIndex) {\n            nodeName = node;\n            if (nodeName.charAt(0) === '-')\n                nodeName = nodeName.substr(1);\n            if (toSwitch.has(nodeName) && toSwitch.get(nodeName) > 0) {\n                if (node.charAt(0) === '-')\n                    tracks[trackIndex].sequence[nodeIndex] = node.substr(1);\n                else\n                    tracks[trackIndex].sequence[nodeIndex] = '-' + node;\n            }\n        });\n    });\n    toSwitch.forEach(function (value, key) {\n        if (value > 0) {\n            currentNode = nodeMap.get(key);\n            nodes[currentNode].seq = nodes[currentNode].seq.split('').reverse().join('');\n        }\n    });\n}\nfunction generateNodeXCoords() {\n    var currentX = 0;\n    var nextX = 20;\n    var currentOrder = -1;\n    var sortedNodes = nodes.slice();\n    sortedNodes.sort(compareNodesByOrder);\n    var extra = calculateExtraSpace();\n    sortedNodes.forEach(function (node) {\n        if (node.hasOwnProperty('order')) {\n            if (node.order > currentOrder) {\n                currentOrder = node.order;\n                currentX = nextX + 10 * extra[node.order];\n            }\n            node.x = currentX;\n            nextX = Math.max(nextX, currentX + 40 + node.pixelWidth);\n        }\n    });\n}\nfunction calculateExtraSpace() {\n    var leftSideEdges = [];\n    var rightSideEdges = [];\n    var extra = [];\n    for (var i = 0; i <= maxOrder; i += 1) {\n        leftSideEdges.push(0);\n        rightSideEdges.push(0);\n    }\n    tracks.forEach(function (track) {\n        for (var _i2 = 1; _i2 < track.path.length; _i2 += 1) {\n            if (track.path[_i2].order === track.path[_i2 - 1].order) {\n                if (track.path[_i2].isForward === true)\n                    leftSideEdges[track.path[_i2].order] += 1;\n                else\n                    rightSideEdges[track.path[_i2].order] += 1;\n            }\n        }\n    });\n    extra.push(Math.max(0, leftSideEdges[0] - 1));\n    for (var _i3 = 1; _i3 <= maxOrder; _i3 += 1) {\n        extra.push(Math.max(0, leftSideEdges[_i3] - 1) + Math.max(0, rightSideEdges[_i3 - 1] - 1));\n    }\n    return extra;\n}\nfunction generateLaneAssignment() {\n    var segmentNumber = void 0;\n    var currentNodeIndex = void 0;\n    var currentNodeIsForward = void 0;\n    var currentNode = void 0;\n    var previousNode = void 0;\n    var previousNodeIsForward = void 0;\n    var prevSegmentPerOrderPerTrack = [];\n    var isPositive = function isPositive(n) {\n        return ((n = +n) || 1 / n) >= 0;\n    };\n    for (var i = 0; i <= maxOrder; i += 1) {\n        assignments[i] = [];\n        prevSegmentPerOrderPerTrack[i] = [];\n        for (var j = 0; j < numberOfTracks; j += 1) {\n            prevSegmentPerOrderPerTrack[i][j] = null;\n        }\n    }\n    tracks.forEach(function (track, trackNo) {\n        currentNodeIndex = Math.abs(track.indexSequence[0]);\n        currentNodeIsForward = isPositive(track.indexSequence[0]);\n        currentNode = nodes[currentNodeIndex];\n        track.path = [];\n        track.path.push({\n            order: currentNode.order,\n            lane: null,\n            isForward: currentNodeIsForward,\n            node: currentNodeIndex\n        });\n        addToAssignment(currentNode.order, currentNodeIndex, trackNo, 0, prevSegmentPerOrderPerTrack);\n        segmentNumber = 1;\n        for (var _i4 = 1; _i4 < track.sequence.length; _i4 += 1) {\n            previousNode = currentNode;\n            previousNodeIsForward = currentNodeIsForward;\n            currentNodeIndex = Math.abs(track.indexSequence[_i4]);\n            currentNodeIsForward = isPositive(track.indexSequence[_i4]);\n            currentNode = nodes[currentNodeIndex];\n            if (currentNode.order > previousNode.order) {\n                if (!previousNodeIsForward) {\n                    track.path.push({\n                        order: previousNode.order,\n                        lane: null,\n                        isForward: true,\n                        node: null\n                    });\n                    addToAssignment(previousNode.order, null, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                }\n                for (var _j5 = previousNode.order + 1; _j5 < currentNode.order; _j5 += 1) {\n                    track.path.push({\n                        order: _j5,\n                        lane: null,\n                        isForward: true,\n                        node: null\n                    });\n                    addToAssignment(_j5, null, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                }\n                if (!currentNodeIsForward) {\n                    track.path.push({\n                        order: currentNode.order,\n                        lane: null,\n                        isForward: true,\n                        node: null\n                    });\n                    addToAssignment(currentNode.order, null, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                    track.path.push({\n                        order: currentNode.order,\n                        lane: null,\n                        isForward: false,\n                        node: currentNodeIndex\n                    });\n                    addToAssignment(currentNode.order, currentNodeIndex, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                } else {\n                    track.path.push({\n                        order: currentNode.order,\n                        lane: null,\n                        isForward: true,\n                        node: currentNodeIndex\n                    });\n                    addToAssignment(currentNode.order, currentNodeIndex, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                }\n            } else if (currentNode.order < previousNode.order) {\n                if (previousNodeIsForward) {\n                    track.path.push({\n                        order: previousNode.order,\n                        lane: null,\n                        isForward: false,\n                        node: null\n                    });\n                    addToAssignment(previousNode.order, null, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                }\n                for (var _j6 = previousNode.order - 1; _j6 > currentNode.order; _j6 -= 1) {\n                    track.path.push({\n                        order: _j6,\n                        lane: null,\n                        isForward: false,\n                        node: null\n                    });\n                    addToAssignment(_j6, null, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                }\n                if (currentNodeIsForward) {\n                    track.path.push({\n                        order: currentNode.order,\n                        lane: null,\n                        isForward: false,\n                        node: null\n                    });\n                    addToAssignment(currentNode.order, null, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                    track.path.push({\n                        order: currentNode.order,\n                        lane: null,\n                        isForward: true,\n                        node: currentNodeIndex\n                    });\n                    addToAssignment(currentNode.order, currentNodeIndex, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                } else {\n                    track.path.push({\n                        order: currentNode.order,\n                        lane: null,\n                        isForward: false,\n                        node: currentNodeIndex\n                    });\n                    addToAssignment(currentNode.order, currentNodeIndex, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                }\n            } else {\n                if (currentNodeIsForward !== previousNodeIsForward) {\n                    track.path.push({\n                        order: currentNode.order,\n                        lane: null,\n                        isForward: currentNodeIsForward,\n                        node: currentNodeIndex\n                    });\n                    addToAssignment(currentNode.order, currentNodeIndex, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                } else {\n                    track.path.push({\n                        order: currentNode.order,\n                        lane: null,\n                        isForward: !currentNodeIsForward,\n                        node: null\n                    });\n                    addToAssignment(currentNode.order, null, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                    track.path.push({\n                        order: currentNode.order,\n                        lane: null,\n                        isForward: currentNodeIsForward,\n                        node: currentNodeIndex\n                    });\n                    addToAssignment(currentNode.order, currentNodeIndex, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                }\n            }\n        }\n    });\n    for (var _i5 = 0; _i5 <= maxOrder; _i5 += 1) {\n        generateSingleLaneAssignment(assignments[_i5], _i5);\n    }\n}\nfunction addToAssignment(order, nodeIndex, trackNo, segmentID, prevSegmentPerOrderPerTrack) {\n    var compareToFromSame = prevSegmentPerOrderPerTrack[order][trackNo];\n    if (nodeIndex === null) {\n        assignments[order].push({\n            type: 'single',\n            node: null,\n            tracks: [{\n                    trackID: trackNo,\n                    segmentID: segmentID,\n                    compareToFromSame: compareToFromSame\n                }]\n        });\n        prevSegmentPerOrderPerTrack[order][trackNo] = assignments[order][assignments[order].length - 1].tracks[0];\n    } else {\n        for (var i = 0; i < assignments[order].length; i += 1) {\n            if (assignments[order][i].node === nodeIndex) {\n                assignments[order][i].type = 'multiple';\n                assignments[order][i].tracks.push({\n                    trackID: trackNo,\n                    segmentID: segmentID,\n                    compareToFromSame: compareToFromSame\n                });\n                prevSegmentPerOrderPerTrack[order][trackNo] = assignments[order][i].tracks[assignments[order][i].tracks.length - 1];\n                return;\n            }\n        }\n        assignments[order].push({\n            type: 'single',\n            node: nodeIndex,\n            tracks: [{\n                    trackID: trackNo,\n                    segmentID: segmentID,\n                    compareToFromSame: compareToFromSame\n                }]\n        });\n        prevSegmentPerOrderPerTrack[order][trackNo] = assignments[order][assignments[order].length - 1].tracks[0];\n    }\n}\nfunction getIdealLanesAndCoords(assignment, order) {\n    var index = void 0;\n    assignment.forEach(function (node) {\n        node.idealLane = 0;\n        node.tracks.forEach(function (track) {\n            if (track.segmentID === 0) {\n                track.idealLane = track.trackID;\n                track.idealY = null;\n            } else {\n                if (tracks[track.trackID].path[track.segmentID - 1].order === order - 1) {\n                    track.idealLane = tracks[track.trackID].path[track.segmentID - 1].lane;\n                    track.idealY = tracks[track.trackID].path[track.segmentID - 1].y;\n                } else if (track.segmentID < tracks[track.trackID].path.length - 1 && tracks[track.trackID].path[track.segmentID + 1].order === order - 1) {\n                    track.idealLane = tracks[track.trackID].path[track.segmentID + 1].lane;\n                    track.idealY = tracks[track.trackID].path[track.segmentID + 1].y;\n                } else {\n                    index = track.segmentID - 1;\n                    while (index >= 0 && tracks[track.trackID].path[index].order !== order - 1) {\n                        index -= 1;\n                    }\n                    if (index < 0) {\n                        track.idealLane = track.trackID;\n                        track.idealY = null;\n                    } else {\n                        track.idealLane = tracks[track.trackID].path[index].lane;\n                        track.idealY = tracks[track.trackID].path[index].y;\n                    }\n                }\n            }\n            node.idealLane += track.idealLane;\n        });\n        node.idealLane /= node.tracks.length;\n    });\n}\nfunction generateSingleLaneAssignment(assignment, order) {\n    var currentLane = 0;\n    var potentialAdjustmentValues = new Set();\n    var currentY = 20;\n    var prevNameIsNull = false;\n    var prevTrack = -1;\n    getIdealLanesAndCoords(assignment, order);\n    assignment.sort(compareByIdealLane);\n    assignment.forEach(function (node) {\n        if (node.node !== null) {\n            nodes[node.node].topLane = currentLane;\n            if (prevNameIsNull)\n                currentY -= 10;\n            nodes[node.node].y = currentY;\n            nodes[node.node].contentHeight = 0;\n            prevNameIsNull = false;\n        } else {\n            if (prevNameIsNull)\n                currentY -= 25;\n            else if (currentY > 20)\n                currentY -= 10;\n            prevNameIsNull = true;\n        }\n        node.tracks.sort(compareByIdealLane);\n        node.tracks.forEach(function (track) {\n            track.lane = currentLane;\n            if (track.trackID === prevTrack && node.node === null && prevNameIsNull)\n                currentY += 10;\n            tracks[track.trackID].path[track.segmentID].lane = currentLane;\n            tracks[track.trackID].path[track.segmentID].y = currentY;\n            if (track.idealY !== null)\n                potentialAdjustmentValues.add(track.idealY - currentY);\n            currentLane += 1;\n            currentY += tracks[track.trackID].width;\n            if (node.node !== null) {\n                nodes[node.node].contentHeight += tracks[track.trackID].width;\n            }\n            prevTrack = track.trackID;\n        });\n        currentY += 25;\n    });\n    adjustVertically(assignment, potentialAdjustmentValues);\n}\nfunction adjustVertically(assignment, potentialAdjustmentValues) {\n    var verticalAdjustment = 0;\n    var minAdjustmentCost = Number.MAX_SAFE_INTEGER;\n    potentialAdjustmentValues.forEach(function (moveBy) {\n        if (getVerticalAdjustmentCost(assignment, moveBy) < minAdjustmentCost) {\n            minAdjustmentCost = getVerticalAdjustmentCost(assignment, moveBy);\n            verticalAdjustment = moveBy;\n        }\n    });\n    assignment.forEach(function (node) {\n        if (node.node !== null) {\n            nodes[node.node].y += verticalAdjustment;\n        }\n        node.tracks.forEach(function (track) {\n            tracks[track.trackID].path[track.segmentID].y += verticalAdjustment;\n        });\n    });\n}\nfunction adjustVertically3(node, adjustBy) {\n    if (node.hasOwnProperty('order')) {\n        assignments[node.order].forEach(function (assignmentNode) {\n            if (assignmentNode.node !== null) {\n                var aNode = nodes[assignmentNode.node];\n                if (aNode !== node && aNode.y > node.y) {\n                    aNode.y += adjustBy;\n                    assignmentNode.tracks.forEach(function (track) {\n                        tracks[track.trackID].path[track.segmentID].y += adjustBy;\n                    });\n                }\n            } else {\n                assignmentNode.tracks.forEach(function (track) {\n                    if (tracks[track.trackID].path[track.segmentID].y >= node.y) {\n                        tracks[track.trackID].path[track.segmentID].y += adjustBy;\n                    }\n                });\n            }\n        });\n        if (nodesPerOrder[node.order].length > 0) {\n            nodesPerOrder[node.order].forEach(function (nodeIndex) {\n                if (nodes[nodeIndex] !== node && nodes[nodeIndex].y > node.y) {\n                    nodes[nodeIndex].y += adjustBy;\n                }\n            });\n        }\n    }\n}\nfunction getVerticalAdjustmentCost(assignment, moveBy) {\n    var result = 0;\n    assignment.forEach(function (node) {\n        node.tracks.forEach(function (track) {\n            if (track.idealY !== null && tracks[track.trackID].type !== 'read') {\n                result += Math.abs(track.idealY - moveBy - tracks[track.trackID].path[track.segmentID].y) * tracks[track.trackID].width;\n            }\n        });\n    });\n    return result;\n}\nfunction compareByIdealLane(a, b) {\n    if (a.hasOwnProperty('idealLane')) {\n        if (b.hasOwnProperty('idealLane')) {\n            if (a.idealLane < b.idealLane)\n                return -1;\n            else if (a.idealLane > b.idealLane)\n                return 1;\n            return 0;\n        }\n        return -1;\n    }\n    if (b.hasOwnProperty('idealLane')) {\n        return 1;\n    }\n    return 0;\n}\nfunction compareNodesByOrder(a, b) {\n    if (a === null) {\n        if (b === null)\n            return 0;\n        return -1;\n    }\n    if (b === null)\n        return 1;\n    if (a.hasOwnProperty('order')) {\n        if (b.hasOwnProperty('order')) {\n            if (a.order < b.order)\n                return -1;\n            else if (a.order > b.order)\n                return 1;\n            if (a.hasOwnProperty('y') && b.hasOwnProperty('y')) {\n                if (a.y < b.y)\n                    return -1;\n                else if (a.y > b.y)\n                    return 1;\n            }\n            return 0;\n        }\n        return -1;\n    }\n    if (b.hasOwnProperty('order'))\n        return 1;\n    return 0;\n}\nfunction addTrackFeatures() {\n    var nodeStart = void 0;\n    var nodeEnd = void 0;\n    var feature = {};\n    bed.forEach(function (line) {\n        var i = 0;\n        while (i < numberOfTracks && tracks[i].name !== line.track) {\n            i += 1;\n        }\n        if (i < numberOfTracks) {\n            nodeStart = 0;\n            tracks[i].path.forEach(function (node) {\n                if (node.node !== null) {\n                    feature = {};\n                    if (nodes[node.node].hasOwnProperty('sequenceLength')) {\n                        nodeEnd = nodeStart + nodes[node.node].sequenceLength - 1;\n                    } else {\n                        nodeEnd = nodeStart + nodes[node.node].width - 1;\n                    }\n                    if (nodeStart >= line.start && nodeStart <= line.end)\n                        feature.start = 0;\n                    if (nodeStart < line.start && nodeEnd >= line.start)\n                        feature.start = line.start - nodeStart;\n                    if (nodeEnd <= line.end && nodeEnd >= line.start) {\n                        feature.end = nodeEnd - nodeStart;\n                        if (nodeEnd < line.end)\n                            feature.continue = true;\n                    }\n                    if (nodeEnd > line.end && nodeStart <= line.end)\n                        feature.end = line.end - nodeStart;\n                    if (feature.hasOwnProperty('start')) {\n                        feature.type = line.type;\n                        feature.name = line.name;\n                        if (!node.hasOwnProperty('features'))\n                            node.features = [];\n                        node.features.push(feature);\n                    }\n                    nodeStart = nodeEnd + 1;\n                }\n            });\n        } else {\n        }\n    });\n}\nfunction calculateTrackWidth() {\n    var allAreFour = true;\n    tracks.forEach(function (track) {\n        if (track.hasOwnProperty('freq')) {\n            track.width = Math.round((Math.log(track.freq) + 1) * 4);\n        } else {\n            track.width = 15;\n            if (track.hasOwnProperty('type') && track.type === 'read') {\n                track.width = 4;\n            }\n        }\n        if (track.width !== 4) {\n            allAreFour = false;\n        }\n    });\n    if (allAreFour) {\n        tracks.forEach(function (track) {\n            if (track.hasOwnProperty('freq')) {\n                track.width = 15;\n            }\n        });\n    }\n}\nfunction useColorScheme(x) {\n    config.colorScheme = x;\n    svg = d3.select(svgID);\n    var tr = createTubeMap();\n    if (!config.hideLegendFlag)\n        drawLegend(tr);\n}\nfunction assignColorSets() {\n    haplotypeColors = getColorSet(config.haplotypeColors);\n    forwardReadColors = getColorSet(config.forwardReadColors);\n    reverseReadColors = getColorSet(config.reverseReadColors);\n    exonColors = getColorSet(config.exonColors);\n}\nfunction getColorSet(colorSetName) {\n    switch (colorSetName) {\n    case 'plainColors':\n        return plainColors;\n    case 'reds':\n        return reds;\n    case 'blues':\n        return blues;\n    case 'greys':\n        return greys;\n    case 'lightColors':\n        return lightColors;\n    default:\n        return greys;\n    }\n}\nfunction generateTrackColor(track, highlight) {\n    if (typeof highlight === 'undefined')\n        highlight = 'plain';\n    var trackColor = void 0;\n    if (track.hasOwnProperty('type') && track.type === 'read') {\n        if (track.hasOwnProperty('is_reverse') && track.is_reverse === true) {\n            trackColor = reverseReadColors[track.id % reverseReadColors.length];\n        } else {\n            trackColor = forwardReadColors[track.id % forwardReadColors.length];\n        }\n    } else {\n        if (config.showExonsFlag === false || highlight !== 'plain') {\n            trackColor = haplotypeColors[track.id % haplotypeColors.length];\n        } else {\n            trackColor = exonColors[track.id % exonColors.length];\n        }\n    }\n    return trackColor;\n}\nfunction generateTrackColorOLD(track, highlight) {\n    if (typeof highlight === 'undefined')\n        highlight = 'plain';\n    var trackColor = void 0;\n    if (track.hasOwnProperty('type') && track.type === 'read') {\n        if (track.hasOwnProperty('is_reverse') && track.is_reverse === true) {\n            trackColor = blues[track.id % blues.length];\n        } else {\n            trackColor = reds[track.id % reds.length];\n        }\n    } else {\n        if (config.colorScheme === 0) {\n            if (config.showExonsFlag === false || highlight !== 'plain') {\n                trackColor = plainColors[track.id % plainColors.length];\n            } else {\n                trackColor = lightColors[track.id % lightColors.length];\n            }\n        } else if (config.colorScheme === 1) {\n            if (config.showExonsFlag === false || highlight === 'plain') {\n                trackColor = greys[track.id % greys.length];\n            } else {\n                trackColor = reds[track.id % reds.length];\n            }\n        }\n    }\n    return trackColor;\n}\nfunction getReadXStart(read) {\n    var node = nodes[read.path[0].node];\n    if (read.path[0].isForward) {\n        return getXCoordinateOfBaseWithinNode(node, read.firstNodeOffset);\n    }\n    return getXCoordinateOfBaseWithinNode(node, node.sequenceLength - read.firstNodeOffset);\n}\nfunction getReadXEnd(read) {\n    var node = nodes[read.path[read.path.length - 1].node];\n    if (read.path[read.path.length - 1].isForward) {\n        return getXCoordinateOfBaseWithinNode(node, read.finalNodeCoverLength);\n    }\n    return getXCoordinateOfBaseWithinNode(node, node.sequenceLength - read.finalNodeCoverLength);\n}\nfunction getXCoordinateOfBaseWithinNode(node, base) {\n    if (base > node.sequenceLength)\n        return null;\n    var nodeLeftX = node.x - 4;\n    var nodeRightX = node.x + node.pixelWidth + 4;\n    return nodeLeftX + base / node.sequenceLength * (nodeRightX - nodeLeftX);\n}\nfunction generateSVGShapesFromPath() {\n    var xStart = void 0;\n    var xEnd = void 0;\n    var yStart = void 0;\n    var yEnd = void 0;\n    var trackColor = void 0;\n    var highlight = void 0;\n    var dummy = void 0;\n    var reversalFlag = void 0;\n    for (var i = 0; i <= maxOrder; i += 1) {\n        extraLeft.push(0);\n        extraRight.push(0);\n    }\n    var orderStartX = [];\n    var orderEndX = [];\n    nodes.forEach(function (node) {\n        if (node.hasOwnProperty('order')) {\n            orderStartX[node.order] = node.x;\n            if (orderEndX[node.order] === undefined)\n                orderEndX[node.order] = node.x + node.pixelWidth;\n            else\n                orderEndX[node.order] = Math.max(orderEndX[node.order], node.x + node.pixelWidth);\n        }\n    });\n    tracks.forEach(function (track) {\n        highlight = 'plain';\n        trackColor = generateTrackColor(track, highlight);\n        yStart = track.path[0].y;\n        if (track.type !== 'read') {\n            if (track.sequence[0].charAt(0) === '-') {\n                xStart = orderEndX[track.path[0].order] + 20;\n            } else {\n                xStart = orderStartX[track.path[0].order] - 20;\n            }\n        } else {\n            xStart = getReadXStart(track);\n        }\n        for (var _i6 = 0; _i6 < track.path.length; _i6 += 1) {\n            if (track.path[_i6].y === yStart) {\n                if (track.path[_i6].hasOwnProperty('features')) {\n                    if (_i6 > 0 && track.path[_i6 - 1].order === track.path[_i6].order)\n                        reversalFlag = true;\n                    else\n                        reversalFlag = false;\n                    dummy = createFeatureRectangle(track.path[_i6], orderStartX[track.path[_i6].order], orderEndX[track.path[_i6].order], highlight, track, xStart, yStart, trackColor, reversalFlag);\n                    highlight = dummy.highlight;\n                    xStart = dummy.xStart;\n                }\n            } else {\n                if (track.path[_i6 - 1].isForward) {\n                    xEnd = orderEndX[track.path[_i6 - 1].order];\n                } else {\n                    xEnd = orderStartX[track.path[_i6 - 1].order];\n                }\n                if (xEnd !== xStart) {\n                    trackColor = generateTrackColor(track, highlight);\n                    trackRectangles.push({\n                        xStart: Math.min(xStart, xEnd),\n                        yStart: yStart,\n                        xEnd: Math.max(xStart, xEnd),\n                        yEnd: yStart + track.width - 1,\n                        color: trackColor,\n                        id: track.id,\n                        type: track.type\n                    });\n                }\n                if (track.path[_i6].order - 1 === track.path[_i6 - 1].order) {\n                    xStart = xEnd;\n                    xEnd = orderStartX[track.path[_i6].order];\n                    yEnd = track.path[_i6].y;\n                    trackColor = generateTrackColor(track, highlight);\n                    trackCurves.push({\n                        xStart: xStart,\n                        yStart: yStart,\n                        xEnd: xEnd + 1,\n                        yEnd: yEnd,\n                        width: track.width,\n                        color: trackColor,\n                        laneChange: Math.abs(track.path[_i6].lane - track.path[_i6 - 1].lane),\n                        id: track.id,\n                        type: track.type\n                    });\n                    xStart = xEnd;\n                    yStart = yEnd;\n                } else if (track.path[_i6].order + 1 === track.path[_i6 - 1].order) {\n                    xStart = xEnd;\n                    xEnd = orderEndX[track.path[_i6].order];\n                    yEnd = track.path[_i6].y;\n                    trackColor = generateTrackColor(track, highlight);\n                    trackCurves.push({\n                        xStart: xStart + 1,\n                        yStart: yStart,\n                        xEnd: xEnd,\n                        yEnd: yEnd,\n                        width: track.width,\n                        color: trackColor,\n                        laneChange: Math.abs(track.path[_i6].lane - track.path[_i6 - 1].lane),\n                        id: track.id,\n                        type: track.type\n                    });\n                    xStart = xEnd;\n                    yStart = yEnd;\n                } else {\n                    if (track.path[_i6 - 1].isForward) {\n                        yEnd = track.path[_i6].y;\n                        generateForwardToReverse(xEnd, yStart, yEnd, track.width, trackColor, track.id, track.path[_i6].order, track.type);\n                        xStart = orderEndX[track.path[_i6].order];\n                        yStart = track.path[_i6].y;\n                    } else {\n                        yEnd = track.path[_i6].y;\n                        generateReverseToForward(xEnd, yStart, yEnd, track.width, trackColor, track.id, track.path[_i6].order, track.type);\n                        xStart = orderStartX[track.path[_i6].order];\n                        yStart = track.path[_i6].y;\n                    }\n                }\n                if (track.path[_i6].hasOwnProperty('features')) {\n                    if (track.path[_i6 - 1].order === track.path[_i6].order)\n                        reversalFlag = true;\n                    else\n                        reversalFlag = false;\n                    dummy = createFeatureRectangle(track.path[_i6], orderStartX[track.path[_i6].order], orderEndX[track.path[_i6].order], highlight, track, xStart, yStart, trackColor, reversalFlag);\n                    highlight = dummy.highlight;\n                    xStart = dummy.xStart;\n                }\n            }\n        }\n        if (track.type !== 'read') {\n            if (!track.path[track.path.length - 1].isForward) {\n                xEnd = orderStartX[track.path[track.path.length - 1].order] - 20;\n            } else {\n                xEnd = orderEndX[track.path[track.path.length - 1].order] + 20;\n            }\n        } else {\n            xEnd = getReadXEnd(track);\n        }\n        trackRectangles.push({\n            xStart: Math.min(xStart, xEnd),\n            yStart: yStart,\n            xEnd: Math.max(xStart, xEnd),\n            yEnd: yStart + track.width - 1,\n            color: trackColor,\n            id: track.id,\n            type: track.type\n        });\n    });\n}\nfunction createFeatureRectangle(node, nodeXStart, nodeXEnd, highlight, track, rectXStart, yStart, trackColor, reversalFlag) {\n    var nodeWidth = void 0;\n    var currentHighlight = highlight;\n    var c = void 0;\n    var co = void 0;\n    var featureXStart = void 0;\n    var featureXEnd = void 0;\n    nodeXStart -= 8;\n    nodeXEnd += 8;\n    if (nodes[node.node].hasOwnProperty('sequenceLength')) {\n        nodeWidth = nodes[node.node].sequenceLength;\n    } else {\n        nodeWidth = nodes[node.node].width;\n    }\n    node.features.sort(function (a, b) {\n        return a.start - b.start;\n    });\n    node.features.forEach(function (feature) {\n        if (currentHighlight !== feature.type) {\n            c = generateTrackColor(track, currentHighlight);\n            if (node.isForward === true) {\n                featureXStart = nodeXStart + Math.round(feature.start * (nodeXEnd - nodeXStart + 1) / nodeWidth);\n                if (reversalFlag && featureXStart < nodeXStart + 8) {\n                    featureXEnd = nodeXStart + Math.round((feature.end + 1) * (nodeXEnd - nodeXStart + 1) / nodeWidth) - 1;\n                    co = generateTrackColor(track, feature.type);\n                    trackRectanglesStep3.push({\n                        xStart: featureXStart,\n                        yStart: yStart,\n                        xEnd: featureXEnd,\n                        yEnd: yStart + track.width - 1,\n                        color: co,\n                        id: track.id,\n                        type: track.type\n                    });\n                }\n                if (featureXStart > rectXStart + 1) {\n                    trackRectanglesStep3.push({\n                        xStart: rectXStart,\n                        yStart: yStart,\n                        xEnd: featureXStart - 1,\n                        yEnd: yStart + track.width - 1,\n                        color: c,\n                        id: track.id,\n                        type: track.type\n                    });\n                }\n            } else {\n                featureXStart = nodeXEnd - Math.round(feature.start * (nodeXEnd - nodeXStart + 1) / nodeWidth);\n                if (reversalFlag && featureXStart > nodeXEnd - 8) {\n                    featureXEnd = nodeXEnd - Math.round((feature.end + 1) * (nodeXEnd - nodeXStart + 1) / nodeWidth) - 1;\n                    co = generateTrackColor(track, feature.type);\n                    trackRectanglesStep3.push({\n                        xStart: featureXEnd,\n                        yStart: yStart,\n                        xEnd: featureXStart,\n                        yEnd: yStart + track.width - 1,\n                        color: co,\n                        id: track.id,\n                        type: track.type\n                    });\n                }\n                if (rectXStart > featureXStart + 1) {\n                    trackRectanglesStep3.push({\n                        xStart: featureXStart + 1,\n                        yStart: yStart,\n                        xEnd: rectXStart,\n                        yEnd: yStart + track.width - 1,\n                        color: c,\n                        id: track.id,\n                        type: track.type\n                    });\n                }\n            }\n            rectXStart = featureXStart;\n            currentHighlight = feature.type;\n        }\n        if (feature.end < nodeWidth - 1 || !feature.hasOwnProperty('continue')) {\n            c = generateTrackColor(track, currentHighlight);\n            if (node.isForward === true) {\n                featureXEnd = nodeXStart + Math.round((feature.end + 1) * (nodeXEnd - nodeXStart + 1) / nodeWidth) - 1;\n                trackRectanglesStep3.push({\n                    xStart: rectXStart,\n                    yStart: yStart,\n                    xEnd: featureXEnd,\n                    yEnd: yStart + track.width - 1,\n                    color: c,\n                    id: track.id,\n                    type: track.type\n                });\n            } else {\n                featureXEnd = nodeXEnd - Math.round((feature.end + 1) * (nodeXEnd - nodeXStart + 1) / nodeWidth) - 1;\n                trackRectanglesStep3.push({\n                    xStart: featureXEnd,\n                    yStart: yStart,\n                    xEnd: rectXStart,\n                    yEnd: yStart + track.width - 1,\n                    color: c,\n                    id: track.id,\n                    type: track.type\n                });\n            }\n            rectXStart = featureXEnd + 1;\n            currentHighlight = 'plain';\n        }\n    });\n    return {\n        xStart: rectXStart,\n        highlight: currentHighlight\n    };\n}\nfunction generateForwardToReverse(x, yStart, yEnd, trackWidth, trackColor, trackID, order, type) {\n    x += 10 * extraRight[order];\n    var yTop = Math.min(yStart, yEnd);\n    var yBottom = Math.max(yStart, yEnd);\n    var radius = 7;\n    trackVerticalRectangles.push({\n        xStart: x - 10 * extraRight[order],\n        yStart: yStart,\n        xEnd: x + 5,\n        yEnd: yStart + trackWidth - 1,\n        color: trackColor,\n        id: trackID,\n        type: type\n    });\n    trackVerticalRectangles.push({\n        xStart: x + 5 + radius,\n        yStart: yTop + trackWidth + radius - 1,\n        xEnd: x + 5 + radius + Math.min(7, trackWidth) - 1,\n        yEnd: yBottom - radius + 1,\n        color: trackColor,\n        id: trackID,\n        type: type\n    });\n    trackVerticalRectangles.push({\n        xStart: x - 10 * extraRight[order],\n        yStart: yEnd,\n        xEnd: x + 5,\n        yEnd: yEnd + trackWidth - 1,\n        color: trackColor,\n        id: trackID,\n        type: type\n    });\n    var d = 'M ' + (x + 5) + ' ' + yBottom;\n    d += ' Q ' + (x + 5 + radius) + ' ' + yBottom + ' ' + (x + 5 + radius) + ' ' + (yBottom - radius);\n    d += ' H ' + (x + 5 + radius + Math.min(7, trackWidth));\n    d += ' Q ' + (x + 5 + radius + Math.min(7, trackWidth)) + ' ' + (yBottom + trackWidth) + ' ' + (x + 5) + ' ' + (yBottom + trackWidth);\n    d += ' Z ';\n    trackCorners.push({\n        path: d,\n        color: trackColor,\n        id: trackID,\n        type: type\n    });\n    d = 'M ' + (x + 5) + ' ' + yTop;\n    d += ' Q ' + (x + 5 + radius + Math.min(7, trackWidth)) + ' ' + yTop + ' ' + (x + 5 + radius + Math.min(7, trackWidth)) + ' ' + (yTop + trackWidth + radius);\n    d += ' H ' + (x + 5 + radius);\n    d += ' Q ' + (x + 5 + radius) + ' ' + (yTop + trackWidth) + ' ' + (x + 5) + ' ' + (yTop + trackWidth);\n    d += ' Z ';\n    trackCorners.push({\n        path: d,\n        color: trackColor,\n        id: trackID,\n        type: type\n    });\n    extraRight[order] += 1;\n}\nfunction generateReverseToForward(x, yStart, yEnd, trackWidth, trackColor, trackID, order, type) {\n    var yTop = Math.min(yStart, yEnd);\n    var yBottom = Math.max(yStart, yEnd);\n    var radius = 7;\n    x -= 10 * extraLeft[order];\n    trackVerticalRectangles.push({\n        xStart: x - 6,\n        yStart: yStart,\n        xEnd: x + 10 * extraLeft[order],\n        yEnd: yStart + trackWidth - 1,\n        color: trackColor,\n        id: trackID,\n        type: type\n    });\n    trackVerticalRectangles.push({\n        xStart: x - 5 - radius - Math.min(7, trackWidth),\n        yStart: yTop + trackWidth + radius - 1,\n        xEnd: x - 5 - radius - 1,\n        yEnd: yBottom - radius + 1,\n        color: trackColor,\n        id: trackID,\n        type: type\n    });\n    trackVerticalRectangles.push({\n        xStart: x - 6,\n        yStart: yEnd,\n        xEnd: x + 10 * extraLeft[order],\n        yEnd: yEnd + trackWidth - 1,\n        color: trackColor,\n        id: trackID,\n        type: type\n    });\n    var d = 'M ' + (x - 5) + ' ' + yBottom;\n    d += ' Q ' + (x - 5 - radius) + ' ' + yBottom + ' ' + (x - 5 - radius) + ' ' + (yBottom - radius);\n    d += ' H ' + (x - 5 - radius - Math.min(7, trackWidth));\n    d += ' Q ' + (x - 5 - radius - Math.min(7, trackWidth)) + ' ' + (yBottom + trackWidth) + ' ' + (x - 5) + ' ' + (yBottom + trackWidth);\n    d += ' Z ';\n    trackCorners.push({\n        path: d,\n        color: trackColor,\n        id: trackID,\n        type: type\n    });\n    d = 'M ' + (x - 5) + ' ' + yTop;\n    d += ' Q ' + (x - 5 - radius - Math.min(7, trackWidth)) + ' ' + yTop + ' ' + (x - 5 - radius - Math.min(7, trackWidth)) + ' ' + (yTop + trackWidth + radius);\n    d += ' H ' + (x - 5 - radius);\n    d += ' Q ' + (x - 5 - radius) + ' ' + (yTop + trackWidth) + ' ' + (x - 5) + ' ' + (yTop + trackWidth);\n    d += ' Z ';\n    trackCorners.push({\n        path: d,\n        color: trackColor,\n        id: trackID,\n        type: type\n    });\n    extraLeft[order] += 1;\n}\nfunction drawReversalsByColor(corners, rectangles, type) {\n    if (typeof type === 'undefined')\n        type = 'haplo';\n    var co = new Set();\n    rectangles.forEach(function (rect) {\n        co.add(rect.color);\n    });\n    co.forEach(function (c) {\n        drawTrackRectangles(rectangles.filter(filterObjectByAttribute('color', c)), type);\n        drawTrackCorners(corners.filter(filterObjectByAttribute('color', c)), type);\n    });\n}\nfunction drawNodes(dNodes) {\n    var x = void 0;\n    var y = void 0;\n    dNodes.forEach(function (node) {\n        node.d = 'M ' + (node.x - 9) + ' ' + node.y + ' Q ' + (node.x - 9) + ' ' + (node.y - 9) + ' ' + node.x + ' ' + (node.y - 9);\n        x = node.x;\n        y = node.y - 9;\n        if (node.width > 1) {\n            x += node.pixelWidth;\n            node.d += ' L ' + x + ' ' + y;\n        }\n        node.d += ' Q ' + (x + 9) + ' ' + y + ' ' + (x + 9) + ' ' + (y + 9);\n        x += 9;\n        y += 9;\n        if (node.contentHeight > 0) {\n            y += node.contentHeight - 0;\n            node.d += ' L ' + x + ' ' + y;\n        }\n        node.d += ' Q ' + x + ' ' + (y + 9) + ' ' + (x - 9) + ' ' + (y + 9);\n        x -= 9;\n        y += 9;\n        if (node.width > 1) {\n            x -= node.pixelWidth;\n            node.d += ' L ' + x + ' ' + y;\n        }\n        node.d += ' Q ' + (x - 9) + ' ' + y + ' ' + (x - 9) + ' ' + (y - 9);\n        x -= 9;\n        y -= 9;\n        if (node.contentHeight > 0) {\n            y -= node.contentHeight - 0;\n            node.d += ' L ' + x + ' ' + y;\n        }\n    });\n    svg.selectAll('.node').data(dNodes).enter().append('path').attr('id', function (d) {\n        return d.name;\n    }).attr('d', function (d) {\n        return d.d;\n    }).on('mouseover', nodeMouseOver).on('mouseout', nodeMouseOut).on('dblclick', nodeDoubleClick).style('fill', '#fff').style('fill-opacity', config.showExonsFlag ? '0.4' : '0.6').style('stroke', 'black').style('stroke-width', '2px').append('svg:title').text(function (d) {\n        return d.name;\n    });\n}\nfunction drawLabels(dNodes) {\n    if (config.nodeWidthOption === 0) {\n        svg.selectAll('text').data(dNodes).enter().append('text').attr('x', function (d) {\n            return d.x - 4;\n        }).attr('y', function (d) {\n            return d.y + 4;\n        }).text(function (d) {\n            return d.seq;\n        }).attr('font-family', 'Courier, \"Lucida Console\", monospace').attr('font-size', '14px').attr('fill', 'black').style('pointer-events', 'none');\n    }\n}\nfunction drawRuler() {\n    var rulerTrackIndex = 0;\n    while (tracks[rulerTrackIndex].name !== trackForRuler) {\n        rulerTrackIndex += 1;\n    }\n    var rulerTrack = tracks[rulerTrackIndex];\n    svg.append('line').attr('x1', 0).attr('y1', minYCoordinate - 10).attr('x2', maxXCoordinate).attr('y2', minYCoordinate - 10).attr('stroke-width', 1).attr('stroke', 'black');\n    var markingInterval = 100;\n    if (config.nodeWidthOption === 0)\n        markingInterval = 20;\n    var indexOfFirstBaseInNode = rulerTrack.indexOfFirstBase;\n    var atLeastOneMarkingDrawn = false;\n    var xCoordOfPreviousMarking = -100;\n    if (config.nodeWidthOption !== 0) {\n        var firstNode = nodes[rulerTrack.indexSequence[0]];\n        xCoordOfPreviousMarking = getXCoordinateOfBaseWithinNode(firstNode, 0);\n        drawRulerMarking(indexOfFirstBaseInNode, xCoordOfPreviousMarking);\n        atLeastOneMarkingDrawn = true;\n    }\n    rulerTrack.indexSequence.forEach(function (nodeIndex) {\n        var currentNode = nodes[nodeIndex];\n        var nextMarking = Math.ceil(indexOfFirstBaseInNode / markingInterval) * markingInterval;\n        while (nextMarking < indexOfFirstBaseInNode + currentNode.sequenceLength) {\n            var xCoordOfMarking = getXCoordinateOfBaseWithinNode(currentNode, nextMarking - indexOfFirstBaseInNode);\n            if (xCoordOfPreviousMarking + 80 <= xCoordOfMarking) {\n                drawRulerMarking(nextMarking, xCoordOfMarking);\n                atLeastOneMarkingDrawn = true;\n                xCoordOfPreviousMarking = xCoordOfMarking;\n            }\n            nextMarking += markingInterval;\n        }\n        indexOfFirstBaseInNode += nodes[nodeIndex].sequenceLength;\n    });\n    if (!atLeastOneMarkingDrawn) {\n        drawRulerMarking(rulerTrack.indexOfFirstBase, nodes[rulerTrack.indexSequence[0]].x - 4);\n    }\n}\nfunction drawRulerMarking(sequencePosition, xCoordinate) {\n    svg.append('text').attr('x', xCoordinate).attr('y', minYCoordinate - 13).text('|' + sequencePosition).attr('font-family', 'Courier, \"Lucida Console\", monospace').attr('font-size', '12px').attr('fill', 'black').style('pointer-events', 'none');\n}\nfunction filterObjectByAttribute(attribute, value) {\n    return function (item) {\n        return item[attribute] === value;\n    };\n}\nfunction drawTrackRectangles(rectangles, type) {\n    if (typeof type === 'undefined')\n        type = 'haplo';\n    rectangles = rectangles.filter(filterObjectByAttribute('type', type));\n    svg.selectAll('trackRectangles').data(rectangles).enter().append('rect').attr('x', function (d) {\n        return d.xStart;\n    }).attr('y', function (d) {\n        return d.yStart;\n    }).attr('width', function (d) {\n        return d.xEnd - d.xStart + 1;\n    }).attr('height', function (d) {\n        return d.yEnd - d.yStart + 1;\n    }).style('fill', function (d) {\n        return d.color;\n    }).attr('trackID', function (d) {\n        return d.id;\n    }).attr('class', function (d) {\n        return 'track' + d.id;\n    }).attr('color', function (d) {\n        return d.color;\n    }).on('mouseover', trackMouseOver).on('mouseout', trackMouseOut).on('dblclick', trackDoubleClick);\n}\nfunction compareCurvesByLineChanges(a, b) {\n    if (a[6] < b[6])\n        return -1;\n    else if (a[6] > b[6])\n        return 1;\n    return 0;\n}\nfunction defineSVGPatterns() {\n    var defs = svg.append('defs');\n    var pattern = defs.append('pattern').attrs({\n            id: 'patternA',\n            width: '7',\n            height: '7',\n            patternUnits: 'userSpaceOnUse',\n            patternTransform: 'rotate(45)'\n        });\n    pattern.append('rect').attrs({\n        x: '0',\n        y: '0',\n        width: '7',\n        height: '7',\n        fill: '#FFFFFF'\n    });\n    pattern.append('rect').attrs({\n        x: '0',\n        y: '0',\n        width: '3',\n        height: '3',\n        fill: '#505050'\n    });\n    pattern.append('rect').attrs({\n        x: '0',\n        y: '4',\n        width: '3',\n        height: '3',\n        fill: '#505050'\n    });\n    pattern.append('rect').attrs({\n        x: '4',\n        y: '0',\n        width: '3',\n        height: '3',\n        fill: '#505050'\n    });\n    pattern.append('rect').attrs({\n        x: '4',\n        y: '4',\n        width: '3',\n        height: '3',\n        fill: '#505050'\n    });\n    pattern = defs.append('pattern').attrs({\n        id: 'patternB',\n        width: '8',\n        height: '8',\n        patternUnits: 'userSpaceOnUse',\n        patternTransform: 'rotate(45)'\n    });\n    pattern.append('rect').attrs({\n        x: '0',\n        y: '0',\n        width: '8',\n        height: '8',\n        fill: '#FFFFFF'\n    });\n    pattern.append('rect').attrs({\n        x: '0',\n        y: '0',\n        width: '3',\n        height: '3',\n        fill: '#1f77b4'\n    });\n    pattern.append('rect').attrs({\n        x: '0',\n        y: '5',\n        width: '3',\n        height: '3',\n        fill: '#1f77b4'\n    });\n    pattern.append('rect').attrs({\n        x: '5',\n        y: '0',\n        width: '3',\n        height: '3',\n        fill: '#1f77b4'\n    });\n    pattern.append('rect').attrs({\n        x: '5',\n        y: '5',\n        width: '3',\n        height: '3',\n        fill: '#1f77b4'\n    });\n    pattern = defs.append('pattern').attrs({\n        id: 'plaid0',\n        width: '6',\n        height: '6',\n        patternUnits: 'userSpaceOnUse',\n        patternTransform: 'rotate(45)'\n    });\n    pattern.append('rect').attrs({\n        x: '0',\n        y: '0',\n        width: '6',\n        height: '6',\n        fill: '#FFFFFF'\n    });\n    pattern.append('rect').attrs({\n        x: '0',\n        y: '0',\n        width: '2',\n        height: '2',\n        fill: '#1f77b4'\n    });\n    pattern.append('rect').attrs({\n        x: '0',\n        y: '4',\n        width: '2',\n        height: '2',\n        fill: '#1f77b4'\n    });\n    pattern.append('rect').attrs({\n        x: '4',\n        y: '0',\n        width: '2',\n        height: '2',\n        fill: '#1f77b4'\n    });\n    pattern.append('rect').attrs({\n        x: '4',\n        y: '4',\n        width: '2',\n        height: '2',\n        fill: '#1f77b4'\n    });\n    pattern = defs.append('pattern').attrs({\n        id: 'plaid1',\n        width: '6',\n        height: '6',\n        patternUnits: 'userSpaceOnUse',\n        patternTransform: 'rotate(45)'\n    });\n    pattern.append('rect').attrs({\n        x: '0',\n        y: '0',\n        width: '6',\n        height: '6',\n        fill: '#FFFFFF'\n    });\n    pattern.append('rect').attrs({\n        x: '0',\n        y: '0',\n        width: '2',\n        height: '2',\n        fill: '#ff7f0e'\n    });\n    pattern.append('rect').attrs({\n        x: '0',\n        y: '4',\n        width: '2',\n        height: '2',\n        fill: '#ff7f0e'\n    });\n    pattern.append('rect').attrs({\n        x: '4',\n        y: '0',\n        width: '2',\n        height: '2',\n        fill: '#ff7f0e'\n    });\n    pattern.append('rect').attrs({\n        x: '4',\n        y: '4',\n        width: '2',\n        height: '2',\n        fill: '#ff7f0e'\n    });\n    pattern = defs.append('pattern').attrs({\n        id: 'plaid2',\n        width: '6',\n        height: '6',\n        patternUnits: 'userSpaceOnUse',\n        patternTransform: 'rotate(45)'\n    });\n    pattern.append('rect').attrs({\n        x: '0',\n        y: '0',\n        width: '6',\n        height: '6',\n        fill: '#FFFFFF'\n    });\n    pattern.append('rect').attrs({\n        x: '0',\n        y: '0',\n        width: '2',\n        height: '2',\n        fill: '#2ca02c'\n    });\n    pattern.append('rect').attrs({\n        x: '0',\n        y: '4',\n        width: '2',\n        height: '2',\n        fill: '#2ca02c'\n    });\n    pattern.append('rect').attrs({\n        x: '4',\n        y: '0',\n        width: '2',\n        height: '2',\n        fill: '#2ca02c'\n    });\n    pattern.append('rect').attrs({\n        x: '4',\n        y: '4',\n        width: '2',\n        height: '2',\n        fill: '#2ca02c'\n    });\n    pattern = defs.append('pattern').attrs({\n        id: 'plaid3',\n        width: '6',\n        height: '6',\n        patternUnits: 'userSpaceOnUse',\n        patternTransform: 'rotate(45)'\n    });\n    pattern.append('rect').attrs({\n        x: '0',\n        y: '0',\n        width: '6',\n        height: '6',\n        fill: '#FFFFFF'\n    });\n    pattern.append('rect').attrs({\n        x: '0',\n        y: '0',\n        width: '2',\n        height: '2',\n        fill: '#d62728'\n    });\n    pattern.append('rect').attrs({\n        x: '0',\n        y: '4',\n        width: '2',\n        height: '2',\n        fill: '#d62728'\n    });\n    pattern.append('rect').attrs({\n        x: '4',\n        y: '0',\n        width: '2',\n        height: '2',\n        fill: '#d62728'\n    });\n    pattern.append('rect').attrs({\n        x: '4',\n        y: '4',\n        width: '2',\n        height: '2',\n        fill: '#d62728'\n    });\n    pattern = defs.append('pattern').attrs({\n        id: 'plaid4',\n        width: '6',\n        height: '6',\n        patternUnits: 'userSpaceOnUse',\n        patternTransform: 'rotate(45)'\n    });\n    pattern.append('rect').attrs({\n        x: '0',\n        y: '0',\n        width: '6',\n        height: '6',\n        fill: '#FFFFFF'\n    });\n    pattern.append('rect').attrs({\n        x: '0',\n        y: '0',\n        width: '2',\n        height: '2',\n        fill: '#9467bd'\n    });\n    pattern.append('rect').attrs({\n        x: '0',\n        y: '4',\n        width: '2',\n        height: '2',\n        fill: '#9467bd'\n    });\n    pattern.append('rect').attrs({\n        x: '4',\n        y: '0',\n        width: '2',\n        height: '2',\n        fill: '#9467bd'\n    });\n    pattern.append('rect').attrs({\n        x: '4',\n        y: '4',\n        width: '2',\n        height: '2',\n        fill: '#9467bd'\n    });\n    pattern = defs.append('pattern').attrs({\n        id: 'plaid5',\n        width: '6',\n        height: '6',\n        patternUnits: 'userSpaceOnUse',\n        patternTransform: 'rotate(45)'\n    });\n    pattern.append('rect').attrs({\n        x: '0',\n        y: '0',\n        width: '6',\n        height: '6',\n        fill: '#FFFFFF'\n    });\n    pattern.append('rect').attrs({\n        x: '0',\n        y: '0',\n        width: '2',\n        height: '2',\n        fill: '#8c564b'\n    });\n    pattern.append('rect').attrs({\n        x: '0',\n        y: '4',\n        width: '2',\n        height: '2',\n        fill: '#8c564b'\n    });\n    pattern.append('rect').attrs({\n        x: '4',\n        y: '0',\n        width: '2',\n        height: '2',\n        fill: '#8c564b'\n    });\n    pattern.append('rect').attrs({\n        x: '4',\n        y: '4',\n        width: '2',\n        height: '2',\n        fill: '#8c564b'\n    });\n}\nfunction drawTrackCurves(type) {\n    if (typeof type === 'undefined')\n        type = 'haplo';\n    var myTrackCurves = trackCurves.filter(filterObjectByAttribute('type', type));\n    myTrackCurves.sort(compareCurvesByLineChanges);\n    myTrackCurves.forEach(function (curve) {\n        var xMiddle = (curve.xStart + curve.xEnd) / 2;\n        var d = 'M ' + curve.xStart + ' ' + curve.yStart;\n        d += ' C ' + xMiddle + ' ' + curve.yStart + ' ' + xMiddle + ' ' + curve.yEnd + ' ' + curve.xEnd + ' ' + curve.yEnd;\n        d += ' V ' + (curve.yEnd + curve.width);\n        d += ' C ' + xMiddle + ' ' + (curve.yEnd + curve.width) + ' ' + xMiddle + ' ' + (curve.yStart + curve.width) + ' ' + curve.xStart + ' ' + (curve.yStart + curve.width);\n        d += ' Z';\n        curve.path = d;\n    });\n    svg.selectAll('trackCurves').data(trackCurves).enter().append('path').attr('d', function (d) {\n        return d.path;\n    }).style('fill', function (d) {\n        return d.color;\n    }).attr('trackID', function (d) {\n        return d.id;\n    }).attr('class', function (d) {\n        return 'track' + d.id;\n    }).attr('color', function (d) {\n        return d.color;\n    }).on('mouseover', trackMouseOver).on('mouseout', trackMouseOut).on('dblclick', trackDoubleClick);\n}\nfunction drawTrackCorners(corners, type) {\n    if (typeof type === 'undefined')\n        type = 'haplo';\n    corners = corners.filter(filterObjectByAttribute('type', type));\n    svg.selectAll('trackCorners').data(corners).enter().append('path').attr('d', function (d) {\n        return d.path;\n    }).style('fill', function (d) {\n        return d.color;\n    }).attr('trackID', function (d) {\n        return d.id;\n    }).attr('class', function (d) {\n        return 'track' + d.id;\n    }).attr('color', function (d) {\n        return d.color;\n    }).on('mouseover', trackMouseOver).on('mouseout', trackMouseOut).on('dblclick', trackDoubleClick);\n}\nfunction drawLegend() {\n    var content = '<table class=\"table-sm table-condensed table-nonfluid\"><thead><tr><th>Color</th><th>Trackname</th><th>Show Track</th></tr></thead>';\n    var listeners = [];\n    for (var i = 0; i < tracks.length; i += 1) {\n        if (tracks[i].type === 'haplo') {\n            content += '<tr><td style=\"text-align:right\"><div class=\"color-box\" style=\"background-color: ' + generateTrackColor(tracks[i], 'exon') + ';\"></div></td>';\n            if (tracks[i].hasOwnProperty('name')) {\n                content += '<td>' + tracks[i].name + '</td>';\n            } else {\n                content += '<td>' + tracks[i].id + '</td>';\n            }\n            content += '<td><input type=\"checkbox\" checked=true id=\"showTrack' + i + '\"></td>';\n            listeners.push(i);\n        }\n    }\n    content += '</table';\n    $('#legendDiv').html(content);\n    listeners.forEach(function (i) {\n        document.getElementById('showTrack' + i).addEventListener('click', function () {\n            return changeTrackVisibility(i);\n        }, false);\n    });\n}\nfunction trackMouseOver() {\n    var trackID = d3.select(this).attr('trackID');\n    d3.selectAll('.track' + trackID).style('fill', 'url(#patternA)');\n}\nfunction nodeMouseOver() {\n    d3.select(this).style('stroke-width', '4px');\n}\nfunction trackMouseOut() {\n    var trackID = d3.select(this).attr('trackID');\n    d3.selectAll('.track' + trackID).each(function clearTrackHighlight() {\n        var c = d3.select(this).attr('color');\n        d3.select(this).style('fill', c);\n    });\n}\nfunction nodeMouseOut() {\n    d3.select(this).style('stroke-width', '2px');\n}\nfunction trackDoubleClick() {\n    var trackID = d3.select(this).attr('trackID');\n    var index = 0;\n    while (index < inputTracks.length && inputTracks[index].id !== Number(trackID)) {\n        index += 1;\n    }\n    if (index >= inputTracks.length)\n        return;\n    console.log('moving index: ' + index);\n    moveTrackToFirstPosition(index);\n    createTubeMap();\n}\nfunction nodeDoubleClick() {\n    var nodeID = d3.select(this).attr('id');\n    if (config.clickableNodesFlag) {\n        if (reads && config.showReads) {\n            document.getElementById('hgvmNodeID').value = nodeID;\n            document.getElementById('hgvmPostButton').click();\n        } else {\n            document.getElementById('nodeID').value = nodeID;\n            document.getElementById('postButton').click();\n        }\n    }\n}\nfunction vgExtractNodes(vg) {\n    var result = [];\n    vg.node.forEach(function (node) {\n        result.push({\n            name: '' + node.id,\n            sequenceLength: node.sequence.length,\n            seq: node.sequence\n        });\n    });\n    return result;\n}\nfunction generateNodeWidth() {\n    nodes.forEach(function (node) {\n        if (!node.hasOwnProperty('sequenceLength')) {\n            node.sequenceLength = node.seq.length;\n        }\n    });\n    switch (config.nodeWidthOption) {\n    case 1:\n        nodes.forEach(function (node) {\n            node.width = 1 + Math.log(node.sequenceLength) / Math.log(2);\n            node.pixelWidth = Math.round((node.width - 1) * 8.401);\n        });\n        break;\n    case 2:\n        nodes.forEach(function (node) {\n            node.width = node.sequenceLength / 100;\n            node.pixelWidth = Math.round((node.width - 1) * 8.401);\n        });\n        break;\n    default:\n        nodes.forEach(function (node) {\n            node.width = node.sequenceLength;\n            svg.append('text').attr('x', 0).attr('y', 100).attr('id', 'dummytext').text(node.seq.substr(1)).attr('font-family', 'Courier, \"Lucida Console\", monospace').attr('font-size', '14px').attr('fill', 'black').style('pointer-events', 'none');\n            node.pixelWidth = Math.round(document.getElementById('dummytext').getComputedTextLength());\n            $('#dummytext').remove();\n        });\n    }\n}\nfunction vgExtractTracks(vg) {\n    var result = [];\n    vg.path.forEach(function (path, index) {\n        var sequence = [];\n        var isCompletelyReverse = true;\n        path.mapping.forEach(function (pos) {\n            if (pos.position.hasOwnProperty('is_reverse') && pos.position.is_reverse === true) {\n                sequence.push('-' + pos.position.node_id);\n            } else {\n                sequence.push('' + pos.position.node_id);\n                isCompletelyReverse = false;\n            }\n        });\n        if (isCompletelyReverse) {\n            sequence.reverse();\n            sequence.forEach(function (node, index2) {\n                sequence[index2] = node.substr(1);\n            });\n        }\n        var track = {};\n        track.id = index;\n        track.sequence = sequence;\n        if (path.hasOwnProperty('freq'))\n            track.freq = path.freq;\n        if (path.hasOwnProperty('name'))\n            track.name = path.name;\n        if (path.hasOwnProperty('indexOfFirstBase'))\n            track.indexOfFirstBase = Number(path.indexOfFirstBase);\n        result.push(track);\n    });\n    return result;\n}\nfunction compareReadsByLeftEnd(a, b) {\n    var leftNodeA = void 0;\n    var leftNodeB = void 0;\n    var leftIndexA = void 0;\n    var leftIndexB = void 0;\n    if (a.sequence[0].charAt(0) === '-') {\n        if (a.sequence[a.sequence.length - 1].charAt(0) === '-') {\n            leftNodeA = a.sequence[a.sequence.length - 1].substr(1);\n            leftIndexA = nodes[nodeMap.get(leftNodeA)].sequenceLength - a.finalNodeCoverLength;\n        } else {\n            leftNodeA = a.sequence[a.sequence.length - 1];\n            leftIndexA = 0;\n        }\n    } else {\n        leftNodeA = a.sequence[0];\n        leftIndexA = a.firstNodeOffset;\n    }\n    if (b.sequence[0].charAt(0) === '-') {\n        if (b.sequence[b.sequence.length - 1].charAt(0) === '-') {\n            leftNodeB = b.sequence[b.sequence.length - 1].substr(1);\n            leftIndexB = nodes[nodeMap.get(leftNodeB)].sequenceLength - b.finalNodeCoverLength;\n        } else {\n            leftNodeB = b.sequence[b.sequence.length - 1];\n            leftIndexB = 0;\n        }\n    } else {\n        leftNodeB = b.sequence[0];\n        leftIndexB = b.firstNodeOffset;\n    }\n    if (leftNodeA < leftNodeB)\n        return -1;\n    else if (leftNodeA > leftNodeB)\n        return 1;\n    if (leftIndexA < leftIndexB)\n        return -1;\n    else if (leftIndexA > leftIndexB)\n        return 1;\n    return 0;\n}\nfunction compareReadsByLeftEnd2(a, b) {\n    if (nodes[a.indexSequence[0]].order < nodes[b.indexSequence[0]].order)\n        return -1;\n    else if (nodes[a.indexSequence[0]].order > nodes[b.indexSequence[0]].order)\n        return 1;\n    if (a.firstNodeOffset < b.firstNodeOffset)\n        return -1;\n    else if (a.firstNodeOffset > b.firstNodeOffset)\n        return 1;\n    if (nodes[a.indexSequence[a.indexSequence.length - 1]].order < nodes[b.indexSequence[b.indexSequence.length - 1]].order)\n        return -1;\n    else if (nodes[a.indexSequence[a.indexSequence.length - 1]].order > nodes[b.indexSequence[b.indexSequence.length - 1]].order)\n        return 1;\n    if (a.finalNodeCoverLength < b.finalNodeCoverLength)\n        return -1;\n    else if (a.finalNodeCoverLength > b.finalNodeCoverLength)\n        return 1;\n    return 0;\n}\nfunction vgExtractReads(myNodes, myTracks, myReads) {\n    console.log(myReads);\n    var extracted = [];\n    var nodeNames = [];\n    myNodes.forEach(function (node) {\n        nodeNames.push(node.name, 10);\n    });\n    var _loop3 = function _loop3(i) {\n        var read = myReads[i];\n        var sequence = [];\n        var sequenceNew = [];\n        var firstIndex = -1;\n        var lastIndex = -1;\n        read.path.mapping.forEach(function (pos, j) {\n            if (nodeNames.indexOf(pos.position.node_id) > -1) {\n                var edit = {};\n                var offset = 0;\n                if (pos.position.hasOwnProperty('is_reverse') && pos.position.is_reverse === true) {\n                    sequence.push('-' + pos.position.node_id);\n                    edit.nodeName = '-' + pos.position.node_id;\n                } else {\n                    sequence.push('' + pos.position.node_id);\n                    edit.nodeName = pos.position.node_id.toString();\n                }\n                if (firstIndex < 0) {\n                    firstIndex = j;\n                    if (pos.position.hasOwnProperty('offset')) {\n                        pos.position.offset = parseInt(pos.position.offset, 10);\n                        offset = pos.position.offset;\n                    }\n                }\n                lastIndex = j;\n                var mismatches = [];\n                var posWithinNode = offset;\n                pos.edit.forEach(function (element) {\n                    if (element.hasOwnProperty('to_length') && !element.hasOwnProperty('from_length')) {\n                        mismatches.push({\n                            type: 'insertion',\n                            pos: posWithinNode,\n                            seq: element.sequence\n                        });\n                    } else if (!element.hasOwnProperty('to_length') && element.hasOwnProperty('from_length')) {\n                        mismatches.push({\n                            type: 'deletion',\n                            pos: posWithinNode,\n                            length: element.from_length\n                        });\n                    } else if (element.hasOwnProperty('sequence')) {\n                        if (element.sequence.length > 1) {\n                            console.log('found substitution at read ' + i + ', node ' + j + ' = ' + pos.position.node_id + ', seq = ' + element.sequence);\n                        }\n                        mismatches.push({\n                            type: 'substitution',\n                            pos: posWithinNode,\n                            seq: element.sequence\n                        });\n                    }\n                    if (element.hasOwnProperty('from_length')) {\n                        posWithinNode += element.from_length;\n                    }\n                });\n                edit.mismatches = mismatches;\n                sequenceNew.push(edit);\n            }\n        });\n        if (sequence.length === 0) {\n            console.log('read ' + i + ' is empty');\n        } else {\n            var track = {};\n            track.id = myTracks.length + extracted.length;\n            track.sequence = sequence;\n            track.sequenceNew = sequenceNew;\n            track.type = 'read';\n            if (read.path.hasOwnProperty('freq'))\n                track.freq = read.path.freq;\n            if (read.path.hasOwnProperty('name'))\n                track.name = read.path.name;\n            track.firstNodeOffset = 0;\n            if (read.path.mapping[firstIndex].position.hasOwnProperty('offset')) {\n                track.firstNodeOffset = read.path.mapping[firstIndex].position.offset;\n            }\n            var finalNodeEdit = read.path.mapping[lastIndex].edit;\n            track.finalNodeCoverLength = 0;\n            if (read.path.mapping[lastIndex].position.hasOwnProperty('offset')) {\n                track.finalNodeCoverLength += read.path.mapping[lastIndex].position.offset;\n            }\n            finalNodeEdit.forEach(function (edit) {\n                if (edit.hasOwnProperty('from_length')) {\n                    track.finalNodeCoverLength += edit.from_length;\n                }\n            });\n            extracted.push(track);\n        }\n    };\n    for (var i = 0; i < myReads.length; i += 1) {\n        _loop3(i);\n    }\n    return extracted;\n}\nfunction mergeNodes() {\n    var nodeName = void 0;\n    var nodeName2 = void 0;\n    var pred = [];\n    var succ = [];\n    for (var i = 0; i < nodes.length; i += 1) {\n        pred.push(new Set());\n        succ.push(new Set());\n    }\n    var tracksAndReads = void 0;\n    if (reads && config.showReads)\n        tracksAndReads = tracks.concat(reads);\n    else\n        tracksAndReads = tracks;\n    tracksAndReads.forEach(function (track) {\n        for (var _i7 = 0; _i7 < track.sequence.length; _i7 += 1) {\n            if (track.sequence[_i7].charAt(0) !== '-') {\n                if (_i7 > 0) {\n                    nodeName = track.sequence[_i7 - 1];\n                    pred[nodeMap.get(track.sequence[_i7])].add(nodeName);\n                    if (nodeName.charAt(0) === '-') {\n                        pred[nodeMap.get(track.sequence[_i7])].add(nodeName.substr(1));\n                    }\n                } else if (track.type === 'haplo') {\n                    pred[nodeMap.get(track.sequence[_i7])].add('None');\n                }\n                if (_i7 < track.sequence.length - 1) {\n                    nodeName = track.sequence[_i7 + 1];\n                    succ[nodeMap.get(track.sequence[_i7])].add(nodeName);\n                    if (nodeName.charAt(0) === '-') {\n                        succ[nodeMap.get(track.sequence[_i7])].add(nodeName.substr(1));\n                    }\n                } else if (track.type === 'haplo') {\n                    succ[nodeMap.get(track.sequence[_i7])].add('None');\n                }\n            } else {\n                nodeName = track.sequence[_i7].substr(1);\n                if (_i7 > 0) {\n                    nodeName2 = track.sequence[_i7 - 1];\n                    if (nodeName2.charAt(0) === '-') {\n                        succ[nodeMap.get(nodeName)].add(nodeName2.substr(1));\n                    } else {\n                        succ[nodeMap.get(nodeName)].add(nodeName2);\n                        succ[nodeMap.get(nodeName)].add('-' + nodeName2);\n                    }\n                } else if (track.type === 'haplo') {\n                    succ[nodeMap.get(nodeName)].add('None');\n                }\n                if (_i7 < track.sequence.length - 1) {\n                    nodeName2 = track.sequence[_i7 + 1];\n                    if (nodeName2.charAt(0) === '-') {\n                        pred[nodeMap.get(nodeName)].add(nodeName2.substr(1));\n                    } else {\n                        pred[nodeMap.get(nodeName)].add(nodeName2);\n                        pred[nodeMap.get(nodeName)].add('-' + nodeName2);\n                    }\n                } else if (track.type === 'haplo') {\n                    pred[nodeMap.get(nodeName)].add('None');\n                }\n            }\n        }\n    });\n    for (var _i8 = 0; _i8 < nodes.length; _i8 += 1) {\n        succ[_i8] = Array.from(succ[_i8]);\n        pred[_i8] = Array.from(pred[_i8]);\n    }\n    if (reads && config.showReads) {\n        var sortedNodes = nodes.slice();\n        sortedNodes.sort(compareNodesByOrder);\n        var mergeOffset = new Map();\n        var mergeOrigin = new Map();\n        sortedNodes.forEach(function (node) {\n            var predecessor = mergeableWithPred(nodeMap.get(node.name), pred, succ);\n            if (predecessor) {\n                mergeOffset.set(node.name, mergeOffset.get(predecessor) + nodes[nodeMap.get(predecessor)].sequenceLength);\n                mergeOrigin.set(node.name, mergeOrigin.get(predecessor));\n            } else {\n                mergeOffset.set(node.name, 0);\n                mergeOrigin.set(node.name, node.name);\n            }\n        });\n        reads.forEach(function (read) {\n            read.firstNodeOffset += mergeOffset.get(read.sequence[0]);\n            read.finalNodeCoverLength += mergeOffset.get(read.sequence[read.sequence.length - 1]);\n            for (var _i9 = read.sequence.length - 1; _i9 >= 0; _i9 -= 1) {\n                if (mergeableWithPred(nodeMap.get(read.sequence[_i9]), pred, succ)) {\n                    (function () {\n                        var predecessor = mergeableWithPred(nodeMap.get(read.sequence[_i9]), pred, succ);\n                        if (mergeableWithSucc(nodeMap.get(predecessor), pred, succ)) {\n                            if (_i9 > 0) {\n                                read.sequence.splice(_i9, 1);\n                                read.sequenceNew[_i9].mismatches.forEach(function (mismatch) {\n                                    mismatch.pos += nodes[nodeMap.get(predecessor)].sequenceLength;\n                                });\n                                read.sequenceNew[_i9 - 1].mismatches = read.sequenceNew[_i9 - 1].mismatches.concat(read.sequenceNew[_i9].mismatches);\n                                read.sequenceNew.splice(_i9, 1);\n                            } else {\n                                read.sequence[0] = mergeOrigin.get(read.sequence[0]);\n                                read.sequenceNew[_i9].mismatches.forEach(function (mismatch) {\n                                    mismatch.pos += mergeOffset.get(read.sequenceNew[0].nodeName);\n                                });\n                                read.sequenceNew[0].nodeName = mergeOrigin.get(read.sequenceNew[0].nodeName);\n                            }\n                        }\n                    }());\n                }\n            }\n        });\n    }\n    for (var _i10 = 0; _i10 < nodes.length; _i10 += 1) {\n        if (mergeableWithSucc(_i10, pred, succ) && !mergeableWithPred(_i10, pred, succ)) {\n            var donor = _i10;\n            while (mergeableWithSucc(donor, pred, succ)) {\n                donor = succ[donor][0];\n                if (donor.charAt(0) === '-')\n                    donor = donor.substr(1);\n                donor = nodeMap.get(donor);\n                if (nodes[_i10].hasOwnProperty('sequenceLength')) {\n                    nodes[_i10].sequenceLength += nodes[donor].sequenceLength;\n                } else {\n                    nodes[_i10].width += nodes[donor].width;\n                }\n                nodes[_i10].seq += nodes[donor].seq;\n            }\n        }\n    }\n    tracks.forEach(function (track) {\n        for (var _i11 = track.sequence.length - 1; _i11 >= 0; _i11 -= 1) {\n            nodeName = track.sequence[_i11];\n            if (nodeName.charAt(0) === '-')\n                nodeName = nodeName.substr(1);\n            var nodeIndex = nodeMap.get(nodeName);\n            if (mergeableWithPred(nodeIndex, pred, succ)) {\n                track.sequence.splice(_i11, 1);\n            }\n        }\n    });\n    for (var _i12 = nodes.length - 1; _i12 >= 0; _i12 -= 1) {\n        if (mergeableWithPred(_i12, pred, succ)) {\n            nodes.splice(_i12, 1);\n        }\n    }\n}\nfunction mergeableWithPred(index, pred, succ) {\n    if (pred[index].length !== 1)\n        return false;\n    if (pred[index][0] === 'None')\n        return false;\n    var predecessor = pred[index][0];\n    if (predecessor.charAt(0) === '-')\n        predecessor = predecessor.substr(1);\n    var predecessorIndex = nodeMap.get(predecessor);\n    if (succ[predecessorIndex].length !== 1)\n        return false;\n    if (succ[predecessorIndex][0] === 'None')\n        return false;\n    return predecessor;\n}\nfunction mergeableWithSucc(index, pred, succ) {\n    if (succ[index].length !== 1)\n        return false;\n    if (succ[index][0] === 'None')\n        return false;\n    var successor = succ[index][0];\n    if (successor.charAt(0) === '-')\n        successor = successor.substr(1);\n    var successorIndex = nodeMap.get(successor);\n    if (pred[successorIndex].length !== 1)\n        return false;\n    if (pred[successorIndex][0] === 'None')\n        return false;\n    return true;\n}\nfunction drawMismatches() {\n    tracks.forEach(function (read, trackIdx) {\n        if (read.type === 'read') {\n            read.sequenceNew.forEach(function (element, i) {\n                element.mismatches.forEach(function (mm) {\n                    var nodeIndex = nodeMap.get(element.nodeName);\n                    var node = nodes[nodeIndex];\n                    var x = getXCoordinateOfBaseWithinNode(node, mm.pos);\n                    var pathIndex = i;\n                    while (read.path[pathIndex].node !== nodeIndex) {\n                        pathIndex += 1;\n                    }\n                    var y = read.path[pathIndex].y;\n                    if (mm.type === 'insertion') {\n                        if (config.showSoftClips || (mm.pos !== read.firstNodeOffset || i !== 0) && (mm.pos !== read.finalNodeCoverLength || i !== read.sequenceNew.length - 1)) {\n                            drawInsertion(x - 3, y + 7, mm.seq, node.y);\n                        }\n                    } else if (mm.type === 'deletion') {\n                        var x2 = getXCoordinateOfBaseWithinNode(node, mm.pos + mm.length);\n                        drawDeletion(x, x2, y + 4, node.y);\n                    } else if (mm.type === 'substitution') {\n                        var _x = getXCoordinateOfBaseWithinNode(node, mm.pos + mm.seq.length);\n                        drawSubstitution(x + 1, _x, y + 7, node.y, mm.seq);\n                    }\n                });\n            });\n        }\n    });\n}\nfunction drawInsertion(x, y, seq, nodeY) {\n    svg.append('text').attr('x', x).attr('y', y).text('*').attr('font-family', 'Courier, \"Lucida Console\", monospace').attr('font-size', '12px').attr('fill', 'black').attr('nodeY', nodeY).on('mouseover', insertionMouseOver).on('mouseout', insertionMouseOut).append('svg:title').text(seq);\n}\nfunction drawSubstitution(x1, x2, y, nodeY, seq) {\n    svg.append('text').attr('x', x1).attr('y', y).text(seq).attr('font-family', 'Courier, \"Lucida Console\", monospace').attr('font-size', '12px').attr('fill', 'black').attr('nodeY', nodeY).attr('rightX', x2).on('mouseover', substitutionMouseOver).on('mouseout', substitutionMouseOut);\n}\nfunction drawDeletion(x1, x2, y, nodeY) {\n    svg.append('line').attr('x1', x1).attr('y1', y - 1).attr('x2', x2).attr('y2', y - 1).attr('stroke-width', 7).attr('stroke', 'grey').attr('nodeY', nodeY).on('mouseover', deletionMouseOver).on('mouseout', deletionMouseOut);\n}\nfunction insertionMouseOver() {\n    d3.select(this).attr('fill', 'red');\n    var x = Number(d3.select(this).attr('x'));\n    var y = Number(d3.select(this).attr('y'));\n    var yTop = Number(d3.select(this).attr('nodeY'));\n    svg.append('line').attr('class', 'insertionHighlight').attr('x1', x + 4).attr('y1', y - 10).attr('x2', x + 4).attr('y2', yTop + 5).attr('stroke-width', 1).attr('stroke', 'black');\n}\nfunction deletionMouseOver() {\n    d3.select(this).attr('stroke', 'red');\n    var x1 = Number(d3.select(this).attr('x1'));\n    var x2 = Number(d3.select(this).attr('x2'));\n    var y = Number(d3.select(this).attr('y1'));\n    var yTop = Number(d3.select(this).attr('nodeY'));\n    svg.append('line').attr('class', 'deletionHighlight').attr('x1', x1).attr('y1', y - 3).attr('x2', x1).attr('y2', yTop + 5).attr('stroke-width', 1).attr('stroke', 'black');\n    svg.append('line').attr('class', 'deletionHighlight').attr('x1', x2).attr('y1', y - 3).attr('x2', x2).attr('y2', yTop + 5).attr('stroke-width', 1).attr('stroke', 'black');\n}\nfunction substitutionMouseOver() {\n    d3.select(this).attr('fill', 'red');\n    var x1 = Number(d3.select(this).attr('x'));\n    var x2 = Number(d3.select(this).attr('rightX'));\n    var y = Number(d3.select(this).attr('y'));\n    var yTop = Number(d3.select(this).attr('nodeY'));\n    svg.append('line').attr('class', 'substitutionHighlight').attr('x1', x1 - 1).attr('y1', y - 7).attr('x2', x1 - 1).attr('y2', yTop + 5).attr('stroke-width', 1).attr('stroke', 'black');\n    svg.append('line').attr('class', 'substitutionHighlight').attr('x1', x2 + 1).attr('y1', y - 7).attr('x2', x2 + 1).attr('y2', yTop + 5).attr('stroke-width', 1).attr('stroke', 'black');\n}\nfunction insertionMouseOut() {\n    d3.select(this).attr('fill', 'black');\n    d3.selectAll('.insertionHighlight').remove();\n}\nfunction deletionMouseOut() {\n    d3.select(this).attr('stroke', 'grey');\n    d3.selectAll('.deletionHighlight').remove();\n}\nfunction substitutionMouseOut() {\n    d3.select(this).attr('fill', 'black');\n    d3.selectAll('.substitutionHighlight').remove();\n}"]}